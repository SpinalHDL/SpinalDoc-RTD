msgid ""
msgstr ""
"Project-Id-Version: SpinalHDLReport-Msgid-Bugs-To:POT-Creation-Date:2023-12-"
"01 11:48+0800PO-Revision-Date:YEAR-MO-DA HO:MI+ZONELast-Translator:FULL NAME "
"<EMAIL@ADDRESS>Language:zh_CNLanguage-Team:zh_CN <LL@li.org>Plural-"
"Forms:nplurals=1; plural=0;MIME-Version:1.0Content-Type:text/plain; "
"charset=UTF-8\n"
"Report-Msgid-Bugs-To: EMAIL@ADDRESSPOT-Creation-Date:2023-12-02 00:23+0800PO-"
"Revision-Date:YEAR-MO-DA HO:MI+ZONELast-Translator:FULL NAME <EMAIL@ADDRESS"
">Language-Team:LANGUAGE <LL@li.org>MIME-Version:1.0Content-Type:text/plain; "
"charset=UTF-8\n"
"PO-Revision-Date: 2023-12-18 09:29+0000\n"
"Last-Translator: Readon <xydarcher@qq.com>\n"
"Language-Team: Chinese (Simplified) <https://hosted.weblate.org/projects/"
"spinaldoc-rtd/spinalhdlsemanticassignments/zh_Hans/>\n"
"Language: zh_CN\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bitGenerated-By:Babel 2.13.1\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Weblate 5.3\n"

#: ../../SpinalHDL/Semantic/assignments.rst:2
msgid "Assignments"
msgstr "赋值"

#: ../../SpinalHDL/Semantic/assignments.rst:4
msgid "There are multiple assignment operators:"
msgstr "有多个赋值运算符："

#: ../../SpinalHDL/Semantic/assignments.rst:10
msgid "Symbol"
msgstr "符号"

#: ../../SpinalHDL/Semantic/assignments.rst:11
#: ../../SpinalHDL/Semantic/assignments.rst:82
msgid "Description"
msgstr "描述"

#: ../../SpinalHDL/Semantic/assignments.rst:12
msgid "``:=``"
msgstr "``:=``"

#: ../../SpinalHDL/Semantic/assignments.rst:13
msgid "Standard assignment, equivalent to ``<=`` in VHDL/Verilog."
msgstr "标准赋值，相当于 VHDL/Verilog 中的``<=``。"

#: ../../SpinalHDL/Semantic/assignments.rst:14
msgid "``\\=``"
msgstr "``\\=``"

#: ../../SpinalHDL/Semantic/assignments.rst:15
msgid ""
"Equivalent to ``:=`` in VHDL and ``=`` in Verilog. The value is updated "
"instantly in-place. Only works with combinational signals, does not work "
"with registers."
msgstr "相当于 VHDL 中的 ``:=`` 和 Verilog 中的 "
"``=``。该值会立即就地更新。仅适用于组合信号，不适用于寄存器。"

#: ../../SpinalHDL/Semantic/assignments.rst:16
msgid "``<>``"
msgstr "``<>``"

#: ../../SpinalHDL/Semantic/assignments.rst:17
msgid ""
"Automatic connection between 2 signals or two bundles of the same type. "
"Direction is inferred by using signal direction (in/out). (Similar behavior "
"to ``:=``\\ )"
msgstr "2 个信号或相同类型的两个信号线束之间的自动连接。通过使用信号定义（输入/输出）"
"来推断方向。 （与 ``:=``\\ 类似的行为）"

#: ../../SpinalHDL/Semantic/assignments.rst:19
msgid ""
"When muxing (for instance using ``when``, see :doc:`when_switch`.), the last"
" valid standard assignment ``:=`` wins. Else, assigning twice to the same "
"assignee from the same scope results in an assignment overlap.  SpinalHDL "
"will assume this is a unintentional design error by default and halt "
"elaboration with error. For special use-cases assignment overlap can be "
"programatically permitted on a case by case basis. (see :doc:`../Design "
"errors/assignment_overlap`)."
msgstr ""
"当多路复用时（例如使用 ``when``，请参阅 :doc:`when_switch`。），"
"最后一个有效的赋值 ``:=`` "
"为准。否则，向同一范围内的同一信号赋值两次会导致重叠错误。 SpinalHDL 默认情况"
"下会假设这是一个无意的设计错误，并因错误而停止实例细化。对于特殊用例，可以根"
"据具体情况以编程方式允许重叠赋值。 （参见 :doc:`../Design errors/"
"assignment_overlap`）。"

#: ../../SpinalHDL/Semantic/assignments.rst:45
msgid ""
"It also supports Bundle assignment (convert all bit signals into a single "
"bit-bus of suitable width of type Bits, to then use that wider form in an "
"assignment expression).  Bundle multiple signals together using ``()`` "
"(Scala Tuple syntax) on both the left hand side and right hand side of an "
"assignment expression."
msgstr ""
"它还支持线束赋值（将所有位信号转换为适当位宽的 `Bits` "
"类型的单位总线，然后在赋值表达式中使用更宽的形式）。"
"在赋值表达式的左侧和右侧使用 ``()`` （Scala 元组语法）将多个信号捆绑在一起。"

#: ../../SpinalHDL/Semantic/assignments.rst:62
msgid ""
"It is important to understand that in SpinalHDL, the nature of a signal "
"(combinational/sequential) is defined in its declaration, not by the way it "
"is assigned. All datatype instances will define a combinational signal, "
"while a datatype instance wrapped with ``Reg(...)`` will define a sequential"
" (registered) signal."
msgstr ""
"重要的是要理解，在 SpinalHDL 中，信号的性质（组合/时序）是在其声明中定义的，"
"而不是通过赋值的方式定义的。所有数据类型实例都将定义一个组合信号，而用 "
"``Reg(...)`` 包装的实例将定义为一个时序信号（寄存器）。"

#: ../../SpinalHDL/Semantic/assignments.rst:73
msgid "Width checking"
msgstr "位宽检查"

#: ../../SpinalHDL/Semantic/assignments.rst:75
msgid ""
"SpinalHDL checks that the bit count of the left side and the right side of "
"an assignment matches. There are multiple ways to adapt the width of a given"
" BitVector (``Bits``, ``UInt``, ``SInt``):"
msgstr ""
"SpinalHDL 检查赋值左侧和右侧的位数是否匹配。有多种方法可以改变给定 BitVector "
"（``Bits``, ``UInt``, ``SInt``）的位宽："

#: ../../SpinalHDL/Semantic/assignments.rst:81
msgid "Resizing techniques"
msgstr "调整位宽的技术"

#: ../../SpinalHDL/Semantic/assignments.rst:83
msgid "x := y.resized"
msgstr "x := y.resized"

#: ../../SpinalHDL/Semantic/assignments.rst:84
msgid "Assign x with a resized copy of y, size inferred from x."
msgstr "将 y 改变位宽后的副本分配给 x，其位宽是从 x 推断出来的。"

#: ../../SpinalHDL/Semantic/assignments.rst:85
msgid "x := y.resize(newWidth)"
msgstr "x := y.resize(newWidth)"

#: ../../SpinalHDL/Semantic/assignments.rst:86
msgid "Assign x with a resized copy of y :code:`newWidth` bits wide."
msgstr "为 x 赋值一个 y 变为 newWidth 位宽后的副本。"

#: ../../SpinalHDL/Semantic/assignments.rst:87
msgid "x := y.resizeLeft(newWidth)"
msgstr "x := y.resizeLeft(newWidth)"

#: ../../SpinalHDL/Semantic/assignments.rst:88
msgid ""
"Assign x with a resized copy of y :code:`newWidth` bits wide. Pads at the "
"LSB if needed."
msgstr "对 x 赋值 y 变为 newWidth 位宽后的副本。如果需要，可在 LSB 处进行填充。"

#: ../../SpinalHDL/Semantic/assignments.rst:91
msgid ""
"All resize methods may cause the resulting width to be wider or narrower "
"than the original width of :code:`y`. When widening occurs the extra bits "
"are padded with zeros."
msgstr "所有改变位宽方法都可能导致生成的位宽比 y "
"的原始位宽更宽或更窄。当发生加宽时，额外的位将用零填充。"

#: ../../SpinalHDL/Semantic/assignments.rst:95
msgid ""
"The inferred conversion with ``x.resized`` is based on the target width on "
"the left hand side of the assignment expression being resolved and obeys the"
" same semantics as ``y.resize(someWidth)``. The expression ``x := "
"y.resized`` is equivalent to ``x := y.resize(x.getBitsWidth bits)``."
msgstr ""
"``x.resized`` 根据赋值表达式左侧的目标位宽推断转换方法，并遵循与 ``y."
"resize(someWidth)`` 相同的语义。表达式 ``x := y.resized`` 相当于 ``x := y."
"resize(x.getBitsWidth bits)``。"

#: ../../SpinalHDL/Semantic/assignments.rst:99
msgid ""
"While the example code snippets show the use of an assignment statement, the"
" resize family of methods can be chained like any ordinary Scala method."
msgstr "虽然示例代码片段显示了赋值语句的使用方法，但 resize 系列方法可以像任何普通 "
"Scala 方法一样进行级联。"

#: ../../SpinalHDL/Semantic/assignments.rst:102
msgid "There is one case where Spinal automatically resizes a value:"
msgstr "在一种情况下，Spinal 会自动调整位宽的大小："

#: ../../SpinalHDL/Semantic/assignments.rst:109
msgid ""
"Because ``U(3)`` is a \"weak\" bit count inferred signal, SpinalHDL widens "
"it automatically. This can be considered to be functionally equivalent to "
"``U(3, 2 bits).resized`` However rest reassured SpinalHDL will do the "
"correct thing and continue to flag an error if the scenario would require "
"narrowing. An error is reported if the literal required 9 bits (e.g. "
"``U(0x100)``) when trying to assign into ``myUIntOf_8bits``."
msgstr ""
"因为 ``U(3)`` 是一个“弱”位计数推断信号，SpinalHDL 会自动加宽它。"
"这可以被认为在功能上等同于 ``U(3, 2 bits).resized`` "
"，但是请放心，如果场景需要缩小范围，SpinalHDL 将做正确的事情并报告错误。"
"当尝试赋值 ``myUIntOf_8bits``时，如果字面量需要 9 位（例如 "
"``U(0x100)``），则会报告错误。"

#: ../../SpinalHDL/Semantic/assignments.rst:117
msgid "Combinatorial loops"
msgstr "组合逻辑环(Combinatorial loops)"

#: ../../SpinalHDL/Semantic/assignments.rst:119
msgid ""
"SpinalHDL checks that there are no combinatorial loops (latches) in your "
"design. If one is detected, it raises an error and SpinalHDL will print the "
"path of the loop."
msgstr "SpinalHDL "
"检查您的设计中是否存在组合逻辑环（锁存器）。如果检测到，会引发错误，并且 "
"SpinalHDL 将打印造成循环的路径。"

#: ../../SpinalHDL/Semantic/assignments.rst:123
msgid "CombInit"
msgstr "CombInit"

#: ../../SpinalHDL/Semantic/assignments.rst:125
msgid ""
"``CombInit`` can be used to copy a signal and its current combinatorial "
"assignments. The main use-case is to be able to overwrite the copied later, "
"without impacting the original signal."
msgstr "``CombInit`` 可用于复制信号及其当前的组合逻辑赋值。主要用例是能够稍后覆盖复制"
"后信号，而不影响原始信号。"

#: ../../SpinalHDL/Semantic/assignments.rst:149
msgid ""
"If we look at the resulting Verilog, ``b`` is not present. Since it is a "
"copy of ``a`` by reference, these variables designate the same Verilog wire."
msgstr ""
"如果我们查看生成的 Verilog，会发现``b`` 不存在。由于它是引用的 ``a`` 的副本，"
"因此这些变量指代相同的 Verilog 信号。"

#: ../../SpinalHDL/Semantic/assignments.rst:168
msgid ""
"``CombInit`` is particularly helpful in helper functions to ensure that the "
"returned value is not referencing an input."
msgstr "``CombInit`` 在辅助函数中特别有用，可确保返回值不引用输入。"

#: ../../SpinalHDL/Semantic/assignments.rst:181
msgid ""
"Without ``CombInit``, if ``c`` == false (but not if ``c`` == true), ``a1`` "
"and ``a2`` reference the same signal and the zero assignment is also applied"
" to ``a1``. With ``CombInit`` we have a coherent behaviour whatever the "
"``c`` value."
msgstr ""
"没有 ``CombInit`` 的话，如果 ``c`` == false（而不是 ``c`` == true），``a1`` "
"和 ``a2`` 会引用相同的信号，并且 ``a1`` 被赋值为零。有了 ``CombInit`` ，无论 "
"``c`` 的值是多少，我们都有一致的行为（CombInit创建新的信号）。"

#~ msgid ""
#~ "It also supports Bundle assignment. Bundle multiple signals together using "
#~ "``()`` to assign and assign to"
#~ msgstr "它还支持 Bundle 分配。使用“()”将多个信号捆绑在一起进行分配和分配"

#~ msgid "Assignment"
#~ msgstr "任务"

#~ msgid "Problem"
#~ msgstr "问题"

#~ msgid "SpinalHDL action"
#~ msgstr "脊髓HDL作用"

#~ msgid "myUIntOf_8bit := U(3)"
#~ msgstr "myUIntOf_8bit := U(3)"

#~ msgid ""
#~ "U(3) creates an UInt of 2 bits, which doesn't match the left side (8 bits)"
#~ msgstr "U(3) 创建一个 2 位的 UInt，与左侧（8 位）不匹配"

#~ msgid ""
#~ "Because U(3) is a \"weak\" bit count inferred signal, SpinalHDL resizes it "
#~ "automatically"
#~ msgstr "由于 U(3) 是“弱”位计数推断信号，SpinalHDL 会自动调整其大小"
