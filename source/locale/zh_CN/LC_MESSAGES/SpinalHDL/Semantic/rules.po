msgid ""
msgstr ""
"Project-Id-Version: SpinalHDLReport-Msgid-Bugs-To:POT-Creation-Date:2023-12-"
"01 11:48+0800PO-Revision-Date:YEAR-MO-DA HO:MI+ZONELast-Translator:FULL NAME "
"<EMAIL@ADDRESS>Language:zh_CNLanguage-Team:zh_CN <LL@li.org>Plural-"
"Forms:nplurals=1; plural=0;MIME-Version:1.0Content-Type:text/plain; "
"charset=UTF-8\n"
"Report-Msgid-Bugs-To: EMAIL@ADDRESSPOT-Creation-Date:2023-12-02 00:23+0800PO-"
"Revision-Date:YEAR-MO-DA HO:MI+ZONELast-Translator:FULL NAME <EMAIL@ADDRESS"
">Language-Team:LANGUAGE <LL@li.org>MIME-Version:1.0Content-Type:text/plain; "
"charset=UTF-8\n"
"PO-Revision-Date: 2024-01-12 04:06+0000\n"
"Last-Translator: tsy0123 <675526215@qq.com>\n"
"Language-Team: Chinese (Simplified) <https://hosted.weblate.org/projects/"
"spinaldoc-rtd/spinalhdlsemanticrules/zh_Hans/>\n"
"Language: zh_CN\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bitGenerated-By:Babel 2.13.1\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Weblate 5.4-dev\n"

#: ../../SpinalHDL/Semantic/rules.rst:2
msgid "Rules"
msgstr "规则"

#: ../../SpinalHDL/Semantic/rules.rst:4
msgid ""
"The semantics behind SpinalHDL are important to learn, so that you "
"understand what is really happening behind the scenes, and how to control "
"it."
msgstr "SpinalHDL "
"背后的语义很重要，这样您就可以了解幕后真正发生的事情以及如何控制它。"

#: ../../SpinalHDL/Semantic/rules.rst:6
msgid "These semantics are defined by multiple rules:"
msgstr "这些语义由多个规则定义："

#: ../../SpinalHDL/Semantic/rules.rst:8
msgid ""
"Signals and registers are operating concurrently with each other (parallel "
"behavioral, as in VHDL and Verilog)"
msgstr "信号和寄存器彼此同时运行（并行行为，如 VHDL 和 Verilog）"

#: ../../SpinalHDL/Semantic/rules.rst:9
msgid ""
"An assignment to a combinational signal is like expressing a rule which is "
"always true"
msgstr "对组合信号的赋值就像表达一条始终为真的规则"

#: ../../SpinalHDL/Semantic/rules.rst:10
msgid ""
"An assignment to a register is like expressing a rule which is applied on "
"each cycle of its clock domain"
msgstr "对寄存器的赋值就像表达一条应用于其时钟域的每个周期的规则"

#: ../../SpinalHDL/Semantic/rules.rst:11
msgid "For each signal, the last valid assignment wins"
msgstr "对于每个信号，最后一个赋值生效"

#: ../../SpinalHDL/Semantic/rules.rst:12
msgid ""
"Each signal and register can be manipulated as an object during hardware "
"elaboration in a `OOP <https://en.wikipedia.org/wiki/Object-"
"oriented_programming>`_ manner"
msgstr ""
"每个信号和寄存器都可以作为对象在硬件实例细化期间进行操作，用 `OOP <https://en"
".wikipedia.org/wiki/Object-oriented_programming>`_ 的思想"

#: ../../SpinalHDL/Semantic/rules.rst:15
msgid "Concurrency"
msgstr "并发"

#: ../../SpinalHDL/Semantic/rules.rst:17
msgid ""
"The order in which you assign each combinational or registered signal has no"
" behavioral impact."
msgstr "您对每个组合或时序信号的赋值顺序不会对行为产生影响。"

#: ../../SpinalHDL/Semantic/rules.rst:19
msgid "For example, both of the following pieces of code are equivalent:"
msgstr "例如，以下两段代码是等效的："

#: ../../SpinalHDL/Semantic/rules.rst:28
msgid "This is equivalent to:"
msgstr "这相当于："

#: ../../SpinalHDL/Semantic/rules.rst:37
msgid ""
"More generally, when you use the ``:=`` assignment operator, it's like "
"specifying an additional new rule for the left side signal/register."
msgstr "更一般地说，当您使用 ``:=`` "
"赋值运算符时，就像为左侧信号/寄存器指定一个附加的新规则。"

#: ../../SpinalHDL/Semantic/rules.rst:40
msgid "Last valid assignment wins"
msgstr "最后有效赋值生效"

#: ../../SpinalHDL/Semantic/rules.rst:42
msgid ""
"If a combinational signal or register is assigned multiple times through the"
" use of the SpinalHDL ``:=`` operator, the last assignment that may execute "
"wins (and so gets to set the value as a result for this state)."
msgstr ""
"如果通过使用 SpinalHDL ``:=`` 运算符对组合信号或寄存器进行多次分配，则可能执"
"行的最后一次赋值生效（因此可以将值设置为该状态的结果）。"

#: ../../SpinalHDL/Semantic/rules.rst:46
msgid ""
"It could be said that top to bottom evaluation occurs based on the state "
"that exists at that time.  If your upstream signal inputs are driven from "
"registers and so have synchronous behaviour, then it could be said that at "
"each clock cycle the assignments are re-evaluated based on the new state at "
"the time."
msgstr ""
"可以说，自上而下的评估计算是根据当时的状态进行的。如果您的上游信号输入是从寄"
"存器驱动的，因此具有同步行为，那么可以说，在每个时钟周期，都会根据当时的新状"
"态重新计算、赋值。"

#: ../../SpinalHDL/Semantic/rules.rst:51
msgid ""
"Some reasons why an assignment statement may not get to execute in hardware "
"this clock cycle, maybe due to it being wrapped in a ``when(cond)`` clause."
msgstr "在硬件中，赋值语句可能无法在本时钟周期执行的一些原因，可能是由于它被包装在 "
"``when(cond)`` 子句中。"

#: ../../SpinalHDL/Semantic/rules.rst:54
msgid ""
"Another reason maybe that the SpinalHDL code never made it through "
"elaboration because the feature was paramaterized and disabled during HDL "
"code-generation, see ``paramIsFalse`` use below."
msgstr ""
"另一个原因，可能是 SpinalHDL 代码从未通过实力细化，因为该功能在 HDL "
"代码生成期间被参数化并禁用，请参阅下面 ``paramIsFalse`` 的案例。"

#: ../../SpinalHDL/Semantic/rules.rst:58
msgid "As an example:"
msgstr "举个例子："

#: ../../SpinalHDL/Semantic/rules.rst:78
msgid "This will produce the following truth table:"
msgstr "这将产生以下真值表："

#: ../../SpinalHDL/Semantic/rules.rst:83
msgid "x"
msgstr "x"

#: ../../SpinalHDL/Semantic/rules.rst:84
msgid "y"
msgstr "y"

#: ../../SpinalHDL/Semantic/rules.rst:85
msgid "=>"
msgstr "=>"

#: ../../SpinalHDL/Semantic/rules.rst:86
msgid "result"
msgstr "结果"

#: ../../SpinalHDL/Semantic/rules.rst:87 ../../SpinalHDL/Semantic/rules.rst:88
#: ../../SpinalHDL/Semantic/rules.rst:91 ../../SpinalHDL/Semantic/rules.rst:96
msgid "False"
msgstr "False"

#: ../../SpinalHDL/Semantic/rules.rst:90 ../../SpinalHDL/Semantic/rules.rst:94
msgid "1"
msgstr "1"

#: ../../SpinalHDL/Semantic/rules.rst:92 ../../SpinalHDL/Semantic/rules.rst:95
#: ../../SpinalHDL/Semantic/rules.rst:99
#: ../../SpinalHDL/Semantic/rules.rst:100
msgid "True"
msgstr "True"

#: ../../SpinalHDL/Semantic/rules.rst:98
msgid "2"
msgstr "2"

#: ../../SpinalHDL/Semantic/rules.rst:102
msgid "3"
msgstr "3"

#: ../../SpinalHDL/Semantic/rules.rst:106
msgid ""
"Signal and register interactions with Scala (OOP reference + Functions)"
msgstr "信号和寄存器与 Scala 语言的协作（OOP 引用 + 函数）"

#: ../../SpinalHDL/Semantic/rules.rst:108
msgid ""
"In SpinalHDL, each hardware element is modeled by a class instance. This "
"means you can manipulate instances by using their references, such as "
"passing them as arguments to a function."
msgstr "在 SpinalHDL 中，每个硬件元素都由一个类实例建模。这意味着您可以通过使用实例的"
"引用来操作实例，例如将它们作为参数传递给函数。"

#: ../../SpinalHDL/Semantic/rules.rst:110
msgid ""
"As an example, the following code implements a register which is incremented"
" when ``inc`` is True and cleared when ``clear`` is True (``clear`` has "
"priority over ``inc``) :"
msgstr ""
"作为示例，以下代码实现了一个寄存器，当 ``inc`` 为 True 时递增，当 ``clear`` "
"为 True 时清零（``clear`` 优先于 ``inc``）："

#: ../../SpinalHDL/Semantic/rules.rst:124
msgid ""
"You can implement exactly the same functionality by mixing the previous "
"example with a function that assigns to ``counter``:"
msgstr "您可以通过将前面的示例与赋值给 ``counter``的函数混合来实现完全相同的功能："

#: ../../SpinalHDL/Semantic/rules.rst:142
msgid "You can also integrate the conditional check inside the function:"
msgstr "您还可以将条件检查集成到函数内："

#: ../../SpinalHDL/Semantic/rules.rst:158
msgid "And also specify what should be assigned to the function:"
msgstr "并指定函数应实现的赋值："

#: ../../SpinalHDL/Semantic/rules.rst:174
msgid ""
"All of the previous examples are strictly equivalent both in their generated"
" RTL and also in the SpinalHDL compiler's perspective. This is because "
"SpinalHDL only cares about the Scala runtime and the objects instantiated "
"there, it doesn't care about the Scala syntax itself."
msgstr ""
"前面的所有示例在生成的 RTL 中，从 SpinalHDL 编译器的角度来看都是严格等效的。"
"这是因为 SpinalHDL 只关心 Scala 运行时实例化的对象，它不关心 Scala 语法本身。"

#: ../../SpinalHDL/Semantic/rules.rst:177
msgid ""
"In other words, from a generated RTL generation / SpinalHDL perspective, "
"when you use functions in Scala which generate hardware, it is like the "
"function was inlined. This is also true case for Scala loops, as they will "
"appear in unrolled form in the generated RTL."
msgstr ""
"换句话说，从生成的 RTL 生成/SpinalHDL 的角度来看，当您调用 Scala "
"中生成硬件的函数时，就像该函数被内联了一样。 Scala 循环也是如此，"
"因为它们将以展开的形式出现在生成的 RTL 中。"

#~ msgid "Introduction"
#~ msgstr "介绍"

#~ msgid ""
#~ "If a combinational signal or register is assigned multiple times, the last "
#~ "valid one wins."
#~ msgstr "如果组合信号或寄存器被分配多次，则最后一个有效的获胜。"
