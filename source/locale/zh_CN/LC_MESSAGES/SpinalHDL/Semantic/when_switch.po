msgid ""
msgstr ""
"Project-Id-Version: SpinalHDLReport-Msgid-Bugs-To:POT-Creation-Date:2023-12-"
"01 11:48+0800PO-Revision-Date:YEAR-MO-DA HO:MI+ZONELast-Translator:FULL NAME "
"<EMAIL@ADDRESS>Language:zh_CNLanguage-Team:zh_CN <LL@li.org>Plural-"
"Forms:nplurals=1; plural=0;MIME-Version:1.0Content-Type:text/plain; "
"charset=UTF-8\n"
"Report-Msgid-Bugs-To: EMAIL@ADDRESSPOT-Creation-Date:2023-12-02 00:23+0800PO-"
"Revision-Date:YEAR-MO-DA HO:MI+ZONELast-Translator:FULL NAME <EMAIL@ADDRESS"
">Language-Team:LANGUAGE <LL@li.org>MIME-Version:1.0Content-Type:text/plain; "
"charset=UTF-8\n"
"PO-Revision-Date: 2023-12-18 09:29+0000\n"
"Last-Translator: Readon <xydarcher@qq.com>\n"
"Language-Team: Chinese (Simplified) <https://hosted.weblate.org/projects/"
"spinaldoc-rtd/spinalhdlsemanticwhen_switch/zh_Hans/>\n"
"Language: zh_CN\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bitGenerated-By:Babel 2.13.1\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Weblate 5.3\n"

#: ../../SpinalHDL/Semantic/when_switch.rst:2
msgid "When/Switch/Mux"
msgstr "When/Switch/Mux"

#: ../../SpinalHDL/Semantic/when_switch.rst:5
msgid "When"
msgstr "When"

#: ../../SpinalHDL/Semantic/when_switch.rst:7
msgid ""
"As in VHDL and Verilog, signals can be conditionally assigned when a "
"specified condition is met:"
msgstr "与 VHDL 和 Verilog 中一样，当满足指定条件时可以有条件地赋值信号："

#: ../../SpinalHDL/Semantic/when_switch.rst:21
msgid ""
"If the keyword ``otherwise`` is on the same line as the closing bracket "
"``}`` of the ``when`` condition, no dot is needed."
msgstr "如果关键字 ``otherwise`` 与 ``when`` 条件的右括号 ``}`` "
"在同一行，则不需要点。"

#: ../../SpinalHDL/Semantic/when_switch.rst:31
msgid "But if ``.otherwise`` is on another line, a dot is **required**:"
msgstr "但如果 ``.otherwise`` 在另一行，则**需要**一个点："

#: ../../SpinalHDL/Semantic/when_switch.rst:43
msgid "Switch"
msgstr "Switch"

#: ../../SpinalHDL/Semantic/when_switch.rst:45
msgid ""
"As in VHDL and Verilog, signals can be conditionally assigned when a signal "
"has a defined value:"
msgstr "与 VHDL 和 Verilog 中一样，当信号具有定义的值时，可以有条件地对信号赋值："

#: ../../SpinalHDL/Semantic/when_switch.rst:61
msgid ""
"``is`` clauses can be factorized (logical OR) by separating them with a "
"comma ``is(value1, value2)``."
msgstr "``is`` 子句可以通过用逗号 ``is(value1, value2)`` 分隔来进行分解（逻辑 OR）。"

#: ../../SpinalHDL/Semantic/when_switch.rst:64
#: ../../SpinalHDL/Semantic/when_switch.rst:186
msgid "Example"
msgstr "示例"

#: ../../SpinalHDL/Semantic/when_switch.rst:86
msgid "is equivalent to"
msgstr "相当于"

#: ../../SpinalHDL/Semantic/when_switch.rst:101
msgid "Additional options"
msgstr "其他选项"

#: ../../SpinalHDL/Semantic/when_switch.rst:103
msgid ""
"By default, SpinalHDL will generate an \"UNREACHABLE DEFAULT STATEMENT\" "
"error if a ``switch`` contains a ``default`` statement while all the "
"possible logical values of the ``switch`` are already covered by the ``is`` "
"statements. You can drop this error reporting by specifying `` "
"switch(myValue, coverUnreachable = true) { ... }``."
msgstr ""
"默认情况下，如果 ``switch`` 包含 ``default`` 语句，而 ``switch`` "
"的所有可能的逻辑值都已被是 ``is`` 语句“覆盖”，SpinalHDL 将生成“UNREACHABLE "
"DEFAULT STATEMENT”错误。您可以通过指定 `` switch(myValue, coverUnreachable = "
"true) { ... }`` 来删除此错误报告。"

#: ../../SpinalHDL/Semantic/when_switch.rst:117
msgid ""
"This check is done on the logical values, not on the physical values. For "
"instance, if you have a SpinalEnum(A,B,C) encoded in a one-hot manner, "
"SpinalHDL will only care about the A,B,C values (\"001\" \"010\" \"100\"). "
"Physical values as \"000\" \"011\" \"101\" \"110\" \"111\" will not be taken"
" in account."
msgstr ""
"此检查是针对逻辑值而不是物理值进行的。例如，如果您有一个以独热编码的 "
"SpinalEnum(A,B,C)，SpinalHDL 将只关心 A,B,C 值 (\"001\" \"010\" \"100\""
"）。物理值“000”“011”“101”“110”“111”将不被考虑。"

#: ../../SpinalHDL/Semantic/when_switch.rst:120
msgid ""
"By default, SpinalHDL will generate a \"DUPLICATED ELEMENTS IN SWITCH "
"IS(...) STATEMENT\" error if a given ``is`` statement provides multiple "
"times the same value. For instance ``is(42,42) { ... }`` You can drop this "
"error reporting by specifying ``switch(myValue, strict = true){ ... }``. "
"SpinalHDL will then take care of removing duplicated values."
msgstr ""
"默认情况下，如果给定的 ``is`` 语句多次提供相同的值，SpinalHDL 将生成 "
"\"DUPLICATED ELEMENTS IN SWITCH IS(...) STATEMENT\" 错误。例如 ``is(42,42) { "
"... }`` 您可以通过指定 ``switch(myValue, strict = true){ ... }`` "
"来避免报告此错误。 SpinalHDL 然后将负责删除重复的值。"

#: ../../SpinalHDL/Semantic/when_switch.rst:133
msgid "Local declaration"
msgstr "本地声明"

#: ../../SpinalHDL/Semantic/when_switch.rst:135
msgid "It is possible to define new signals inside a when/switch statement:"
msgstr "可以在 when/switch 语句中定义新信号："

#: ../../SpinalHDL/Semantic/when_switch.rst:152
msgid ""
"SpinalHDL checks that signals defined inside a scope are only assigned "
"inside that scope."
msgstr "SpinalHDL 会检查范围内定义的信号是否仅在该范围内使用/赋值。"

#: ../../SpinalHDL/Semantic/when_switch.rst:155
msgid "Mux"
msgstr "Mux"

#: ../../SpinalHDL/Semantic/when_switch.rst:157
msgid ""
"If you just need a ``Mux`` with a ``Bool`` selection signal, there are two "
"equivalent syntaxes:"
msgstr "如果您只需要一个带有 ``Bool`` 选择信号的 ``Mux`` ，则有两种等效的语法："

#: ../../SpinalHDL/Semantic/when_switch.rst:163
msgid "Syntax"
msgstr "语法"

#: ../../SpinalHDL/Semantic/when_switch.rst:164
msgid "Return"
msgstr "返回类型"

#: ../../SpinalHDL/Semantic/when_switch.rst:165
msgid "Description"
msgstr "描述"

#: ../../SpinalHDL/Semantic/when_switch.rst:166
msgid "Mux(cond, whenTrue, whenFalse)"
msgstr "Mux(cond, whenTrue, whenFalse)"

#: ../../SpinalHDL/Semantic/when_switch.rst:167
#: ../../SpinalHDL/Semantic/when_switch.rst:170
msgid "T"
msgstr "T"

#: ../../SpinalHDL/Semantic/when_switch.rst:168
#: ../../SpinalHDL/Semantic/when_switch.rst:171
msgid "Return ``whenTrue`` when ``cond`` is True, ``whenFalse`` otherwise"
msgstr "当 ``cond`` 为 True 时返回 ``whenTrue`` ，否则返回 ``whenFalse``"

#: ../../SpinalHDL/Semantic/when_switch.rst:169
msgid "cond ? whenTrue | whenFalse"
msgstr "cond ? whenTrue | whenFalse"

#: ../../SpinalHDL/Semantic/when_switch.rst:181
msgid "Bitwise selection"
msgstr "按位选择"

#: ../../SpinalHDL/Semantic/when_switch.rst:183
msgid "A bitwise selection looks like the VHDL ``when`` syntax."
msgstr "按位选择看起来像 VHDL ``when`` 语法。"

#: ../../SpinalHDL/Semantic/when_switch.rst:198
msgid ""
"``mux`` checks that all possible values are covered to prevent generation of"
" latches. If all possible values are covered, the default statement must not"
" be added:"
msgstr "``mux`` 检查所有可能的值是否都被覆盖以防止锁存器的生成。如果覆盖了所有可能的"
"值，则不允许添加default语句："

#: ../../SpinalHDL/Semantic/when_switch.rst:211
msgid ""
"``muxList(...)`` and ``muxListDc(...)`` are alternatives bitwise selectors "
"that take a sequence of tuples or mappings as input."
msgstr "``muxList(...)`` 和 ``muxListDc(...)`` "
"是另一种按位选择器，它们采用元组或映射作为输入。"

#: ../../SpinalHDL/Semantic/when_switch.rst:213
msgid ""
"``muxList`` can be used as a direct replacement for ``mux``, providing a "
"easier to use interface in code that generates the cases. It has the same "
"checking behavior as ``mux`` does, requiring full coverage and prohibiting "
"listing a default if it is not needed."
msgstr ""
"``muxList`` 可以用作 ``mux`` "
"的直接替代品，在生成案例的代码中提供更易于使用的接口。它具有与 ``mux`` "
"相同的检查行为，它要求完全覆盖并禁止在不需要时列出默认值。"

#: ../../SpinalHDL/Semantic/when_switch.rst:216
msgid ""
"``muxtListDc`` can be used if the uncovered values are not important, they "
"can be left unassigned by using ``muxListDc``. This will add a default case "
"if needed. This default case will generate X's during the simulation if ever"
" encountered. ``muxListDc(...)`` is often a good alternative in generic "
"code."
msgstr ""
"如果未覆盖的值不重要，则可以使用 ``muxtListDc`` ，可以使用 ``muxtListDc`` "
"将它们保留为未分配状态。如果需要，这将添加默认情况。如果遇到这种默认情况，"
"将在仿真过程中生成 `X`。``muxListDc(...)`` "
"通常是一个很好的通用代码的替代方法。"

#: ../../SpinalHDL/Semantic/when_switch.rst:220
msgid "Below is an example of dividing a ``Bits`` of 128 bits into 32 bits:"
msgstr "下面是将 128 位的 ``Bits`` 划分为 32 位的示例："

#: ../../SpinalHDL/Semantic/when_switch.rst:238
msgid ""
"Example for ``muxListDc`` selecting bits from a configurable width vector:"
msgstr "下面是 ``muxListDc`` 的案例，从可配置位宽的向量中选择多个位："
