msgid ""
msgstr ""
"Project-Id-Version: SpinalHDLReport-Msgid-Bugs-To:POT-Creation-Date:2023-12-"
"01 11:48+0800PO-Revision-Date:YEAR-MO-DA HO:MI+ZONELast-Translator:FULL NAME "
"<EMAIL@ADDRESS>Language:zh_CNLanguage-Team:zh_CN <LL@li.org>Plural-"
"Forms:nplurals=1; plural=0;MIME-Version:1.0Content-Type:text/plain; "
"charset=UTF-8\n"
"Report-Msgid-Bugs-To: EMAIL@ADDRESSPOT-Creation-Date:2023-12-02 00:23+0800PO-"
"Revision-Date:YEAR-MO-DA HO:MI+ZONELast-Translator:FULL NAME <EMAIL@ADDRESS"
">Language-Team:LANGUAGE <LL@li.org>MIME-Version:1.0Content-Type:text/plain; "
"charset=UTF-8\n"
"PO-Revision-Date: 2023-12-30 08:06+0000\n"
"Last-Translator: Readon <xydarcher@qq.com>\n"
"Language-Team: Chinese (Simplified) <https://hosted.weblate.org/projects/"
"spinaldoc-rtd/spinalhdlsimulationindex/zh_Hans/>\n"
"Language: zh_CN\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bitGenerated-By:Babel 2.13.1\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Weblate 5.4-dev\n"

#: ../../SpinalHDL/Simulation/index.rst:3
msgid "Simulation"
msgstr "仿真"

#: ../../SpinalHDL/Simulation/index.rst:5
msgid ""
"As always, you can use your standard simulation tools to simulate the "
"VHDL/Verilog generated by SpinalHDL. However, since SpinalHDL 1.0.0, the "
"language integrates an API to write testbenches and test your hardware "
"directly in Scala. This API provides the capabilities to read and write the "
"DUT signals, fork and join simulation processes, sleep and wait until a "
"given condition is reached. Therefore, using SpinalHDL's simulation API, it "
"is easy to integrate testbenches with the most common Scala unit-test "
"frameworks."
msgstr ""
"与往常一样，您可以使用标准仿真工具来仿真 SpinalHDL 生成的 VHDL/"
"Verilog。然而，从 SpinalHDL 1.0.0 开始，该语言集成了一个 API "
"来编写测试平台并直接在 Scala 中测试您的硬件。该 API 提供了读取和写入 DUT "
"信号、分裂和合并仿真的进程、休眠和等待直到达到给定条件的功能。因此，使用 "
"SpinalHDL 的仿真 API，可以轻松地将测试平台与最常见的 Scala "
"单元测试框架集成起来。"

#: ../../SpinalHDL/Simulation/index.rst:11
msgid ""
"To be able to simulate user-defined components, SpinalHDL uses external HDL "
"simulators as backend. Currently, four simulators are supported:"
msgstr "为了能够仿真用户定义的组件，SpinalHDL 使用外部 HDL "
"仿真器作为后台。目前支持四种仿真器："

#: ../../SpinalHDL/Simulation/index.rst:13
msgid "`Verilator <https://www.veripool.org/verilator/>`_"
msgstr "`Verilator <https://www.veripool.org/verilator/>`_"

#: ../../SpinalHDL/Simulation/index.rst:14
msgid ""
"`GHDL <http://ghdl.free.fr/>`_ **(experimental, since SpinalHDL 1.4.1)**"
msgstr "`GHDL <http://ghdl.free.fr/>`_ **（实验性，自 SpinalHDL 1.4.1 起）**"

#: ../../SpinalHDL/Simulation/index.rst:15
msgid ""
"`Icarus Verilog <https://steveicarus.github.io/iverilog/>`_ **(experimental,"
" since SpinalHDL 1.4.1)**"
msgstr ""
"`Icarus Verilog <https://steveicarus.github.io/iverilog/>`_ **（实验性，自 "
"SpinalHDL 1.4.1 起）**"

#: ../../SpinalHDL/Simulation/index.rst:16
msgid ""
"`VCS <https://www.synopsys.com/verification/simulation/vcs.html>`_ "
"**(experimental, since SpinalHDL 1.7.0)**"
msgstr ""
"`VCS <https://www.synopsys.com/verification/simulation/vcs.html>`_ "
"**（实验性，自 SpinalHDL 1.7.0 起）**"

#: ../../SpinalHDL/Simulation/index.rst:17
msgid ""
"`XSim <https://www.google.com/search?q=site%3Axilinx.com+xsim>`_ "
"**(experimental, since SpinalHDL 1.7.0)**"
msgstr ""
"`XSim <https://www.google.com/search?q=site%3Axilinx.com+xsim>`_ **（实验性，"
"自 SpinalHDL 1.7.0 起）**"

#: ../../SpinalHDL/Simulation/index.rst:19
msgid ""
"With external HDL simulators it is possible to directly test the generated "
"HDL sources without increasing the SpinalHDL codebase complexity."
msgstr "使用外部 HDL 仿真器，可以直接测试生成的 HDL 源文件，而不会增加 SpinalHDL "
"代码库的复杂性。"

#~ msgid "Introduction"
#~ msgstr "介绍"

#~ msgid "How SpinalHDL simulates the hardware with Verilator backend"
#~ msgstr "SpinalHDL 如何使用 Verilator 后端模拟硬件"

#~ msgid ""
#~ "Behind the scenes, SpinalHDL generates a Verilog equivalent hardware model "
#~ "of the DUT and then uses Verilator to convert it to a C++ cycle-accurate "
#~ "model."
#~ msgstr "SpinalHDL 在后台生成 DUT 的 Verilog 等效硬件模型，然后使用 Verilator 将其转换为 C++ 周期精确模型。"

#~ msgid ""
#~ "The C++ model is compiled into a shared object (.so), which is bound to "
#~ "Scala via JNR-FFI."
#~ msgstr "C++ 模型被编译成共享对象（.so），该对象通过 JNR-FFI 绑定到 Scala。"

#~ msgid ""
#~ "The native Verilator API is abstracted by providing a simulation multi-"
#~ "threaded API."
#~ msgstr "通过提供模拟多线程API来抽象本机Verilator API。"

#~ msgid "**Advantages:**"
#~ msgstr "**优点：**"

#~ msgid ""
#~ "Since the Verilator backend uses a compiled C++ simulation model, the "
#~ "simulation speed is fast compared to most of the other commercial and free "
#~ "simulators."
#~ msgstr "由于Verilator后端使用编译的C++仿真模型，因此与大多数其他商业和免费模拟器相比，仿真速度很快。"

#~ msgid "**Limitations:**"
#~ msgstr "**限制：**"

#~ msgid ""
#~ "Verilator accepts only synthesizable Verilog/System Verilog code. Therefore "
#~ "special care has to be taken when simulating Verilog blackbox components "
#~ "that may have non-synthesizable statements."
#~ msgstr ""
#~ "Verilator 仅接受可综合的 Verilog/System Verilog 代码。因此，在模拟可能具有不可综合语句的 Verilog "
#~ "黑盒组件时必须特别小心。"

#~ msgid "VHDL blackboxes cannot be simulated."
#~ msgstr "VHDL 黑盒无法模拟。"

#~ msgid ""
#~ "The simulation boot process is slow due to the necessity to compile and link"
#~ " the generated C++ model"
#~ msgstr "由于需要编译和链接生成的 C++ 模型，模拟启动过程很慢"

#~ msgid "How SpinalHDL simulates the hardware with GHDL/Icarus Verilog backend"
#~ msgstr "SpinalHDL 如何使用 GHDL/Icarus Verilog 后端模拟硬件"

#~ msgid ""
#~ "Depending on the chosen simulator, SpinalHDL generates a Verilog or VHDL "
#~ "hardware model of the DUT."
#~ msgstr "根据所选模拟器，SpinalHDL 生成 DUT 的 Verilog 或 VHDL 硬件模型。"

#~ msgid "The HDL model is loaded in the simulator."
#~ msgstr "HDL 模型已加载到模拟器中。"

#~ msgid ""
#~ "The communication between the simulation and the JVM is established through "
#~ "shared memory. The commands are issued to the simulator using `VPI "
#~ "<https://en.wikipedia.org/wiki/Verilog_Procedural_Interface>`_."
#~ msgstr ""
#~ "模拟和JVM之间的通信是通过共享内存建立的。使用“VPI "
#~ "<https://en.wikipedia.org/wiki/Verilog_Procedural_Interface>”向模拟器发出命令。"

#~ msgid "Both GHDL and Icarus Verilog can accept non-synthesizable HDL code."
#~ msgstr "GHDL 和 Icarus Verilog 都可以接受不可综合的 HDL 代码。"

#~ msgid "The simulation boot process is quite faster compared to Verilator."
#~ msgstr "与 Verilator 相比，模拟启动过程要快得多。"

#~ msgid ""
#~ "GHDL accepts VHDL code only. Therefore only VHDL blackboxes can be used with"
#~ " this simulator."
#~ msgstr "GHDL 仅接受 VHDL 代码。因此，该模拟器只能使用 VHDL 黑盒。"

#~ msgid ""
#~ "Icarus Verilog accepts Verilog code only. Therefore only Verilog blackboxes "
#~ "can be used with this simulator."
#~ msgstr "Icarus Verilog 仅接受 Verilog 代码。因此，该模拟器只能使用 Verilog 黑盒。"

#~ msgid ""
#~ "The simulation speed is around one order of magnitude slower compared to "
#~ "Verilator."
#~ msgstr "与 Verilator 相比，仿真速度大约慢一个数量级。"

#~ msgid ""
#~ "Finally, as the native Verilator API is rather crude, SpinalHDL abstracts "
#~ "over it by providing both single and multi-threaded simulation APIs to help "
#~ "the user construct testbench implementations."
#~ msgstr ""
#~ "最后，由于原生 Verilator API 相当粗糙，SpinalHDL 通过提供单线程和多线程模拟 API 对其进行抽象，以帮助用户构建测试平台实现。"

#~ msgid "How SpinalHDL simulates the hardware with Synopsys VCS backend"
#~ msgstr "SpinalHDL 如何使用 Synopsys VCS 后端模拟硬件"

#~ msgid ""
#~ "SpinalHDL generates a Verilog/VHDL (depended on your choice) hardware model "
#~ "of the DUT."
#~ msgstr "SpinalHDL 生成 DUT 的 Verilog/VHDL（取决于您的选择）硬件模型。"

#~ msgid "Support all language features of SystemVerilog/Verilog/VHDL."
#~ msgstr "支持SystemVerilog/Verilog/VHDL的所有语言特性。"

#~ msgid "Support encrypted IP."
#~ msgstr "支持加密IP。"

#~ msgid "Support FSDB wave format dump."
#~ msgstr "支持 FSDB 波形格式转储。"

#~ msgid "High Performance of both compilation and simulation."
#~ msgstr "编译和模拟的高性能。"

#~ msgid ""
#~ "Synopsys VCS is a **commercial** simulation tool. It is close source and not"
#~ " free. You have to own the licenses to **legally** use it."
#~ msgstr "Synopsys VCS 是一款**商业**仿真工具。它是闭源的并且不是免费的。您必须拥有许可证才能**合法**使用它。"

#~ msgid ""
#~ "Before using VCS as the simulation backend, make sure that you have checked "
#~ "your system environment as :ref:`VCS environment<vcs_env>`."
#~ msgstr "在使用 VCS 作为模拟后端之前，请确保您已将系统环境检查为:ref:`VCS 环境<vcs_env>`。"

#~ msgid "Performance"
#~ msgstr "表现"

#~ msgid ""
#~ "When a high-performance simulation is required, Verilator should be used as "
#~ "a backend. On a little SoC like `Murax "
#~ "<https://github.com/SpinalHDL/VexRiscv>`_, an Intel® Core™ i7-4720HQ is "
#~ "capable of simulating 1.2 million clock cycles per second. However, when the"
#~ " DUT is simple and a maximum of few thousands clock cycles have to be "
#~ "simulated, using GHDL or Icarus Verilog could yield a better result, due to "
#~ "their lower simulation loading overhead."
#~ msgstr ""
#~ "当需要高性能仿真时，应使用Verilator作为后端。在像“Murax "
#~ "<https://github.com/SpinalHDL/VexRiscv>”这样的小型 SoC 上，英特尔® 酷睿™ i7-4720HQ "
#~ "能够每秒模拟 120 万个时钟周期。然而，当 DUT 很简单并且需要仿真最多几千个时钟周期时，使用 GHDL 或 Icarus Verilog "
#~ "可以产生更好的结果，因为它们的仿真负载开销较低。"
