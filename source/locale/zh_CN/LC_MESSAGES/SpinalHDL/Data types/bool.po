msgid ""
msgstr ""
"Project-Id-Version: SpinalHDLReport-Msgid-Bugs-To:POT-Creation-Date:2023-12-"
"01 11:48+0800PO-Revision-Date:YEAR-MO-DA HO:MI+ZONELast-Translator:FULL NAME "
"<EMAIL@ADDRESS>Language:zh_CNLanguage-Team:zh_CN <LL@li.org>Plural-"
"Forms:nplurals=1; plural=0;MIME-Version:1.0Content-Type:text/plain; "
"charset=UTF-8\n"
"Report-Msgid-Bugs-To: EMAIL@ADDRESSPOT-Creation-Date:2023-12-02 00:23+0800PO-"
"Revision-Date:YEAR-MO-DA HO:MI+ZONELast-Translator:FULL NAME <EMAIL@ADDRESS"
">Language-Team:LANGUAGE <LL@li.org>MIME-Version:1.0Content-Type:text/plain; "
"charset=UTF-8\n"
"PO-Revision-Date: 2024-01-13 05:06+0000\n"
"Last-Translator: tsy0123 <675526215@qq.com>\n"
"Language-Team: Chinese (Simplified) <https://hosted.weblate.org/projects/"
"spinaldoc-rtd/spinalhdldata-typesbool/zh_Hans/>\n"
"Language: zh_CN\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bitGenerated-By:Babel 2.13.1\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Weblate 5.4-dev\n"

#: ../../SpinalHDL/Data types/bool.rst:4 types/bool.rst:70 types/bool.rst:73
#: types/bool.rst:76 types/bool.rst:80 types/bool.rst:112 types/bool.rst:116
#: types/bool.rst:120 types/bool.rst:123 types/bool.rst:126 types/bool.rst:135
#: types/bool.rst:138 types/bool.rst:141 types/bool.rst:144 types/bool.rst:192
#: types/bool.rst:195 types/bool.rst:198 types/bool.rst:201 types/bool.rst:204
#: types/bool.rst:207 types/bool.rst:216 types/bool.rst:248 types/bool.rst:251
msgid "Bool"
msgstr "Bool"

#: ../../SpinalHDL/Data types/bool.rst:7 types/bool.rst:66 types/bool.rst:108
#: types/bool.rst:188 types/bool.rst:244 types/bool.rst:271 types/bool.rst:305
msgid "Description"
msgstr "描述"

#: ../../SpinalHDL/Data types/bool.rst:9
msgid ""
"The ``Bool`` type corresponds to a boolean value (True or False) or a single"
" bit/wire used in a hardware design.  While named similarly it should not be"
" confused with Scala `Boolean` type which does not describe hardware but "
"truth values in the Scala generator code."
msgstr ""
"``Bool`` 类型对应于硬件设计中使用的布尔值（True 或 "
"False）或单个位/线。虽然名称类似，但不应与 Scala `Boolean` "
"类型混淆，后者不描述硬件，而是描述 Scala 生成器代码中的真值。"

#: ../../SpinalHDL/Data types/bool.rst:14
msgid ""
"An important concept and rule-of-thumb to understand is that the Scala "
"`Boolean` type is used in places where elaboration-time HDL code-generation "
"decision making is occuring in Scala code.  Like any regular program it "
"affects execution of the Scala program that is SpinalHDL at the time the "
"program is being run to perform HDL code generation."
msgstr ""
"需要理解的一个重要概念和经验是，Scala `Boolean` "
"类型用于在实例细化时决定如何生成 HDL 代码。与任何常规程序一样，在运行 "
"SpinalHDL 程序以执行 HDL 代码生成时，它会影响 Scala 程序的执行。"

#: ../../SpinalHDL/Data types/bool.rst:20
msgid ""
"Therefore the value of a Scala `Boolean` can not be observed from hardware, "
"because it only exists ahead-of-time in the SpinalHDL program at the time of"
" HDL code-gen."
msgstr ""
"因此，Scala `Boolean` 的值无法从硬件中观察到，因为它仅在 HDL "
"代码生成时存在于 SpinalHDL 程序中，这在硬件仿真/运行之前。"

#: ../../SpinalHDL/Data types/bool.rst:24
msgid ""
"In scenarios where you might need this for your design, for example to pass "
"a value (that maybe acting as a parameterized constant input) from Scala "
"into your hardware design, you can type convert it to Bool with the "
"constructor `Bool(value: Boolean)`."
msgstr ""
"在您的设计中可能需要这样做，例如从 Scala "
"向硬件设计中传递一个值（该值可能作为参数化常量输入），您可以使用构造函数 "
"`Bool(value: Boolean)` 将其类型转换为 `Bool` 。"

#: ../../SpinalHDL/Data types/bool.rst:28
msgid ""
"Similarly the value of a SpinalHDL `Bool` can not be seen at code-"
"generation, all that can be seen and manipulated is the HDL construct "
"concerning a `wire` and how it is routed (through modules/Components), "
"driven (sourced) and connected (sunk)."
msgstr ""
"同样，SpinalHDL `Bool` 的值在代码生成时无法看到，"
"所有可以看到和操作的都是有关 `wire` 的 HDL "
"构造以及它如何路由（通过模块/组件）、驱动（源）并连接（汇据点）。"

#: ../../SpinalHDL/Data types/bool.rst:32
msgid ""
"The signal direction of assignment operators `:=` is managed by SpinalHDL. "
"The use of the Bool instance on the left-hand-side or the right-hand-side of"
" the assignment operator `:=` dictates if it is a source (provides state) or"
" sink (captures state) for a given assignment."
msgstr ""
"赋值运算符 `:=` 的信号方向由 SpinalHDL 管理。在赋值运算符 `:=` "
"左侧或右侧使用 `Bool` "
"实例指示它是给定赋值的源（提供状态）还是接收器（捕获状态）。"

#: ../../SpinalHDL/Data types/bool.rst:37
msgid ""
"Multiple uses of the assignment operator are allowed, such that it is normal"
" for a signal wire to act as a source (provides a value to drive HDL state) "
"to be able to connect and drive multiple inputs of other HDL constructs.  "
"When a Bool instance used as a source the order the assignment statements "
"appear or are executed in Scala does not matter, unlike when it is used as a"
" sink (captures state)."
msgstr ""
"允许多次使用赋值运算符，因此信号线作为源（提供值以驱动 HDL 状态）"
"连接并驱动其他 HDL 结构的多个输入是很正常的。 当 Bool 实例用作源时，"
"赋值语句在 Scala "
"中出现或执行的顺序并不重要，而当它用作汇（捕获状态）时则不同。"

#: ../../SpinalHDL/Data types/bool.rst:44
msgid ""
"When multiple assignment operators drive the Bool (the Bool is on the left-"
"hand-side of the assignment expression), the last assignment statement wins "
"rule; take effect.  The last would be the last to execute in Scala code.  "
"This matter can affect the layout and ordering of your SpinalHDL Scala code "
"to ensure the correct precedence order is archived in the hardware design "
"for assigning a new state to the Bool in hardware."
msgstr ""
"当多个赋值操作符驱动 Bool（Bool "
"位于赋值表达式的左侧）时，最后一个赋值语句将赢得胜利；并开始生效。 "
"最后一个将在 Scala 代码中最后执行。 此事会影响 SpinalHDL Scala "
"代码的布局和排序，以确保在硬件设计中获得正确的优先顺序，以便在硬件中为 Bool "
"赋值新状态。"

#: ../../SpinalHDL/Data types/bool.rst:51
msgid ""
"It may help to understand the concept with relating the Scala/SpinalHDL "
"`Bool` instance as a reference to a HDL `net` in the net-list.  Which the "
"assignment `:=` operator is attaching HDL constructs into the same net."
msgstr ""
"将 Scala/SpinalHDL `Bool` 实例作为对 net-list 中 HDL `net` "
"的引用，可能有助于理解这一概念。 其中，赋值 `:=` 操作符将 HDL "
"结构加入到同一个网中。"

#: ../../SpinalHDL/Data types/bool.rst:57
msgid "Declaration"
msgstr "声明"

#: ../../SpinalHDL/Data types/bool.rst:59
msgid ""
"The syntax to declare a boolean value is as follows: (everything between [] "
"is optional)"
msgstr "声明布尔值的语法如下：（[]之间的所有内容都是可选的）"

#: ../../SpinalHDL/Data types/bool.rst:65
msgid "Syntax"
msgstr "语法"

#: ../../SpinalHDL/Data types/bool.rst:67 types/bool.rst:272
#: types/bool.rst:306
msgid "Return"
msgstr "返回类型"

#: ../../SpinalHDL/Data types/bool.rst:68
msgid "Bool()"
msgstr "Bool()"

#: ../../SpinalHDL/Data types/bool.rst:69
msgid "Create a Bool"
msgstr "创建Bool值"

#: ../../SpinalHDL/Data types/bool.rst:71
msgid "True"
msgstr "True"

#: ../../SpinalHDL/Data types/bool.rst:72
msgid "Create a Bool assigned with ``true``"
msgstr "创建一个分配有 ``true`` 值的 Bool对象"

#: ../../SpinalHDL/Data types/bool.rst:74
msgid "False"
msgstr "False"

#: ../../SpinalHDL/Data types/bool.rst:75
msgid "Create a Bool assigned with ``false``"
msgstr "创建一个Bool值并赋值为 ``false``"

#: ../../SpinalHDL/Data types/bool.rst:77
msgid "Bool(value: Boolean)"
msgstr "Bool(value: Boolean)"

#: ../../SpinalHDL/Data types/bool.rst:78
msgid ""
"Create a Bool assigned with a value from a Scala Boolean type (true, false)."
" This explicitly converts to ``True`` or ``False``."
msgstr "创建一个 Bool，并分配一个 Scala 布尔类型（true、false）的值。这显式地转换为 "
"``True`` 或 ``False`` 。"

#: ../../SpinalHDL/Data types/bool.rst:93
msgid "Operators"
msgstr "运算符"

#: ../../SpinalHDL/Data types/bool.rst:95
msgid "The following operators are available for the ``Bool`` type:"
msgstr "以下运算符可用于 ``Bool`` 类型："

#: ../../SpinalHDL/Data types/bool.rst:102
msgid "Logic"
msgstr "逻辑运算"

#: ../../SpinalHDL/Data types/bool.rst:107 types/bool.rst:187
#: types/bool.rst:243 types/bool.rst:270 types/bool.rst:304
msgid "Operator"
msgstr "运算符"

#: ../../SpinalHDL/Data types/bool.rst:109 types/bool.rst:189
#: types/bool.rst:245
msgid "Return type"
msgstr "返回类型"

#: ../../SpinalHDL/Data types/bool.rst:110
msgid "!x"
msgstr "!x"

#: ../../SpinalHDL/Data types/bool.rst:111 types/bool.rst:125
msgid "Logical NOT"
msgstr "逻辑非"

#: ../../SpinalHDL/Data types/bool.rst
msgid "x && y"
msgstr "x && y"

#: ../../SpinalHDL/Data types/bool.rst
msgid "x & y"
msgstr "x & y"

#: ../../SpinalHDL/Data types/bool.rst:115
msgid "Logical AND"
msgstr "逻辑与"

#: ../../SpinalHDL/Data types/bool.rst
msgid "x || y"
msgstr "x || y"

#: ../../SpinalHDL/Data types/bool.rst
msgid "x | y"
msgstr "x | y"

#: ../../SpinalHDL/Data types/bool.rst:119
msgid "Logical OR"
msgstr "逻辑或"

#: ../../SpinalHDL/Data types/bool.rst:121
msgid "x ^ y"
msgstr "x ^ y"

#: ../../SpinalHDL/Data types/bool.rst:122
msgid "Logical XOR"
msgstr "逻辑异或"

#: ../../SpinalHDL/Data types/bool.rst:124
msgid "~x"
msgstr "~x"

#: ../../SpinalHDL/Data types/bool.rst:127
msgid "x.set[()]"
msgstr "x.set[()]"

#: ../../SpinalHDL/Data types/bool.rst:128
msgid "Set x to True"
msgstr "将 x 设置为 True"

#: ../../SpinalHDL/Data types/bool.rst:129 types/bool.rst:132
msgid "Unit (none)"
msgstr "Unit (none)"

#: ../../SpinalHDL/Data types/bool.rst:130
msgid "x.clear[()]"
msgstr "x.clear[()]"

#: ../../SpinalHDL/Data types/bool.rst:131
msgid "Set x to False"
msgstr "将 x 设置为 False"

#: ../../SpinalHDL/Data types/bool.rst:133
msgid "x.setWhen(cond)"
msgstr "x.setWhen(cond)"

#: ../../SpinalHDL/Data types/bool.rst:134
msgid "Set x when cond is True"
msgstr "当 cond 为 True 时设置 x 为 True"

#: ../../SpinalHDL/Data types/bool.rst:136
msgid "x.clearWhen(cond)"
msgstr "x.clearWhen(cond)"

#: ../../SpinalHDL/Data types/bool.rst:137
msgid "Clear x when cond is True"
msgstr "当 cond 为 True 时设置 x 为 False"

#: ../../SpinalHDL/Data types/bool.rst:139
msgid "x.riseWhen(cond)"
msgstr "x.riseWhen(cond)"

#: ../../SpinalHDL/Data types/bool.rst:140
msgid "Set x when x is False and cond is True"
msgstr "当 x 为 False 并且 cond 为 True 时设置 x 为 True"

#: ../../SpinalHDL/Data types/bool.rst:142
msgid "x.fallWhen(cond)"
msgstr "x.fallWhen(cond)"

#: ../../SpinalHDL/Data types/bool.rst:143
msgid "Clear x when x is True and cond is True"
msgstr "当 x 为 True 并且 cond 为 True 时设置 x 为False"

#: ../../SpinalHDL/Data types/bool.rst:173
msgid "Edge detection"
msgstr "边缘检测"

#: ../../SpinalHDL/Data types/bool.rst:175
msgid ""
"All edge detection functions will instantiate an additional register via "
":ref:`RegNext <regnext>` to get a delayed value of the ``Bool`` in question."
msgstr ""
"所有边缘检测函数都将通过 :ref:`RegNext <regnext>` 实例化一个附加寄存器，"
"以获取相关 ``Bool`` 的延迟值（一拍）。"

#: ../../SpinalHDL/Data types/bool.rst:178
msgid ""
"This feature does not reconfigure a D-type Flip-Flop to use an alternative "
"CLK source, it uses two D-type Flip-Flop in series chain (with both CLK pins"
" inheriting the default ClockDomain).  It has combinational logic to perform"
" edge detection based on the output Q states."
msgstr ""
"此功能不会重新配置 D 型触发器以使用其他 CLK 时钟，它使用串联链中的两个 D "
"型触发器（两个 CLK 引脚都继承默认的 ClockDomain）。它具有组合逻辑，"
"可根据输出 Q 状态进行边缘检测。"

#: ../../SpinalHDL/Data types/bool.rst:190
msgid "x.edge[()]"
msgstr "x.edge[()]"

#: ../../SpinalHDL/Data types/bool.rst:191
msgid "Return True when x changes state"
msgstr "当 x 状态改变时返回 True"

#: ../../SpinalHDL/Data types/bool.rst:193
msgid "x.edge(initAt: Bool)"
msgstr "x.edge(initAt: Bool)"

#: ../../SpinalHDL/Data types/bool.rst:194
msgid "Same as x.edge but with a reset value"
msgstr "与 x.edge 相同但具有重置后的初始值"

#: ../../SpinalHDL/Data types/bool.rst:196
msgid "x.rise[()]"
msgstr "x.rise[()]"

#: ../../SpinalHDL/Data types/bool.rst:197
msgid "Return True when x was low at the last cycle and is now high"
msgstr "当 x 在上一个周期为低电平且现在为高电平时返回 True"

#: ../../SpinalHDL/Data types/bool.rst:199
msgid "x.rise(initAt: Bool)"
msgstr "x.rise(initAt: Bool)"

#: ../../SpinalHDL/Data types/bool.rst:200
msgid "Same as x.rise but with a reset value"
msgstr "与 x.rise 相同但具有重置后的初始值"

#: ../../SpinalHDL/Data types/bool.rst:202
msgid "x.fall[()]"
msgstr "x.fall[()]"

#: ../../SpinalHDL/Data types/bool.rst:203
msgid "Return True when x was high at the last cycle and is now low"
msgstr "当 x 在上一个周期为高且现在为低时返回 True"

#: ../../SpinalHDL/Data types/bool.rst:205
msgid "x.fall(initAt: Bool)"
msgstr "x.fall(initAt: Bool)"

#: ../../SpinalHDL/Data types/bool.rst:206
msgid "Same as x.fall but with a reset value"
msgstr "与 x.fall 相同但具有重置后的初始值"

#: ../../SpinalHDL/Data types/bool.rst:208
msgid "x.edges[()]"
msgstr "x.edges[()]"

#: ../../SpinalHDL/Data types/bool.rst:209
msgid "Return a bundle (rise, fall, toggle)"
msgstr "返回捆绑包（上升、下降、切换）"

#: ../../SpinalHDL/Data types/bool.rst:210 types/bool.rst:213
msgid "BoolEdges"
msgstr "BoolEdges"

#: ../../SpinalHDL/Data types/bool.rst:211
msgid "x.edges(initAt: Bool)"
msgstr "x.edges(initAt: Bool)"

#: ../../SpinalHDL/Data types/bool.rst:212
msgid "Same as x.edges but with a reset value"
msgstr "与 x.edges 相同但具有重置后的初始值"

#: ../../SpinalHDL/Data types/bool.rst:214
msgid "x.toggle[()]"
msgstr "x.toggle[()]"

#: ../../SpinalHDL/Data types/bool.rst:215
msgid "Return True at every edge"
msgstr "在每个边缘返回 True"

#: ../../SpinalHDL/Data types/bool.rst:238
msgid "Comparison"
msgstr "比较运算"

#: ../../SpinalHDL/Data types/bool.rst:246
msgid "x === y"
msgstr "x === y"

#: ../../SpinalHDL/Data types/bool.rst:247
msgid "Equality"
msgstr "等价性判断"

#: ../../SpinalHDL/Data types/bool.rst:249
msgid "x =/= y"
msgstr "x =/= y"

#: ../../SpinalHDL/Data types/bool.rst:250
msgid "Inequality"
msgstr "不等价判断运算"

#: ../../SpinalHDL/Data types/bool.rst:265
msgid "Type cast"
msgstr "类型转换"

#: ../../SpinalHDL/Data types/bool.rst:273
msgid "x.asBits"
msgstr "x.asBits"

#: ../../SpinalHDL/Data types/bool.rst:274
msgid "Binary cast to Bits"
msgstr "二进制转换为 Bits"

#: ../../SpinalHDL/Data types/bool.rst:275
msgid "Bits(1 bit)"
msgstr "Bits(1 bit)"

#: ../../SpinalHDL/Data types/bool.rst:276
msgid "x.asUInt"
msgstr "x.asUInt"

#: ../../SpinalHDL/Data types/bool.rst:277
msgid "Binary cast to UInt"
msgstr "二进制转换为 UInt"

#: ../../SpinalHDL/Data types/bool.rst:278
msgid "UInt(1 bit)"
msgstr "UInt(1 bit)"

#: ../../SpinalHDL/Data types/bool.rst:279
msgid "x.asSInt"
msgstr "x.asSInt"

#: ../../SpinalHDL/Data types/bool.rst:280
msgid "Binary cast to SInt"
msgstr "二进制转换为SInt"

#: ../../SpinalHDL/Data types/bool.rst:281
msgid "SInt(1 bit)"
msgstr "SInt(1 bit)"

#: ../../SpinalHDL/Data types/bool.rst:282
msgid "x.asUInt(bitCount)"
msgstr "x.asUInt(bitCount)"

#: ../../SpinalHDL/Data types/bool.rst:283
msgid ""
"Binary cast to UInt and resize, putting Bool value in LSB and padding with "
"zeros."
msgstr "二进制转换为 UInt 并调整大小，将 Bool 值放入 LSB 并用零填充。"

#: ../../SpinalHDL/Data types/bool.rst:285
msgid "UInt(bitCount bits)"
msgstr "UInt(bitCount bits)"

#: ../../SpinalHDL/Data types/bool.rst:286
msgid "x.asBits(bitCount)"
msgstr "x.asBits(bitCount)"

#: ../../SpinalHDL/Data types/bool.rst:287
msgid ""
"Binary cast to Bits and resize, putting Bool value in LSB and padding with "
"zeros."
msgstr "二进制转换为位并调整大小，将布尔值放入 LSB 并用零填充。"

#: ../../SpinalHDL/Data types/bool.rst:289
msgid "Bits(bitCount bits)"
msgstr "Bits(bitCount bits)"

#: ../../SpinalHDL/Data types/bool.rst:299
msgid "Misc"
msgstr "杂项"

#: ../../SpinalHDL/Data types/bool.rst:307
msgid "x ## y"
msgstr "x ## y"

#: ../../SpinalHDL/Data types/bool.rst:308
msgid "Concatenate, x->high, y->low"
msgstr "连接Bits，x->高位，y->低位"

#: ../../SpinalHDL/Data types/bool.rst:309
msgid "Bits(w(x) + w(y) bits)"
msgstr "Bits(w(x) + w(y) bits)"

#: ../../SpinalHDL/Data types/bool.rst:310
msgid "x #* n"
msgstr "x #* n"

#: ../../SpinalHDL/Data types/bool.rst:311
msgid "Repeat x n-times"
msgstr "n次重复x并合并"

#: ../../SpinalHDL/Data types/bool.rst:312
msgid "Bits(n bits)"
msgstr "Bits(n bits)"

#: ../../SpinalHDL/Data types/bool.rst:324
msgid "MaskedBoolean"
msgstr "掩码布尔值"

#: ../../SpinalHDL/Data types/bool.rst:326
msgid ""
"A masked boolean allows don’t care values. They are usually not used on "
"their own but through :ref:`MaskedLiteral <maskedliteral>`."
msgstr ""
"具有掩码的布尔型允许任意值（don't care）。它们通常不单独使用，而是通过 :ref:`"
"MaskedLiteral <maskedliteral>` 使用。"

#~ msgid "The ``Bool`` type corresponds to a boolean value (True or False)."
#~ msgstr "“Bool” 类型对应于布尔值（True 或 False）。"

#~ msgid "Binary cast to UInt and resize"
#~ msgstr "二进制转换为 UInt 并调整大小"

#~ msgid "Binary cast to Bits and resize"
#~ msgstr "二进制转换为位并调整大小"
