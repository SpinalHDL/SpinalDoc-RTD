msgid ""
msgstr ""
"Project-Id-Version: SpinalHDLReport-Msgid-Bugs-To:POT-Creation-Date:2023-12-"
"01 11:48+0800PO-Revision-Date:YEAR-MO-DA HO:MI+ZONELast-Translator:FULL NAME "
"<EMAIL@ADDRESS>Language:zh_CNLanguage-Team:zh_CN <LL@li.org>Plural-"
"Forms:nplurals=1; plural=0;MIME-Version:1.0Content-Type:text/plain; "
"charset=UTF-8\n"
"Report-Msgid-Bugs-To: EMAIL@ADDRESSPOT-Creation-Date:2023-12-02 00:23+0800PO-"
"Revision-Date:YEAR-MO-DA HO:MI+ZONELast-Translator:FULL NAME <EMAIL@ADDRESS"
">Language-Team:LANGUAGE <LL@li.org>MIME-Version:1.0Content-Type:text/plain; "
"charset=UTF-8\n"
"PO-Revision-Date: 2023-12-26 05:04+0000\n"
"Last-Translator: Readon <xydarcher@qq.com>\n"
"Language-Team: Chinese (Simplified) <https://hosted.weblate.org/projects/"
"spinaldoc-rtd/spinalhdlmisceleneacorecore_components/zh_Hans/>\n"
"Language: zh_CN\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bitGenerated-By:Babel 2.13.1\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Weblate 5.4-dev\n"

#: ../../SpinalHDL/miscelenea/core/core_components.rst:8
msgid "The ``spinal.core`` components"
msgstr "``spinal.core`` 组件"

#: ../../SpinalHDL/miscelenea/core/core_components.rst:9
msgid ""
"The core components of the language are described in this document. It is "
"part of the general"
msgstr "本文档描述了该语言的核心组件。它涵盖了大部分情况"

#: ../../SpinalHDL/miscelenea/core/core_components.rst:13
msgid "The core language components are as follows:"
msgstr "核心语言组件如下："

#: ../../SpinalHDL/miscelenea/core/core_components.rst:15
msgid ""
":ref:`*Clock domains* <core_components_clock_domain_definition>`, which "
"allow to define and interoperate multiple clock domains within a design"
msgstr ":ref:`*时钟域* "
"<core_components_clock_domain_definition>`，允许在设计中定义和操作多个时钟域"

#: ../../SpinalHDL/miscelenea/core/core_components.rst:16
msgid ""
"*Memory instantiation*\\ , which permit the automatic instantiation of RAM "
"and ROM memories."
msgstr "*存储器实例化*\\ ，允许自动实例化 RAM 和 ROM 存储器。"

#: ../../SpinalHDL/miscelenea/core/core_components.rst:17
msgid "*IP instantiation*\\ , using either existing VHDL or Verilog component."
msgstr "*IP 实例化*\\ ，使用现有的 VHDL 或 Verilog 组件实例化。"

#: ../../SpinalHDL/miscelenea/core/core_components.rst:18
#: ../../SpinalHDL/miscelenea/core/core_components.rst:160
msgid "Assignments"
msgstr "赋值"

#: ../../SpinalHDL/miscelenea/core/core_components.rst:19
#: ../../SpinalHDL/miscelenea/core/core_components.rst:229
msgid "When / Switch"
msgstr "When / Switch"

#: ../../SpinalHDL/miscelenea/core/core_components.rst:20
msgid "Component hierarchy"
msgstr "组件层次结构"

#: ../../SpinalHDL/miscelenea/core/core_components.rst:21
#: ../../SpinalHDL/miscelenea/core/core_components.rst:328
msgid "Area"
msgstr "Area"

#: ../../SpinalHDL/miscelenea/core/core_components.rst:22
msgid "Functions"
msgstr "函数"

#: ../../SpinalHDL/miscelenea/core/core_components.rst:23
msgid "Utility functions"
msgstr "实用函数"

#: ../../SpinalHDL/miscelenea/core/core_components.rst:24
msgid "VHDL generator"
msgstr "VHDL生成器"

#: ../../SpinalHDL/miscelenea/core/core_components.rst:29
msgid "Clock domains definitions"
msgstr "时钟域定义"

#: ../../SpinalHDL/miscelenea/core/core_components.rst:31
msgid ""
"In *Spinal*\\ , clock and reset signals can be combined to create a **clock "
"domain**. Clock domains could be applied to some area of the design and then"
" all synchronous elements instantiated into this area will then "
"**implicitly** use this clock domain."
msgstr ""
"在 *Spinal*\\ 中，时钟和复位信号可以组合起来创建**时钟域**。时钟域可以应用于"
"设计的某些区域，该区域的所有实例化的同步元件将**隐式地**使用该时钟域。"

#: ../../SpinalHDL/miscelenea/core/core_components.rst:33
msgid ""
"Clock domain application work like a stack, which mean, if you are in a "
"given clock domain, you can still apply another clock domain locally."
msgstr "时钟域像堆栈一样工作，这意味着，如果您的逻辑位于给定时钟域中，您仍然可以在其"
"上应用另一个时钟域。"

#: ../../SpinalHDL/miscelenea/core/core_components.rst:39
msgid "Clock domain syntax"
msgstr "时钟域语法"

#: ../../SpinalHDL/miscelenea/core/core_components.rst:41
msgid "The syntax to define a clock domain is as follows (using EBNF syntax):"
msgstr "定义时钟域的语法如下（使用EBNF语法）："

#: ../../SpinalHDL/miscelenea/core/core_components.rst:43
msgid "``ClockDomain(clock : Bool[,reset : Bool[,enable : Bool]]])``"
msgstr "``ClockDomain(clock : Bool[,reset : Bool[,enable : Bool]]])``"

#: ../../SpinalHDL/miscelenea/core/core_components.rst:45
msgid "This definition takes three parameters:"
msgstr "这个定义需要三个参数："

#: ../../SpinalHDL/miscelenea/core/core_components.rst:48
msgid "The clock signal that defines the domain"
msgstr "时钟域的时钟信号"

#: ../../SpinalHDL/miscelenea/core/core_components.rst:49
msgid ""
"An optional ``reset``\\ signal. If a register which need a reset and his "
"clock domain didn't provide one, an error message happen"
msgstr "可选的 ``reset`` "
"复位信号。如果需要重置的寄存器并且其时钟域没有提供重置，则会出现错误提示"

#: ../../SpinalHDL/miscelenea/core/core_components.rst:50
msgid ""
"An optional ``enable`` signal. The goal of this signal is to disable the "
"clock on the whole clock domain without having to  manually implement that "
"on each synchronous element."
msgstr "可选的 ``enable`` 使能信号。该信号的目标是禁用整个时钟域上的时钟，而无需在每"
"个同步元件上手动实现。"

#: ../../SpinalHDL/miscelenea/core/core_components.rst:52
msgid ""
"An applied example to define a specific clock domain within the design is as"
" follows:"
msgstr "在设计中定义具有指定属性时钟域的示例如下："

#: ../../SpinalHDL/miscelenea/core/core_components.rst:70
msgid "Clock configuration"
msgstr "时钟配置"

#: ../../SpinalHDL/miscelenea/core/core_components.rst:72
msgid ""
"In addition to the constructor parameters given :ref:`here "
"<core_componets_clock_constructor>` , the following elements of each clock "
"domain are configurable via a ``ClockDomainConfig`` class :"
msgstr ""
"除了 :ref:`此处 <core_componets_clock_constructor>` 给出的构造函数参数之外，"
"每个时钟域的以下元素都可以通过 ``ClockDomainConfig`` 类进行配置："

#: ../../SpinalHDL/miscelenea/core/core_components.rst:78
msgid "Property"
msgstr "属性"

#: ../../SpinalHDL/miscelenea/core/core_components.rst:79
msgid "Valid values"
msgstr "有效值"

#: ../../SpinalHDL/miscelenea/core/core_components.rst:80
msgid "``clockEdge``"
msgstr "``clockEdge``"

#: ../../SpinalHDL/miscelenea/core/core_components.rst:81
msgid "``RISING``\\ , ``FALLING``"
msgstr "``RISING``\\ , ``FALLING``"

#: ../../SpinalHDL/miscelenea/core/core_components.rst:82
msgid "``ResetKind``"
msgstr "``ResetKind``"

#: ../../SpinalHDL/miscelenea/core/core_components.rst:83
msgid "``ASYNC``\\ , ``SYNC``"
msgstr "``ASYNC``\\ , ``SYNC``"

#: ../../SpinalHDL/miscelenea/core/core_components.rst:84
msgid "``resetActiveHigh``"
msgstr "``resetActiveHigh``"

#: ../../SpinalHDL/miscelenea/core/core_components.rst:85
#: ../../SpinalHDL/miscelenea/core/core_components.rst:87
msgid "``true``\\ , ``false``"
msgstr "``true``\\ , ``false``"

#: ../../SpinalHDL/miscelenea/core/core_components.rst:86
msgid "``clockEnableActiveHigh``"
msgstr "``clockEnableActiveHigh``"

#: ../../SpinalHDL/miscelenea/core/core_components.rst:112
msgid ""
"By default, a ClockDomain is applied to the whole design. The configuration "
"of this one is :"
msgstr "默认情况下，时钟域应用于整个设计。缺省的配置是："

#: ../../SpinalHDL/miscelenea/core/core_components.rst:115
msgid "clock : rising edge"
msgstr "clock ：上升沿触发"

#: ../../SpinalHDL/miscelenea/core/core_components.rst:116
msgid "reset: asynchronous, active high"
msgstr "reset：异步，高电平有效"

#: ../../SpinalHDL/miscelenea/core/core_components.rst:117
msgid "no enable signal"
msgstr "无使能信号"

#: ../../SpinalHDL/miscelenea/core/core_components.rst:120
msgid "External clock"
msgstr "外部时钟"

#: ../../SpinalHDL/miscelenea/core/core_components.rst:122
msgid ""
"You can define everywhere a clock domain which is driven by the outside. It "
"will then automatically add clock and reset wire from the top level inputs "
"to all synchronous elements."
msgstr "您可以在任何地方定义由外部驱动的时钟域。然后，它会自动将时钟和复位线从顶层输"
"入添加到所有同步元件。"

#: ../../SpinalHDL/miscelenea/core/core_components.rst:140
msgid "Cross Clock Domain"
msgstr "跨时钟域设计"

#: ../../SpinalHDL/miscelenea/core/core_components.rst:142
msgid ""
"SpinalHDL checks at compile time that there is no unwanted/unspecified cross"
" clock domain signal reads. If you want to read a signal that is emitted by "
"another ``ClockDomain`` area, you should add the ``crossClockDomain`` tag to"
" the destination signal as depicted in the following example:"
msgstr ""
"SpinalHDL 在编译时检查是否存在不需要的/未指定的跨时钟域信号访问。"
"如果您想读取另一个 ``ClockDomain`` （时钟域）发出的信号，则应给目标信号增加 "
"``crossClockDomain`` 标记，如下例所示："

#: ../../SpinalHDL/miscelenea/core/core_components.rst:162
msgid "There are multiple assignment operator :"
msgstr "有多种赋值运算符："

#: ../../SpinalHDL/miscelenea/core/core_components.rst:168
msgid "Symbole"
msgstr "符号"

#: ../../SpinalHDL/miscelenea/core/core_components.rst:169
#: ../../SpinalHDL/miscelenea/core/core_components.rst:204
#: ../../SpinalHDL/miscelenea/core/core_components.rst:307
#: ../../SpinalHDL/miscelenea/core/core_components.rst:488
msgid "Description"
msgstr "描述"

#: ../../SpinalHDL/miscelenea/core/core_components.rst:170
msgid ":="
msgstr ":="

#: ../../SpinalHDL/miscelenea/core/core_components.rst
msgid "Standard assignment, equivalent to '<=' in VHDL/Verilog"
msgstr "标准赋值，相当于 VHDL/Verilog 中的“<=”"

#: ../../SpinalHDL/miscelenea/core/core_components.rst
msgid "last assignment win, value updated at next delta cycle"
msgstr "最后一次分配获胜，值在下一个delta周期更新"

#: ../../SpinalHDL/miscelenea/core/core_components.rst:173
msgid "/="
msgstr "/="

#: ../../SpinalHDL/miscelenea/core/core_components.rst
msgid "Equivalent to := in VHDL and = in Verilog"
msgstr "相当于 VHDL 中的 := 和 Verilog 中的 =（不常用）"

#: ../../SpinalHDL/miscelenea/core/core_components.rst
msgid "value updated instantly"
msgstr "值立即更新"

#: ../../SpinalHDL/miscelenea/core/core_components.rst:176
msgid "<>"
msgstr "<>"

#: ../../SpinalHDL/miscelenea/core/core_components.rst
msgid ""
"Automatic connection between 2 signals. Direction is inferred by using "
"signal direction (in/out)"
msgstr "2 个信号之间的自动连接。通过输入/输出设置推断信号方向"

#: ../../SpinalHDL/miscelenea/core/core_components.rst
msgid "Similar behavioural than :="
msgstr "与 := 类似的行为"

#: ../../SpinalHDL/miscelenea/core/core_components.rst:197
msgid ""
"SpinalHDL check that bitcount of left and right assignment side match. There"
" is multiple ways to adapt bitcount of BitVector (Bits, UInt, SInt) :"
msgstr "SpinalHDL 检查左右分配端的位数是否匹配。有多种方法可以改变 BitVector "
"（Bits、UInt、SInt）的位数："

#: ../../SpinalHDL/miscelenea/core/core_components.rst:203
msgid "Resizing ways"
msgstr "改变位宽的方式"

#: ../../SpinalHDL/miscelenea/core/core_components.rst:205
msgid "x := y.resized"
msgstr "x := y.resized"

#: ../../SpinalHDL/miscelenea/core/core_components.rst:206
msgid ""
"Assign x wit a resized copy of y, resize value is automatically inferred to "
"match x"
msgstr "将 y 改变位宽后的副本赋值给 x，自动推断位宽以匹配 x"

#: ../../SpinalHDL/miscelenea/core/core_components.rst:207
msgid "x := y.resize(newWidth)"
msgstr "x := y.resize(newWidth)"

#: ../../SpinalHDL/miscelenea/core/core_components.rst:208
msgid "Assign x with a resized copy of y, size is manually calculated"
msgstr "将 y 改变位宽后的副本分配给 x，大小是手动计算的"

#: ../../SpinalHDL/miscelenea/core/core_components.rst:211
msgid "There are 2 cases where spinal automaticly resize things :"
msgstr "有两种情况会导致spinal自动调整位宽："

#: ../../SpinalHDL/miscelenea/core/core_components.rst:217
msgid "Assignement"
msgstr "赋值"

#: ../../SpinalHDL/miscelenea/core/core_components.rst:218
msgid "Problem"
msgstr "问题"

#: ../../SpinalHDL/miscelenea/core/core_components.rst:219
msgid "SpinalHDL action"
msgstr "SpinalHDL行为"

#: ../../SpinalHDL/miscelenea/core/core_components.rst:220
msgid "myUIntOf_8bit := U(3)"
msgstr "myUIntOf_8bit := U(3)"

#: ../../SpinalHDL/miscelenea/core/core_components.rst:221
msgid "U(3) create an UInt of 2 bits, which don't match with left side"
msgstr "U(3) 创建一个 2 位的 UInt，与左侧不匹配"

#: ../../SpinalHDL/miscelenea/core/core_components.rst:222
msgid ""
"Because  U(3) is a \"weak\" bit inferred signal, SpinalHDL resize it "
"automatically"
msgstr "由于 U(3) 是“弱”位推断信号，SpinalHDL 自动调整其位宽"

#: ../../SpinalHDL/miscelenea/core/core_components.rst:223
msgid "myUIntOf_8bit := U(2 -> False default -> true)"
msgstr "myUIntOf_8bit := U(2 -> False default -> true)"

#: ../../SpinalHDL/miscelenea/core/core_components.rst:224
msgid ""
"The right part infer a 3 bit UInt, which doesn't match with the left part"
msgstr "右侧部分推断出 3 位 UInt，与左侧部分不匹配"

#: ../../SpinalHDL/miscelenea/core/core_components.rst:225
msgid "SpinalHDL reapply the default value to bit that are missing"
msgstr "SpinalHDL 将默认值重新应用于丢失的位"

#: ../../SpinalHDL/miscelenea/core/core_components.rst:231
msgid ""
"As VHDL and Verilog, wire and register can be conditionally assigned by "
"using when and switch syntaxes"
msgstr "与 VHDL 和 Verilog 一样，信号线和寄存器可以通过使用 when 和 switch "
"语法进行条件赋值"

#: ../../SpinalHDL/miscelenea/core/core_components.rst:255
msgid ""
"You can also define new signals into a when/switch statement. It's useful if"
" you want to calculate an intermediate value."
msgstr "您还可以在when/switch 语句中定义新信号。如果您想计算中间值时，它很有用。"

#: ../../SpinalHDL/miscelenea/core/core_components.rst:272
msgid "Component/Hierarchy"
msgstr "组件/层次结构"

#: ../../SpinalHDL/miscelenea/core/core_components.rst:274
msgid ""
"Like in VHDL and Verilog, you can define components that could be used to "
"build a design hierarchy.  But unlike them, you don't need to bind them at "
"instantiation."
msgstr "与 VHDL 和 Verilog 一样，您可以定义可用于构建设计层次结构的组件。但与它们不同"
"的是，您不需要在实例化时绑定它们。"

#: ../../SpinalHDL/miscelenea/core/core_components.rst:300
msgid "Syntax to define in/out is the following :"
msgstr "定义输入/输出的语法如下："

#: ../../SpinalHDL/miscelenea/core/core_components.rst:306
#: ../../SpinalHDL/miscelenea/core/core_components.rst:487
msgid "Syntax"
msgstr "语法"

#: ../../SpinalHDL/miscelenea/core/core_components.rst:308
#: ../../SpinalHDL/miscelenea/core/core_components.rst:489
msgid "Return"
msgstr "返回类型"

#: ../../SpinalHDL/miscelenea/core/core_components.rst:309
msgid "in/out(x : Data)"
msgstr "in/out(x : Data)"

#: ../../SpinalHDL/miscelenea/core/core_components.rst:310
msgid "Set x an input/output"
msgstr "设置 x 为输入/输出"

#: ../../SpinalHDL/miscelenea/core/core_components.rst:311
msgid "x"
msgstr "x"

#: ../../SpinalHDL/miscelenea/core/core_components.rst:312
msgid "in/out Bool()"
msgstr "in/out Bool()"

#: ../../SpinalHDL/miscelenea/core/core_components.rst:313
msgid "Create an input/output Bool"
msgstr "创建输入/输出Bool值"

#: ../../SpinalHDL/miscelenea/core/core_components.rst:314
msgid "Bool"
msgstr "Bool"

#: ../../SpinalHDL/miscelenea/core/core_components.rst:315
msgid "in/out Bits/UInt/SInt(x bits)"
msgstr "in/out Bits/UInt/SInt(x bits)"

#: ../../SpinalHDL/miscelenea/core/core_components.rst:316
msgid "Create an input/output of the corresponding type"
msgstr "创建相应类型的输入/输出端口"

#: ../../SpinalHDL/miscelenea/core/core_components.rst:317
msgid "T"
msgstr "T"

#: ../../SpinalHDL/miscelenea/core/core_components.rst:320
msgid "There is some rules about component interconnection :"
msgstr "组件互连有一些规则："

#: ../../SpinalHDL/miscelenea/core/core_components.rst:323
msgid "Components can only read outputs/inputs signals of children components"
msgstr "组件只能读取子组件的输出/输入信号值"

#: ../../SpinalHDL/miscelenea/core/core_components.rst:324
msgid "Components can read outputs/inputs ports values"
msgstr "组件可以读取输出/输入端口值"

#: ../../SpinalHDL/miscelenea/core/core_components.rst:325
msgid ""
"If for some reason, you need to read a signals from far away in the "
"hierarchy (debug, temporal patch) you can do it by using the value returned "
"by some.where.else.theSignal.pull()."
msgstr ""
"如果由于某种原因，您需要从层次结构中的远处读取信号时（调试、临时补丁），"
"您可以使用 some.where.else.theSignal.pull() 返回的值来实现。"

#: ../../SpinalHDL/miscelenea/core/core_components.rst:330
msgid ""
"Sometime, creating a component to define some logic is overkill and to much "
"verbose. For this kind of cases you can use Area :"
msgstr "有时，创建一个组件来定义某些逻辑是多余的并且过于冗长。对于这种情况，"
"您可以使用 Area 逻辑区 ："

#: ../../SpinalHDL/miscelenea/core/core_components.rst:360
msgid "Function"
msgstr "函数"

#: ../../SpinalHDL/miscelenea/core/core_components.rst:362
msgid ""
"The ways you can use Scala functions to generate hardware are radically "
"different than VHDL/Verilog for many reasons:"
msgstr "使用 Scala 函数生成硬件的方式与 VHDL/Verilog 完全不同，原因有很多："

#: ../../SpinalHDL/miscelenea/core/core_components.rst:365
msgid ""
"You can instantiate register, combinatorial logic and component inside them."
msgstr "您可以在其中实例化寄存器、组合逻辑和组件。"

#: ../../SpinalHDL/miscelenea/core/core_components.rst:366
msgid ""
"You don't have to play with ``process``\\ /\\ ``@always`` that limit the "
"scope of assignment of signals"
msgstr "您不必使用限制信号分配范围的 ``process``\\ /\\ ``@always``"

#: ../../SpinalHDL/miscelenea/core/core_components.rst
msgid "Everything work by reference, which allow many manipulation."
msgstr "一切都按参考工作，这允许许多操作。"

#: ../../SpinalHDL/miscelenea/core/core_components.rst
msgid ""
"For example you can give to a function an bus as argument, then the function"
" can internaly read/write it."
msgstr "例如，您可以为函数提供总线作为参数，然后可以在该函数内部读取/写入它。"

#: ../../SpinalHDL/miscelenea/core/core_components.rst
msgid ""
"You can also return a Component, a Bus, are anything else from scala the "
"scala world."
msgstr "您还可以返回一个组件、总线以及 scala 世界中的任何其他内容。"

#: ../../SpinalHDL/miscelenea/core/core_components.rst:372
msgid "RGB to gray"
msgstr "RGB信号转灰度信号"

#: ../../SpinalHDL/miscelenea/core/core_components.rst:374
msgid ""
"For example if you want to convert a Red/Green/Blue color into a gray one by"
" using coefficient, you can use functions to apply them :"
msgstr "例如，如果您想使用系数将红/绿/蓝颜色转换为灰色，您可以使用函数来应用它们："

#: ../../SpinalHDL/miscelenea/core/core_components.rst:390
msgid "Valid Ready Payload bus"
msgstr "Valid Ready Payload 总线"

#: ../../SpinalHDL/miscelenea/core/core_components.rst:392
msgid ""
"For instance if you define a simple Valid Ready Payload bus, you can then "
"define useful function inside it."
msgstr "例如，如果您定义一个简单的 Valid Ready Payload "
"总线，则可以在其中定义有用的函数。"

#: ../../SpinalHDL/miscelenea/core/core_components.rst:417
msgid "VHDL generation"
msgstr "VHDL生成"

#: ../../SpinalHDL/miscelenea/core/core_components.rst:419
msgid ""
"There is a small component and a ``main`` that generate the corresponding "
"VHDL."
msgstr "有一个小组件和一个生成相应 VHDL 的 ``main`` 。"

#: ../../SpinalHDL/miscelenea/core/core_components.rst:448
msgid "Instantiate VHDL and Verilog IP"
msgstr "实例化 VHDL 和 Verilog IP"

#: ../../SpinalHDL/miscelenea/core/core_components.rst:450
msgid ""
"In some cases, it could be useful to instantiate a VHDL or a Verilog "
"component into a SpinalHDL design. To do that, you need to define BlackBox "
"which is like a Component, but its internal implementation should be "
"provided by a separate VHDL/Verilog file to the simulator/synthesis tool."
msgstr ""
"在某些情况下，将 VHDL 或 Verilog 组件实例化到 SpinalHDL "
"设计中可能会很有用。为此，您需要定义 BlackBox，它就像一个组件，"
"但其内部实现应由单独的 VHDL/Verilog 文件提供给仿真/综合工具。"

#: ../../SpinalHDL/miscelenea/core/core_components.rst:479
msgid "Utils"
msgstr "实用工具"

#: ../../SpinalHDL/miscelenea/core/core_components.rst:481
msgid "The SpinalHDL core contain some utils :"
msgstr "SpinalHDL 核心包含一些实用工具："

#: ../../SpinalHDL/miscelenea/core/core_components.rst:490
msgid "log2Up(x : BigInt)"
msgstr "log2Up(x : BigInt)"

#: ../../SpinalHDL/miscelenea/core/core_components.rst:491
msgid "Return the number of bit needed to represent x states"
msgstr "返回表示 x 状态所需的位数"

#: ../../SpinalHDL/miscelenea/core/core_components.rst:492
msgid "Int"
msgstr "Int"

#: ../../SpinalHDL/miscelenea/core/core_components.rst:493
msgid "isPow2(x : BigInt)"
msgstr "isPow2(x : BigInt)"

#: ../../SpinalHDL/miscelenea/core/core_components.rst:494
msgid "Return true if x is a power of two"
msgstr "如果 x 是 2 的幂，则返回 true"

#: ../../SpinalHDL/miscelenea/core/core_components.rst:495
msgid "Boolean"
msgstr "Boolean"

#: ../../SpinalHDL/miscelenea/core/core_components.rst:498
msgid "Much more tool and utils are present in spinal.lib"
msgstr "Spindle.lib 中提供了更多工具和实用程序"

#~ msgid "Memory"
#~ msgstr "记忆"

#~ msgid "Mem(type : Data,size : Int)"
#~ msgstr "内存（类型：数据，大小：Int）"

#~ msgid "Create a RAM"
#~ msgstr "创建内存"

#~ msgid "Mem(type : Data,initialContent : Array[Data])"
#~ msgstr "Mem(类型：数据，初始内容：数组[数据])"

#~ msgid "Create a ROM"
#~ msgstr "创建一个ROM"

#~ msgid "mem(x)"
#~ msgstr "内存（x）"

#~ msgid "Asynchronous read"
#~ msgstr "异步读取"

#~ msgid "mem(x) := y"
#~ msgstr "内存(x) := y"

#~ msgid "Synchronous write"
#~ msgstr "同步写入"

#~ msgid "mem.readSync(address,enable)"
#~ msgstr "mem.readSync（地址，启用）"

#~ msgid "Synchronous read"
#~ msgstr "同步读取"
