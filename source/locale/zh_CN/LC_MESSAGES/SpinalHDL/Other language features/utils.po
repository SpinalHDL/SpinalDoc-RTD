msgid ""
msgstr ""
"Project-Id-Version: SpinalHDLReport-Msgid-Bugs-To:POT-Creation-Date:2023-12-"
"01 11:48+0800PO-Revision-Date:YEAR-MO-DA HO:MI+ZONELast-Translator:FULL NAME "
"<EMAIL@ADDRESS>Language:zh_CNLanguage-Team:zh_CN <LL@li.org>Plural-"
"Forms:nplurals=1; plural=0;MIME-Version:1.0Content-Type:text/plain; "
"charset=UTF-8\n"
"Report-Msgid-Bugs-To: EMAIL@ADDRESSPOT-Creation-Date:2023-12-02 00:23+0800PO-"
"Revision-Date:YEAR-MO-DA HO:MI+ZONELast-Translator:FULL NAME <EMAIL@ADDRESS"
">Language-Team:LANGUAGE <LL@li.org>MIME-Version:1.0Content-Type:text/plain; "
"charset=UTF-8\n"
"PO-Revision-Date: 2024-01-13 05:06+0000\n"
"Last-Translator: tsy0123 <675526215@qq.com>\n"
"Language-Team: Chinese (Simplified) <https://hosted.weblate.org/projects/"
"spinaldoc-rtd/spinalhdlother-language-featuresutils/zh_Hans/>\n"
"Language: zh_CN\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bitGenerated-By:Babel 2.13.1\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Weblate 5.4-dev\n"

#: ../../SpinalHDL/Other features/utils.rst:4 language
msgid "Utils"
msgstr "实用工具"

#: ../../SpinalHDL/Other features/utils.rst:7 language
msgid "General"
msgstr "介绍"

#: ../../SpinalHDL/Other features/utils.rst:9 language
msgid ""
"Many tools and utilities are present in :ref:`spinal.lib <lib_introduction>`"
" but some are already present in the SpinalHDL Core."
msgstr ""
"许多工具和实用程序都存在于 :ref:`spinal.lib <lib_introduction>` 中，"
"但有些工具和实用程序已经存在于 SpinalHDL Core 中。"

#: ../../SpinalHDL/Other features/utils.rst:15 language
msgid "Syntax"
msgstr "语法"

#: ../../SpinalHDL/Other features/utils.rst:16 language
msgid "Return"
msgstr "返回类型"

#: ../../SpinalHDL/Other features/utils.rst:17 language
msgid "Description"
msgstr "描述"

#: ../../SpinalHDL/Other features/utils.rst:18 language
msgid "``widthOf(x : BitVector)``"
msgstr "``widthOf(x : BitVector)``"

#: ../../SpinalHDL/Other features/utils.rst:19 features/utils.rst:22 language
msgid "Int"
msgstr "Int"

#: ../../SpinalHDL/Other features/utils.rst:20 language
msgid "Return the width of a Bits/UInt/SInt signal"
msgstr "返回 Bits/UInt/SInt 信号的位宽"

#: ../../SpinalHDL/Other features/utils.rst:21 language
msgid "``log2Up(x : BigInt)``"
msgstr "``log2Up(x : BigInt)``"

#: ../../SpinalHDL/Other features/utils.rst:23 language
msgid "Return the number of bits needed to represent ``x`` states"
msgstr "返回表示 ``x`` 状态所需的位数"

#: ../../SpinalHDL/Other features/utils.rst:24 language
msgid "``isPow2(x : BigInt)``"
msgstr "``isPow2(x：BigInt)``"

#: ../../SpinalHDL/Other features/utils.rst:25 language
msgid "Boolean"
msgstr "Boolean"

#: ../../SpinalHDL/Other features/utils.rst:26 language
msgid "Return true if ``x`` is a power of two"
msgstr "如果 ``x`` 是 2 的幂，则返回 true"

#: ../../SpinalHDL/Other features/utils.rst:27 language
msgid "``roundUp(that : BigInt, by : BigInt)``"
msgstr "``roundUp(that : BigInt, by : BigInt)``"

#: ../../SpinalHDL/Other features/utils.rst:28 language
msgid "BigInt"
msgstr "BigInt"

#: ../../SpinalHDL/Other features/utils.rst:29 language
msgid "Return the first ``by`` multiply from ``that`` (included)"
msgstr "返回第一个 ``by`` 乘以 ``that``（包含） 的值"

#: ../../SpinalHDL/Other features/utils.rst:30 language
msgid "``Cat(x: Data*)``"
msgstr "``Cat(x: Data*)``"

#: ../../SpinalHDL/Other features/utils.rst:31 features/utils.rst:34 language
msgid "Bits"
msgstr "位"

#: ../../SpinalHDL/Other features/utils.rst:32 language
msgid "Concatenate all arguments, from MSB to LSB, see `Cat`_"
msgstr "连接所有参数，从 MSB 到 LSB，请参阅 `Cat`_"

#: ../../SpinalHDL/Other features/utils.rst:33 language
msgid "``Cat(x: Iterable[Data])``"
msgstr "``Cat(x: Iterable[Data])``"

#: ../../SpinalHDL/Other features/utils.rst:35 language
msgid "Conactenate arguments, from LSB to MSB, see `Cat`_"
msgstr "连接参数, 从 LSB 到 MSB, 参见 `Cat`_"

#: ../../SpinalHDL/Other features/utils.rst:40 language
msgid "Cat"
msgstr "Cat"

#: ../../SpinalHDL/Other features/utils.rst:42 language
msgid ""
"As listed above, there are two version of ``Cat``. Both versions concatenate"
" the signals they contain, with a subtle difference:"
msgstr "如上所述， ``Cat`` "
"有两个版本。两个版本都连接了它们包含的信号，但有细微的差别："

#: ../../SpinalHDL/Other features/utils.rst:44 language
msgid ""
"``Cat(x: Data*)`` takes an arbitrary number of hardware signals as "
"parameters. It mimics other HDLs and the leftmost parameter becomes the MSB "
"of the resulting ``Bits``, the rightmost the LSB side. Said differently: the"
" input is concatenated in the order as written."
msgstr ""
"``Cat(x: Data*)`` 使用任意数量的硬件信号作为参数。"
"它模拟了其他HDL且MSB变成了结果 ``Bits`` 最左端的参数，最右端是 LSB . "
"换种说法：输入按照参数顺序拼接."

#: ../../SpinalHDL/Other features/utils.rst:47 language
msgid ""
"``Cat(x: Iterable[Data])`` which takes a single Scala iterable collection "
"(Seq / Set / List / ...) containing hardware signals. This version places "
"the first element of the list into the LSB, and the last into the MSB."
msgstr ""
"``Cat(x: Iterable[Data])`` 接受包含硬件信号的单个 Scala 可迭代集合（Seq / "
"Set / List / ...）。此版本将列表的第一个元素放入 LSB，最后一个元素放入 MSB。"

#: ../../SpinalHDL/Other features/utils.rst:50 language
msgid ""
"This seeming difference comes mostly from the convention that ``Bits`` are "
"written from the hightest index to the lowest index, while Lists are written"
" down starting from index 0 to the highest index. ``Cat`` places index 0 of "
"both conventions at the LSB."
msgstr ""
"差异主要在于这样的约定： ``Bits`` 是从最高索引到最低索引写入的，"
"而列表是从索引 0 开始写入到最高索引的。 所有约定中，``Cat`` 将索引 0 放置在 "
"LSB 处。"

#: ../../SpinalHDL/Other features/utils.rst:65 language
msgid "Cloning hardware datatypes"
msgstr "克隆硬件数据类型"

#: ../../SpinalHDL/Other features/utils.rst:67 language
msgid ""
"You can clone a given hardware data type by using the ``cloneOf(x)`` "
"function. It will return a new instance of the same Scala type and "
"parameters."
msgstr "您可以使用 ``cloneOf(x)`` 函数克隆给定的硬件数据类型。它将返回相同 Scala "
"类型和参数的新实例。"

#: ../../SpinalHDL/Other features/utils.rst:70 language
msgid "For example:"
msgstr "例如："

#: ../../SpinalHDL/Other features/utils.rst:84 language
msgid ""
"You can get more information about how hardware data types are managed on "
"the :ref:`Hardware types page <hardware_type>`."
msgstr "您可以在 :ref:`硬件类型页面 <hardware_type>` "
"上获取有关如何管理硬件数据类型的更多信息。"

#: ../../SpinalHDL/Other features/utils.rst:87 language
msgid ""
"If you use the ``cloneOf`` function on a ``Bundle``, this ``Bundle`` should "
"be a ``case class`` or should override the clone function internally."
msgstr ""
"如果你在 ``Bundle`` 上使用 ``cloneOf`` 函数，这个 ``Bundle`` 应该是一个 ``"
"case class`` ，否则应该在内部重写clone函数。"

#: ../../SpinalHDL/Other features/utils.rst:105 language
msgid "Passing a datatype as construction parameter"
msgstr "将数据类型作为构造函数参数传递"

#: ../../SpinalHDL/Other features/utils.rst:107 language
msgid ""
"Many pieces of reusable hardware need to be parameterized by some data type."
" For example if you want to define a FIFO or a shift register, you need a "
"parameter to specify which kind of payload you want for the component."
msgstr "许多可重用硬件需要通过数据类型进行参数化。例如，如果您想定义 FIFO "
"或移位寄存器，则需要一个参数来指定组件所需的有效负载类型。"

#: ../../SpinalHDL/Other features/utils.rst:110 language
msgid "There are two similar ways to do this."
msgstr "有两种类似的方法可以做到这一点。"

#: ../../SpinalHDL/Other features/utils.rst:113 language
msgid "The old way"
msgstr "老办法"

#: ../../SpinalHDL/Other features/utils.rst:115 language
msgid ""
"A good example of the old way to do this is in this definition of a "
"``ShiftRegister`` component:"
msgstr "老方法的一个很好的例子是 ``ShiftRegister`` 组件的定义："

#: ../../SpinalHDL/Other features/utils.rst:127 language
msgid "And here is how you can instantiate the component:"
msgstr "以下是实例化该组件的方法："

#: ../../SpinalHDL/Other features/utils.rst:133 language
msgid ""
"As you can see, the raw hardware type is directly passed as a construction "
"parameter. Then each time you want to create an new instance of that kind of"
" hardware data type, you need to use the ``cloneOf(...)`` function. Doing "
"things this way is not super safe as it's easy to forget to use ``cloneOf``."
msgstr ""
"如您所见，原始硬件类型直接作为构造参数传递。每次你想创建这种硬件数据类型的新"
"实例时，你需要使用 ``cloneOf(...)`` 函数。以这种方式做事并不是超级安全，"
"因为很容易忘记使用 ``cloneOf``。"

#: ../../SpinalHDL/Other features/utils.rst:138 language
msgid "The safe way"
msgstr "安全的方法"

#: ../../SpinalHDL/Other features/utils.rst:140 language
msgid ""
"An example of the safe way to pass a data type parameter is as follows:"
msgstr "安全的传递数据类型参数方法，示例如下："

#: ../../SpinalHDL/Other features/utils.rst:152 language
msgid ""
"And here is how you instantiate the component (exactly the same as before):"
msgstr "以下是实例化组件的方法（与之前完全相同）："

#: ../../SpinalHDL/Other features/utils.rst:158 language
msgid ""
"Notice how the example above uses a ``HardType`` wrapper around the raw data"
" type ``T``, which is a \"blueprint\" definition of a hardware data type. "
"This way of doing things is easier to use than the \"old way\", because to "
"create a new instance of the hardware data type you only need to call the "
"``apply`` function of that ``HardType`` (or in other words, just add "
"parentheses after the parameter)."
msgstr ""
"请注意，上述示例中使用了一个 ``HardType`` 包装器，它包装了原始数据类型 "
"``T``，这种做法比“旧方法”更容易使用。因为要创建硬件数据类型的新实例，"
"只需调用 ``HardType`` 的 ``apply`` 函数（或者换句话说，在类型名后添加括号）。"

#: ../../SpinalHDL/Other features/utils.rst:161 language
msgid ""
"Additionally, this mechanism is completely transparent from the point of "
"view of the user, as a hardware data type can be implicitly converted into a"
" ``HardType``."
msgstr "此外，从用户的角度来看，这种机制是完全透明的，因为硬件数据类型可以隐式转换为 "
"``HardType``。"

#: ../../SpinalHDL/Other features/utils.rst:164 language
msgid "Frequency and time"
msgstr "频率和时间"

#: ../../SpinalHDL/Other features/utils.rst:166 language
msgid "SpinalHDL has a dedicated syntax to define frequency and time values:"
msgstr "SpinalHDL 有专用语法来定义频率和时间值："

#: ../../SpinalHDL/Other features/utils.rst:177 language
msgid ""
"For time definitions you can use following postfixes to get a "
"``TimeNumber``:"
msgstr "对于时间定义，您可以使用以下后缀来获取 ``TimeNumber``："

#: ../../SpinalHDL/Other features/utils.rst:178 language
msgid "``fs``, ``ps``, ``ns``, ``us``, ``ms``, ``sec``, ``mn``, ``hr``"
msgstr "``fs``、``ps``、``ns``、``us``、``ms``、``sec``、``mn``、``hr``"

#: ../../SpinalHDL/Other features/utils.rst:180 language
msgid ""
"For time definitions you can use following postfixes to get a "
"``HertzNumber``:"
msgstr "对于时间定义，您可以使用以下后缀来获取 ``HertzNumber``："

#: ../../SpinalHDL/Other features/utils.rst:181 language
msgid "``Hz``, ``KHz``, ``MHz``, ``GHz``, ``THz``"
msgstr "``Hz``, ``KHz``, ``MHz``, ``GHz``, ``THz``"

#: ../../SpinalHDL/Other features/utils.rst:183 language
msgid ""
"``TimeNumber`` and ``HertzNumber`` are based on the ``PhysicalNumber`` class"
" which use  scala ``BigDecimal`` to store numbers."
msgstr ""
"``TimeNumber`` 和 ``HertzNumber`` 是基于 ``PhysicalNumber`` 类，它使用 scala "
"``BigDecimal`` 来存储数字。"

#: ../../SpinalHDL/Other features/utils.rst:186 language
msgid "Binary prefix"
msgstr "二进制前缀"

#: ../../SpinalHDL/Other features/utils.rst:188 language
msgid ""
"SpinalHDL allows the definition of integer numbers using binary prefix "
"notation according to IEC."
msgstr "SpinalHDL 允许根据 IEC 使用二进制前缀表示法定义整数。"

#: ../../SpinalHDL/Other features/utils.rst:195 language
msgid "The following binary prefix notations are available:"
msgstr "可以使用以下二进制前缀表示法："

#: ../../SpinalHDL/Other features/utils.rst:201 language
msgid "Binary Prefix"
msgstr "二进制前缀"

#: ../../SpinalHDL/Other features/utils.rst:202 language
msgid "Value"
msgstr "值"

#: ../../SpinalHDL/Other features/utils.rst:203 language
msgid "Byte, Bytes"
msgstr "Byte, Bytes"

#: ../../SpinalHDL/Other features/utils.rst:204 language
msgid "1"
msgstr "1"

#: ../../SpinalHDL/Other features/utils.rst:205 language
msgid "KiB"
msgstr "KiB"

#: ../../SpinalHDL/Other features/utils.rst:206 language
msgid "1024 == 1 << 10"
msgstr "1024 == 1 << 10"

#: ../../SpinalHDL/Other features/utils.rst:207 language
msgid "MiB"
msgstr "MiB"

#: ../../SpinalHDL/Other features/utils.rst:208 language
msgid "1024\\ :sup:`2` == 1 << 20"
msgstr "1024\\ :sup:`2` == 1 << 20"

#: ../../SpinalHDL/Other features/utils.rst:209 language
msgid "GiB"
msgstr "GiB"

#: ../../SpinalHDL/Other features/utils.rst:210 language
msgid "1024\\ :sup:`3` == 1 << 30"
msgstr "1024\\ :sup:`3` == 1 << 30"

#: ../../SpinalHDL/Other features/utils.rst:211 language
msgid "TiB"
msgstr "TiB"

#: ../../SpinalHDL/Other features/utils.rst:212 language
msgid "1024\\ :sup:`4` == 1 << 40"
msgstr "1024\\ :sup:`4` == 1 << 40"

#: ../../SpinalHDL/Other features/utils.rst:213 language
msgid "PiB"
msgstr "PiB"

#: ../../SpinalHDL/Other features/utils.rst:214 language
msgid "1024\\ :sup:`5` == 1 << 50"
msgstr "1024\\ :sup:`5` == 1 << 50"

#: ../../SpinalHDL/Other features/utils.rst:215 language
msgid "EiB"
msgstr "EiB"

#: ../../SpinalHDL/Other features/utils.rst:216 language
msgid "1024\\ :sup:`6` == 1 << 60"
msgstr "1024\\ :sup:`6` == 1 << 60"

#: ../../SpinalHDL/Other features/utils.rst:217 language
msgid "ZiB"
msgstr "ZiB"

#: ../../SpinalHDL/Other features/utils.rst:218 language
msgid "1024\\ :sup:`7` == 1 << 70"
msgstr "1024\\ :sup:`7` == 1 << 70"

#: ../../SpinalHDL/Other features/utils.rst:219 language
msgid "YiB"
msgstr "YiB"

#: ../../SpinalHDL/Other features/utils.rst:220 language
msgid "1024\\ :sup:`8` == 1 << 80"
msgstr "1024\\ :sup:`8` == 1 << 80"

#: ../../SpinalHDL/Other features/utils.rst:223 language
msgid ""
"Of course, BigInt can also be printed as a string in bytes unit. "
"``BigInt(1024).byteUnit``."
msgstr "当然，BigInt 可以以字节为单位进行打印。例如，``BigInt(1024).byteUnit``."
