msgid ""
msgstr ""
"Project-Id-Version: SpinalHDLReport-Msgid-Bugs-To:POT-Creation-Date:2023-12-"
"01 11:48+0800PO-Revision-Date:YEAR-MO-DA HO:MI+ZONELast-Translator:FULL NAME "
"<EMAIL@ADDRESS>Language:zh_CNLanguage-Team:zh_CN <LL@li.org>Plural-"
"Forms:nplurals=1; plural=0;MIME-Version:1.0Content-Type:text/plain; "
"charset=UTF-8\n"
"PO-Revision-Date: 2023-12-15 15:56+0000\n"
"Last-Translator: Readon <xydarcher@qq.com>\n"
"Language-Team: Chinese (Simplified) <https://hosted.weblate.org/projects/"
"spinaldoc-rtd/spinalhdlgetting-startedhelp-for-vhdl-peoplevhdl_comp/zh_Hans/>"
"\n"
"Language: zh_CN\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bitGenerated-By:Babel 2.13.1\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Weblate 5.3\n"

#: ../../source/SpinalHDL/Getting Started/Help VHDL for people/vhdl_comp.rst:5
msgid "VHDL comparison"
msgstr "与VHDL对比"

#: ../../source/SpinalHDL/Getting Started/Help VHDL for people/vhdl_comp.rst:8
msgid "Introduction"
msgstr "简介"

#: ../../source/SpinalHDL/Getting Started/Help VHDL for
#: people/vhdl_comp.rst:10
msgid ""
"This page will show the main differences between VHDL and SpinalHDL. Things "
"will not be explained in depth."
msgstr "本页将讨论 VHDL 和 SpinalHDL 之间的主要区别。但不会深入解释。"

#: ../../source/SpinalHDL/Getting Started/Help VHDL for
#: people/vhdl_comp.rst:13
msgid "Process"
msgstr "过程（Process）"

#: ../../source/SpinalHDL/Getting Started/Help VHDL for
#: people/vhdl_comp.rst:15
msgid ""
"Processes are often needed when you write RTL, however, their semantics can "
"be clunky to work with. Due to how they work in VHDL, they can force you to "
"split your code and duplicate things."
msgstr "通常编写 RTL 时需要用到过程，但是它们的语义使用起来可能很笨拙。由于它们在 "
"VHDL 中的工作方式，可能会迫使您拆分代码并重复编写。"

#: ../../source/SpinalHDL/Getting Started/Help VHDL for
#: people/vhdl_comp.rst:17
msgid "To produce the following RTL:"
msgstr "要生成以下 RTL："

#: ../../source/SpinalHDL/Getting Started/Help VHDL for
#: people/vhdl_comp.rst:21
msgid "You will have to write the following VHDL:"
msgstr "您必须编写以下 VHDL："

#: ../../source/SpinalHDL/Getting Started/Help VHDL for
#: people/vhdl_comp.rst:57
msgid "While in SpinalHDL, it's:"
msgstr "在 SpinalHDL 中，它是："

#: ../../source/SpinalHDL/Getting Started/Help VHDL for
#: people/vhdl_comp.rst:73
msgid "Implicit vs explicit definitions"
msgstr "隐式与显式定义对比"

#: ../../source/SpinalHDL/Getting Started/Help VHDL for
#: people/vhdl_comp.rst:75
msgid ""
"In VHDL, when you declare a signal, you don't specify if it is a "
"combinatorial signal or a register. Where and how you assign to it decides "
"whether it is combinatorial or registered."
msgstr "在 VHDL 中，当声明一个信号时，您无需指定它是组合信号还是寄存器。给它赋值的位"
"置和方式决定了它是组合电路还是寄存器。"

#: ../../source/SpinalHDL/Getting Started/Help VHDL for
#: people/vhdl_comp.rst:77
msgid ""
"In SpinalHDL these kinds of things are explicit. Registers are defined as "
"registers directly in their declaration."
msgstr "在 SpinalHDL 中，这些事情是明确的。寄存器直接在其声明中就定义为寄存器。"

#: ../../source/SpinalHDL/Getting Started/Help VHDL for
#: people/vhdl_comp.rst:80
msgid "Clock domains"
msgstr "时钟域"

#: ../../source/SpinalHDL/Getting Started/Help VHDL for
#: people/vhdl_comp.rst:82
msgid ""
"In VHDL, every time you want to define a bunch of registers, you need the "
"carry the clock and the reset wire to them. In addition, you have to "
"hardcode everywhere how those clock and reset signals should be used (clock "
"edge, reset polarity, reset nature (async, sync))."
msgstr ""
"在 VHDL 中，每次想要定义一堆寄存器时，都需要将时钟和复位信号传递给它们。此外"
"，您必须在各处硬编码如何使用这些时钟和复位信号（包括它们的属性时钟沿、复位极"
"性、复位性质（异步、同步））。"

#: ../../source/SpinalHDL/Getting Started/Help VHDL for
#: people/vhdl_comp.rst:84
msgid ""
"In SpinalHDL you can define a ``ClockDomain``, and then define the area of "
"your hardware that uses it."
msgstr "在 SpinalHDL 中，您可以定义 ``ClockDomain``，然后定义使用它的硬件区域。"

#: ../../source/SpinalHDL/Getting Started/Help VHDL for
#: people/vhdl_comp.rst:86
msgid "For example:"
msgstr "例如："

#: ../../source/SpinalHDL/Getting Started/Help VHDL for
#: people/vhdl_comp.rst:107
msgid "Component's internal organization"
msgstr "组件的内部组织方式"

#: ../../source/SpinalHDL/Getting Started/Help VHDL for
#: people/vhdl_comp.rst:109
msgid ""
"In VHDL, there is a ``block`` feature that allows you to define sub-areas of"
" logic inside your component. However, almost no one uses this feature, "
"because most people don't know about them, and also because all signals "
"defined inside these regions are not readable from the outside."
msgstr ""
"在 VHDL 中，有一个 ``block`` 功能，允许您在组件内定义逻辑子区域。然而，几乎没"
"有人使用这一功能，因为大多数人不了解它们，也因为这些区域内定义的所有信号都无"
"法从外部读取、使用。"

#: ../../source/SpinalHDL/Getting Started/Help VHDL for
#: people/vhdl_comp.rst:111
msgid ""
"In SpinalHDL you have an ``Area`` feature that does this concept much more "
"nicely:"
msgstr "在 SpinalHDL 中，你有一个 ``Area`` 功能，可以更好地实现这个概念："

#: ../../source/SpinalHDL/Getting Started/Help VHDL for
#: people/vhdl_comp.rst:131
msgid ""
"Variables and signals defined inside of an ``Area`` are accessible elsewhere"
" in the component, including in other ``Area`` regions."
msgstr "在 ``Area`` 内部定义的变量和信号可以在组件的其他地方访问，包括其他 ``Area`` "
"区域内。"

#: ../../source/SpinalHDL/Getting Started/Help VHDL for
#: people/vhdl_comp.rst:134
msgid "Safety"
msgstr "安全性"

#: ../../source/SpinalHDL/Getting Started/Help VHDL for
#: people/vhdl_comp.rst:136
msgid ""
"In VHDL as in SpinalHDL, it's easy to write combinatorial loops, or to infer"
" a latch by forgetting to drive a signal in the path of a process."
msgstr "在 VHDL 中，就像在 SpinalHDL 中一样，很容易编写出组合逻辑环，或者因为忘记给路"
"径中的信号驱动而得到一个锁存器（latch）。"

#: ../../source/SpinalHDL/Getting Started/Help VHDL for
#: people/vhdl_comp.rst:138
msgid ""
"Then, to detect those issues, you can use some ``lint`` tools that will "
"analyze your VHDL, but those tools aren't free. In SpinalHDL the ``lint`` "
"process in integrated inside the compiler, and it won't generate the RTL "
"code until everything is fine. It also checks clock domain crossing."
msgstr ""
"然后，为了检测这些问题，您可以使用一些 ``lint`` 工具来分析您的 "
"VHDL，但这些工具不是免费的。在 SpinalHDL 中， ``lint`` 过程集成在编译器内部，"
"并且在一切正常之前它不会生成 RTL 代码。此外，它还会检查跨时钟域信号。"

#: ../../source/SpinalHDL/Getting Started/Help VHDL for
#: people/vhdl_comp.rst:141
msgid "Functions and procedures"
msgstr "功能与流程"

#: ../../source/SpinalHDL/Getting Started/Help VHDL for
#: people/vhdl_comp.rst:143
msgid ""
"Functions and procedures are not used very often in VHDL, probably because "
"they are very limited:"
msgstr "函数和过程在 VHDL 中不经常使用，可能是因为它们的功能非常有限："

#: ../../source/SpinalHDL/Getting Started/Help VHDL for
#: people/vhdl_comp.rst:145
msgid ""
"You can only define a chunk of combinational hardware, or only a chunk of "
"registers (if you call the function/procedure inside a clocked process)."
msgstr "您只能定义一块组合逻辑硬件，或者只能定义一块寄存器（如果您在时钟进程内调用函"
"数/过程）。"

#: ../../source/SpinalHDL/Getting Started/Help VHDL for
#: people/vhdl_comp.rst:146
msgid "You can't define a process inside them."
msgstr "您无法在其中定义流程。"

#: ../../source/SpinalHDL/Getting Started/Help VHDL for
#: people/vhdl_comp.rst:147
msgid "You can't instantiate a component inside them."
msgstr "您无法在其中实例化组件。"

#: ../../source/SpinalHDL/Getting Started/Help VHDL for
#: people/vhdl_comp.rst:148
msgid "The scope of what you can read/write inside them is limited."
msgstr "在这里面，您可以读/写的范围是有限的。"

#: ../../source/SpinalHDL/Getting Started/Help VHDL for
#: people/vhdl_comp.rst:150
msgid "In SpinalHDL, all those limitations are removed."
msgstr "在 SpinalHDL 中，所有这些限制都被消除了。"

#: ../../source/SpinalHDL/Getting Started/Help VHDL for
#: people/vhdl_comp.rst:152
msgid ""
"An example that mixes combinational logic and a register in a single "
"function:"
msgstr "在单个函数中混合使用组合逻辑和寄存器的示例："

#: ../../source/SpinalHDL/Getting Started/Help VHDL for
#: people/vhdl_comp.rst:168
msgid ""
"An example with the queue function inside the Stream Bundle (handshake). "
"This function instantiates a FIFO component:"
msgstr "Stream线束内的队列函数示例（带握手）。该函数实例化一个 FIFO 组件："

#: ../../source/SpinalHDL/Getting Started/Help VHDL for
#: people/vhdl_comp.rst:184
msgid ""
"An example where a function assigns a signal defined outside of itself:"
msgstr "为在外部定义的信号赋值的示例函数："

#: ../../source/SpinalHDL/Getting Started/Help VHDL for
#: people/vhdl_comp.rst:200
msgid "Buses and Interfaces"
msgstr "总线和接口"

#: ../../source/SpinalHDL/Getting Started/Help VHDL for
#: people/vhdl_comp.rst:202
msgid ""
"VHDL is very boring when it comes to buses and interfaces. You have two "
"options:"
msgstr "当谈到总线和接口时，VHDL 非常无聊。您有两个选择："

#: ../../source/SpinalHDL/Getting Started/Help VHDL for
#: people/vhdl_comp.rst:204
msgid "Define buses and interfaces wire-by-wire, each time and everywhere:"
msgstr "随时随地逐线定义总线和接口："

#: ../../source/SpinalHDL/Getting Started/Help VHDL for
#: people/vhdl_comp.rst:216
msgid ""
"Use records but lose parameterization (statically fixed in the package), and"
" you have to define one for each directions:"
msgstr "使用记录但无法参数化（静态固定在包中），并且您必须为每个信号定义方向："

#: ../../source/SpinalHDL/Getting Started/Help VHDL for
#: people/vhdl_comp.rst:223
msgid ""
"SpinalHDL has very strong support for bus and interface declarations with "
"limitless parameterizations:"
msgstr "SpinalHDL 对参数化总线和接口的声明提供非常强大的支持："

#: ../../source/SpinalHDL/Getting Started/Help VHDL for
#: people/vhdl_comp.rst:229
msgid ""
"You can also use object oriented programming to define configuration "
"objects:"
msgstr "您还可以使用面向对象编程来定义专门的配置对象："

#: ../../source/SpinalHDL/Getting Started/Help VHDL for
#: people/vhdl_comp.rst:273
msgid "Signal declaration"
msgstr "信号声明"

#: ../../source/SpinalHDL/Getting Started/Help VHDL for
#: people/vhdl_comp.rst:275
msgid ""
"VHDL forces you to define all signals at the top of your architecture "
"description, which is annoying."
msgstr "VHDL 强制您在架构描述的顶部定义所有信号，这很烦人。"

#: ../../source/SpinalHDL/Getting Started/Help VHDL for
#: people/vhdl_comp.rst:295
msgid "SpinalHDL is flexible when it comes to signal declarations."
msgstr "SpinalHDL 在信号声明方面非常灵活。"

#: ../../source/SpinalHDL/Getting Started/Help VHDL for
#: people/vhdl_comp.rst:302
msgid "It also allows you to define and assign signals in a single line."
msgstr "它还允许您在一行中定义和赋值信号。"

#: ../../source/SpinalHDL/Getting Started/Help VHDL for
#: people/vhdl_comp.rst:309
msgid "Component instantiation"
msgstr "组件实例化"

#: ../../source/SpinalHDL/Getting Started/Help VHDL for
#: people/vhdl_comp.rst:311
msgid ""
"VHDL is very verbose about this, as you have to redefine all signals of your"
" sub-component entity, and then bind them one-by-one when you instantiate "
"your component."
msgstr "VHDL 对此非常冗长，因为您必须重新定义子组件实体的所有信号，然后在实例化组件时"
"将它们一一绑定。"

#: ../../source/SpinalHDL/Getting Started/Help VHDL for
#: people/vhdl_comp.rst:338
msgid ""
"SpinalHDL removes that, and allows you to access the IO of sub-components in"
" an object-oriented way."
msgstr "SpinalHDL 在这方面做出了很大提升，并允许您以面向对象的方式访问子组件的 IO。"

#: ../../source/SpinalHDL/Getting Started/Help VHDL for
#: people/vhdl_comp.rst:349
msgid "Casting"
msgstr "类型转换"

#: ../../source/SpinalHDL/Getting Started/Help VHDL for
#: people/vhdl_comp.rst:351
msgid "There are two annoying casting methods in VHDL:"
msgstr "VHDL 中有两种烦人的转换方法："

#: ../../source/SpinalHDL/Getting Started/Help VHDL for
#: people/vhdl_comp.rst:353
msgid ""
"boolean <> std_logic (ex: To assign a signal using a condition such as "
"``mySignal <= myValue < 10`` is not legal)"
msgstr "boolean <> std_logic （例如：使用 ``mySignal <= myValue < 10`` "
"等条件赋值信号是不合法的）"

#: ../../source/SpinalHDL/Getting Started/Help VHDL for
#: people/vhdl_comp.rst:354
msgid "unsigned <> integer  (ex: To access an array)"
msgstr "unsigned <> integer（例如：访问数组）"

#: ../../source/SpinalHDL/Getting Started/Help VHDL for
#: people/vhdl_comp.rst:356
msgid "SpinalHDL removes these casts by unifying things."
msgstr "SpinalHDL 通过统一化对象来转换这些类型。"

#: ../../source/SpinalHDL/Getting Started/Help VHDL for
#: people/vhdl_comp.rst:358
msgid "boolean/std_logic:"
msgstr "boolean/std_logic:"

#: ../../source/SpinalHDL/Getting Started/Help VHDL for
#: people/vhdl_comp.rst:366
msgid "unsigned/integer:"
msgstr "unsigned/integer:"

#: ../../source/SpinalHDL/Getting Started/Help VHDL for
#: people/vhdl_comp.rst:375
msgid "Resizing"
msgstr "调整位宽"

#: ../../source/SpinalHDL/Getting Started/Help VHDL for
#: people/vhdl_comp.rst:377
msgid "The fact that VHDL is strict about bit size is probably a good thing."
msgstr "VHDL 对位宽限制严格可能是一件好事。"

#: ../../source/SpinalHDL/Getting Started/Help VHDL for
#: people/vhdl_comp.rst:383
msgid "In SpinalHDL you have two ways to do the same:"
msgstr "在 SpinalHDL 中，您有两种方法可以实现相同的目的："

#: ../../source/SpinalHDL/Getting Started/Help VHDL for
#: people/vhdl_comp.rst:394
msgid "Parameterization"
msgstr "参数化"

#: ../../source/SpinalHDL/Getting Started/Help VHDL for
#: people/vhdl_comp.rst:396
msgid ""
"VHDL prior to the 2008 revision has many issues with generics. For example, "
"you can't parameterize records, you can't parameterize arrays in the entity,"
" and you can't have type parameters."
msgstr "2008 年修订版之前的 VHDL 在泛型方面存在许多问题。例如，您不能参数化记录，不能"
"参数化实体中的数组，并且不能具有类型参数。"

#: ../../source/SpinalHDL/Getting Started/Help VHDL for
#: people/vhdl_comp.rst:397
msgid ""
"Then VHDL 2008 came and fixed those issues. But RTL tool support for VHDL "
"2008 is really weak depending on the vendor."
msgstr "然后 VHDL 2008 出现并解决了这些问题。但根据供应商的不同，RTL 工具对VHDL 2008 "
"的支持确实很弱。"

#: ../../source/SpinalHDL/Getting Started/Help VHDL for
#: people/vhdl_comp.rst:399
msgid ""
"SpinalHDL has full support for generics integrated natively in its compiler,"
" and it doesn't rely on VHDL generics."
msgstr "SpinalHDL 完全支持在其编译器中自然的集成泛型，并且它不依赖于 VHDL 泛型。"

#: ../../source/SpinalHDL/Getting Started/Help VHDL for
#: people/vhdl_comp.rst:401
msgid "Here is an example of parameterized data structures:"
msgstr "这是参数化数据结构的示例："

#: ../../source/SpinalHDL/Getting Started/Help VHDL for
#: people/vhdl_comp.rst:409
msgid "Here is an example of a parameterized component:"
msgstr "以下是参数化组件的示例："

#: ../../source/SpinalHDL/Getting Started/Help VHDL for
#: people/vhdl_comp.rst:422
msgid "Meta hardware description"
msgstr "元硬件描述"

#: ../../source/SpinalHDL/Getting Started/Help VHDL for
#: people/vhdl_comp.rst:424
msgid ""
"VHDL has kind of a closed syntax. You can't add abstraction layers on top of"
" it."
msgstr "VHDL 具有某种封闭的语法。您无法在其上添加抽象层。"

#: ../../source/SpinalHDL/Getting Started/Help VHDL for
#: people/vhdl_comp.rst:426
msgid ""
"SpinalHDL, because it's built on top of Scala, is very flexible, and allows "
"you to define new abstraction layers very easily."
msgstr "而SpinalHDL， 由于它构建在 Scala "
"之上，所以非常灵活，并且允许您非常轻松地定义新的抽象层。"

#: ../../source/SpinalHDL/Getting Started/Help VHDL for
#: people/vhdl_comp.rst:428
msgid ""
"Some examples of this flexibility are the :ref:`FSM <state_machine>` "
"library, the :ref:`BusSlaveFactory <bus_slave_factory>` library, and also "
"the :ref:`JTAG <jtag>` library."
msgstr ""
"这种灵活性在后面的库中表现突出： :ref:`FSM <state_machine>` 库、 :ref:`"
"BusSlaveFactory <bus_slave_factory>` 库以及 :ref:`JTAG <jtag>` 库。"
