msgid ""
msgstr ""
"Project-Id-Version: SpinalHDLReport-Msgid-Bugs-To:POT-Creation-Date:2023-12-"
"01 11:48+0800PO-Revision-Date:YEAR-MO-DA HO:MI+ZONELast-Translator:FULL NAME "
"<EMAIL@ADDRESS>Language:zh_CNLanguage-Team:zh_CN <LL@li.org>Plural-"
"Forms:nplurals=1; plural=0;MIME-Version:1.0Content-Type:text/plain; "
"charset=UTF-8\n"
"PO-Revision-Date: 2023-12-26 05:04+0000\n"
"Last-Translator: Readon <xydarcher@qq.com>\n"
"Language-Team: Chinese (Simplified) <https://hosted.weblate.org/projects/"
"spinaldoc-rtd/spinalhdlgetting-startedscala-guideinteraction/zh_Hans/>\n"
"Language: zh_CN\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bitGenerated-By:Babel 2.13.1\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Weblate 5.4-dev\n"

#: ../../source/SpinalHDL/Getting Guide/interaction.rst:3 Started/Scala
msgid "Interaction"
msgstr "交互"

#: ../../source/SpinalHDL/Getting Guide/interaction.rst:6 Started/Scala
msgid "Introduction"
msgstr "简介"

#: ../../source/SpinalHDL/Getting Guide/interaction.rst:8 Started/Scala
msgid ""
"SpinalHDL is, in fact, not an language: it's a regular Scala library. This "
"could seem strange at first glance, but it is a very powerful combination."
msgstr "事实上，SpinalHDL 不是一种语言：它是一个常规的 Scala "
"库。乍一看这似乎很奇怪，但这是一个非常强大的组合。"

#: ../../source/SpinalHDL/Getting Guide/interaction.rst:10 Started/Scala
msgid ""
"You can use the whole Scala world to help you in the description of your "
"hardware via the SpinalHDL library, but to do that properly, it's important "
"to understand how SpinalHDL interacts with Scala."
msgstr ""
"您可以使用整个 Scala 世界的工具，通过 SpinalHDL "
"库来帮助您描述硬件，但要正确地做到这一点，了解 SpinalHDL 如何与 Scala "
"交互非常重要。"

#: ../../source/SpinalHDL/Getting Guide/interaction.rst:13 Started/Scala
msgid "How SpinalHDL works behind the API"
msgstr "SpinalHDL 在 API 隐藏后的工作原理"

#: ../../source/SpinalHDL/Getting Guide/interaction.rst:15 Started/Scala
msgid ""
"When you execute your SpinalHDL hardware description, each time you use "
"SpinalHDL functions, operators, or classes, it will build an in-memory graph"
" that represents the netlist of your design."
msgstr "当您执行 SpinalHDL 硬件描述时，每次使用 SpinalHDL "
"函数、运算符或类时，它都会构建一个内存中图来表示您设计的网表。"

#: ../../source/SpinalHDL/Getting Guide/interaction.rst:17 Started/Scala
msgid ""
"Then, when the elaboration is done (instantiation of your top-level "
"``Component`` classes), SpinalHDL will do some passes on the graph that was "
"constructed, and if everything is fine, it will flush that graph into a VHDL"
" or Verilog file."
msgstr ""
"然后，当实例细化完成后（顶层 ``Component`` 类的实例化），SpinalHDL "
"将对构建的图进行一些处理，如果一切正常，它将把该图生成为 VHDL 或 "
"Verilog文件。"

#: ../../source/SpinalHDL/Getting Guide/interaction.rst:20 Started/Scala
msgid "Everything is a reference"
msgstr "一切都是引用"

#: ../../source/SpinalHDL/Getting Guide/interaction.rst:22 Started/Scala
msgid ""
"For example, if you define a Scala function which takes a parameter of type "
"``Bits``, when you call it, it will be passed as a reference. As consequence"
" of that, if you assign that argument inside the function, it has the same "
"effect on the underlying ``Bits`` object as if you had assigned to it "
"outside the function."
msgstr ""
"例如，如果您定义一个 Scala 函数，它接受类型为 ``Bits`` 的参数，那么当您调用它"
"时，它将作为引用传递。因此，如果您在函数内部赋值（通过“:=”）该参数，它对底层 "
"``Bits`` 对象具有相同的效果，就像您在函数外部给它赋值一样。"

#: ../../source/SpinalHDL/Getting Guide/interaction.rst:27 Started/Scala
msgid "Hardware types"
msgstr "硬件类型"

#: ../../source/SpinalHDL/Getting Guide/interaction.rst:29 Started/Scala
msgid "Hardware data types in SpinalHDL are the combination of two things:"
msgstr "SpinalHDL 中的硬件数据类型是两个概念的组合："

#: ../../source/SpinalHDL/Getting Guide/interaction.rst:32 Started/Scala
msgid "An instance of a given Scala type"
msgstr "给定 Scala 类型的实例"

#: ../../source/SpinalHDL/Getting Guide/interaction.rst:33 Started/Scala
msgid "The configuration of that instance"
msgstr "该实例的配置信息"

#: ../../source/SpinalHDL/Getting Guide/interaction.rst:35 Started/Scala
msgid ""
"For example ``Bits(8 bits)`` is the combination of the Scala type ``Bits`` "
"and its ``8 bits`` configuration (as a construction parameter)."
msgstr ""
"例如，``Bits(8 bits)`` 是 Scala 类型 ``Bits`` 及其 ``8 bits`` "
"这一配置信息（作为构造参数）的组合。"

#: ../../source/SpinalHDL/Getting Guide/interaction.rst:38 Started/Scala
msgid "RGB example"
msgstr "RGB 示例"

#: ../../source/SpinalHDL/Getting Guide/interaction.rst:40 Started/Scala
msgid "Let's take an Rgb bundle class as example:"
msgstr "我们以 Rgb 线束类为例："

#: ../../source/SpinalHDL/Getting Guide/interaction.rst:50 Started/Scala
msgid ""
"The hardware data type here is the combination of the Scala ``Rgb`` class "
"and its ``rWidth``, ``gWidth``, and ``bWidth`` parameterization."
msgstr ""
"这里的硬件数据类型是 Scala ``Rgb`` 类及其 ``rWidth``, ``gWidth``, 和 "
"``bWidth`` 参数的组合。"

#: ../../source/SpinalHDL/Getting Guide/interaction.rst:52 Started/Scala
msgid "Here is an example of usage:"
msgstr "这是一个用法示例："

#: ../../source/SpinalHDL/Getting Guide/interaction.rst:62 Started/Scala
msgid ""
"You can also use functions to define various kinds of type factories "
"(typedef):"
msgstr "您还可以使用函数来定义各种类型工厂（typedef）："

#: ../../source/SpinalHDL/Getting Guide/interaction.rst:73 Started/Scala
msgid "Names of signals in the generated RTL"
msgstr "生成的 RTL 中的信号名称"

#: ../../source/SpinalHDL/Getting Guide/interaction.rst:75 Started/Scala
msgid ""
"To name signals in the generated RTL, SpinalHDL uses Java reflections to "
"walk through your entire component hierarchy, collecting all references "
"stored inside the class attributes, and naming them with their attribute "
"name."
msgstr ""
"为了命名生成的 RTL 中的信号，SpinalHDL 使用 Java 反射遍历整个组件层次结构，收"
"集存储在类属性内的所有引用，并使用属性名称命名它们。"

#: ../../source/SpinalHDL/Getting Guide/interaction.rst:77 Started/Scala
msgid ""
"This is why the names of every signal defined inside a function are lost:"
msgstr "这就是函数内定义的每个信号的名称都会丢失的原因："

#: ../../source/SpinalHDL/Getting Guide/interaction.rst:88 Started/Scala
msgid ""
"One solution if you want preserve the names of the internal variables in the"
" generated RTL, is to use ``Area``:"
msgstr "如果您想在生成的 RTL 中保留内部变量的名称，一种解决方案是使用逻辑区（ "
"``Area``）："

#: ../../source/SpinalHDL/Getting Guide/interaction.rst:100 Started/Scala
msgid "Scala is for elaboration, SpinalHDL for hardware description"
msgstr "Scala 用于实例细化，SpinalHDL 用于硬件描述"

#: ../../source/SpinalHDL/Getting Guide/interaction.rst:102 Started/Scala
msgid ""
"For example, if you write a Scala for loop to generate some hardware, it "
"will generate the unrolled result in VHDL/Verilog."
msgstr "例如，如果您编写 Scala for 循环来生成某些硬件，它将生成展开的 VHDL/Verilog "
"代码。"

#: ../../source/SpinalHDL/Getting Guide/interaction.rst:104 Started/Scala
msgid ""
"Also, if you want a constant, you should not use SpinalHDL hardware literals"
" but the Scala ones. For example:"
msgstr "另外，如果你想要一个常量，你不应该使用 SpinalHDL 硬件代码，而应该使用 Scala "
"代码。例如："

#: ../../source/SpinalHDL/Getting Guide/interaction.rst:119 Started/Scala
msgid "Scala elaboration capabilities (if, for, functional programming)"
msgstr "Scala 实例细化能力（if、for、函数式编程）"

#: ../../source/SpinalHDL/Getting Guide/interaction.rst:121 Started/Scala
msgid ""
"All of Scala's syntax can be used to elaborate hardware designs, for "
"instance, a Scala ``if`` statement could be used to enable or disable the "
"generation of hardware:"
msgstr "在Scala中，所有的语法都可以用来细化硬件设计。例如，Scala的 ``if`` "
"语句可以用于启用或禁用部分硬件的生成。"

#: ../../source/SpinalHDL/Getting Guide/interaction.rst:133 Started/Scala
msgid "The same is true for Scala ``for`` loops:"
msgstr "Scala 的 ``for`` 循环也是如此："

#: ../../source/SpinalHDL/Getting Guide/interaction.rst:145 Started/Scala
msgid ""
"Also, functional programming techniques can be used with many SpinalHDL "
"types:"
msgstr "此外，函数式编程技术可用于许多 SpinalHDL 类型："
