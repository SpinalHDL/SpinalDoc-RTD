msgid ""
msgstr ""
"Project-Id-Version: SpinalHDLReport-Msgid-Bugs-To:POT-Creation-Date:2023-12-"
"01 11:48+0800PO-Revision-Date:YEAR-MO-DA HO:MI+ZONELast-Translator:FULL NAME "
"<EMAIL@ADDRESS>Language:zh_CNLanguage-Team:zh_CN <LL@li.org>Plural-"
"Forms:nplurals=1; plural=0;MIME-Version:1.0Content-Type:text/plain; "
"charset=UTF-8\n"
"PO-Revision-Date: 2023-12-26 05:04+0000\n"
"Last-Translator: Readon <xydarcher@qq.com>\n"
"Language-Team: Chinese (Simplified) <https://hosted.weblate.org/projects/"
"spinaldoc-rtd/spinalhdlgetting-startedscala-guidebasics/zh_Hans/>\n"
"Language: zh_CN\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bitGenerated-By:Babel 2.13.1\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Weblate 5.4-dev\n"

#: ../../source/SpinalHDL/Getting Guide/basics.rst:3 Started/Scala
msgid ""
"Variables and functions should be defined into ``object``\\ , ``class``\\ , "
"``function``. You can't define them on the root of a Scala file."
msgstr ""
"变量和函数应该定义为``object``\\，``class``\\，``function``。"
"您不能在根目录下的 Scala 文件中定义它们。"

#: ../../source/SpinalHDL/Getting Guide/basics.rst:6 Started/Scala
msgid "Basics"
msgstr "基础内容"

#: ../../source/SpinalHDL/Getting Guide/basics.rst:9 Started/Scala
msgid "Types"
msgstr "类型"

#: ../../source/SpinalHDL/Getting Guide/basics.rst:11 Started/Scala
msgid "In Scala, there are 5 major types:"
msgstr "在Scala中，主要有5种类型："

#: ../../source/SpinalHDL/Getting Guide/basics.rst:17 Started/Scala
msgid "Type"
msgstr "类型"

#: ../../source/SpinalHDL/Getting Guide/basics.rst:18 Started/Scala
msgid "Literal"
msgstr "形式"

#: ../../source/SpinalHDL/Getting Guide/basics.rst:19 Started/Scala
msgid "Description"
msgstr "描述"

#: ../../source/SpinalHDL/Getting Guide/basics.rst:20 Started/Scala
msgid "Boolean"
msgstr "Boolean"

#: ../../source/SpinalHDL/Getting Guide/basics.rst:21 Started/Scala
msgid "true, false"
msgstr "true, false"

#: ../../source/SpinalHDL/Getting Guide/basics.rst:23 Started/Scala
msgid "Int"
msgstr "Int"

#: ../../source/SpinalHDL/Getting Guide/basics.rst:24 Started/Scala
msgid "3, 0x32"
msgstr "3, 0x32"

#: ../../source/SpinalHDL/Getting Guide/basics.rst:25 Started/Scala
msgid "32 bits integer"
msgstr "32 位整数"

#: ../../source/SpinalHDL/Getting Guide/basics.rst:26 Started/Scala
msgid "Float"
msgstr "Float"

#: ../../source/SpinalHDL/Getting Guide/basics.rst:27 Started/Scala
msgid "3.14f"
msgstr "3.14f"

#: ../../source/SpinalHDL/Getting Guide/basics.rst:28 Started/Scala
msgid "32 bits floating point"
msgstr "32 位浮点数"

#: ../../source/SpinalHDL/Getting Guide/basics.rst:29 Started/Scala
msgid "Double"
msgstr "Double"

#: ../../source/SpinalHDL/Getting Guide/basics.rst:30 Started/Scala
msgid "3.14"
msgstr "3.14"

#: ../../source/SpinalHDL/Getting Guide/basics.rst:31 Started/Scala
msgid "64 bits floating point"
msgstr "64位浮点"

#: ../../source/SpinalHDL/Getting Guide/basics.rst:32 Started/Scala
msgid "String"
msgstr "String"

#: ../../source/SpinalHDL/Getting Guide/basics.rst:33 Started/Scala
msgid "\"Hello world\""
msgstr "\"Hello world\""

#: ../../source/SpinalHDL/Getting Guide/basics.rst:34 Started/Scala
msgid "UTF-16 string"
msgstr "UTF-16 字符串"

#: ../../source/SpinalHDL/Getting Guide/basics.rst:38 Started/Scala
msgid "Variables"
msgstr "变量"

#: ../../source/SpinalHDL/Getting Guide/basics.rst:40 Started/Scala
msgid "In Scala, you can define a variable by using the ``var`` keyword:"
msgstr "在 Scala 中，您可以使用 var 关键字定义变量："

#: ../../source/SpinalHDL/Getting Guide/basics.rst:49 Started/Scala
msgid ""
"Scala is able to infer the type automatically. You don't need to specify it "
"if the variable is assigned at declaration:"
msgstr "Scala 能够自动推断类型。如果变量是在声明时赋值的，则不需要指定类型："

#: ../../source/SpinalHDL/Getting Guide/basics.rst:55 Started/Scala
msgid ""
"However, it's not very common to use ``var`` in Scala. Instead, constant "
"values defined by ``val`` are often used:"
msgstr "然而，在 Scala 中使用 var 并不常见。相反，经常使用由 ``val`` 定义的常量值："

#: ../../source/SpinalHDL/Getting Guide/basics.rst:64 Started/Scala
msgid "Functions"
msgstr "函数"

#: ../../source/SpinalHDL/Getting Guide/basics.rst:66 Started/Scala
msgid ""
"For example, if you want to define a function which returns ``true`` if the "
"sum of its two arguments is bigger than zero, you can do as follows:"
msgstr "例如，如果你想定义一个函数，当两个参数之和大于零时返回 ``true`` "
"，你可以这样做："

#: ../../source/SpinalHDL/Getting Guide/basics.rst:74 Started/Scala
msgid "Then, to call this function, you can write:"
msgstr "然后，要调用该函数，您可以编写："

#: ../../source/SpinalHDL/Getting Guide/basics.rst:80 Started/Scala
msgid ""
"You can also specify arguments by name, which is useful if you have many "
"arguments:"
msgstr "您还可以按名称指定参数，如果您有很多参数，这会很有用："

#: ../../source/SpinalHDL/Getting Guide/basics.rst:90 Started/Scala
msgid "Return"
msgstr "返回类型"

#: ../../source/SpinalHDL/Getting Guide/basics.rst:92 Started/Scala
msgid ""
"The ``return`` keyword is not necessary. In absence of it, Scala takes the "
"last statement of your function as the returned value."
msgstr "``return`` 关键字不是必需的。如果没有它，Scala "
"会将函数的最后一条语句作为返回值。"

#: ../../source/SpinalHDL/Getting Guide/basics.rst:101 Started/Scala
msgid "Return type inferation"
msgstr "返回类型推断"

#: ../../source/SpinalHDL/Getting Guide/basics.rst:103 Started/Scala
msgid ""
"Scala is able to automatically infer the return type. You don't need to "
"specify it:"
msgstr "Scala 能够自动推断返回类型。您不需要指定它："

#: ../../source/SpinalHDL/Getting Guide/basics.rst:112 Started/Scala
msgid "Curly braces"
msgstr "大括号"

#: ../../source/SpinalHDL/Getting Guide/basics.rst:114 Started/Scala
msgid ""
"Scala functions don't require curly braces if your function contains only "
"one statement:"
msgstr "如果您的函数仅包含一条语句，则 Scala 函数不需要大括号："

#: ../../source/SpinalHDL/Getting Guide/basics.rst:121 Started/Scala
msgid "Function that returns nothing"
msgstr "不返回任何内容的函数"

#: ../../source/SpinalHDL/Getting Guide/basics.rst:123 Started/Scala
msgid ""
"If you want a function to return nothing, the return type should be set to "
"``Unit``. It's equivalent to the C/C++ ``void`` type."
msgstr "如果您希望函数不返回任何内容，则返回类型应设置为 ``Unit``。它相当于 C/C++ "
"``void`` 类型。"

#: ../../source/SpinalHDL/Getting Guide/basics.rst:133 Started/Scala
msgid "Argument default values"
msgstr "参数默认值"

#: ../../source/SpinalHDL/Getting Guide/basics.rst:135 Started/Scala
msgid "You can specify a default value for each argument of a function:"
msgstr "您可以为函数的每个参数指定默认值："

#: ../../source/SpinalHDL/Getting Guide/basics.rst:144 Started/Scala
msgid "Apply"
msgstr "Apply函数"

#: ../../source/SpinalHDL/Getting Guide/basics.rst:146 Started/Scala
msgid ""
"Functions named ``apply`` are special because you can call them without "
"having to type their name:"
msgstr "名为 ``apply`` 的函数很特殊，因为您无需输入名称即可调用它们："

#: ../../source/SpinalHDL/Getting Guide/basics.rst:157 Started/Scala
msgid "This concept is also applicable for Scala ``object`` (static)"
msgstr "这个概念也适用于 Scala ``object``（静态）"

#: ../../source/SpinalHDL/Getting Guide/basics.rst:168 Started/Scala
msgid "Object"
msgstr "对象（Object）"

#: ../../source/SpinalHDL/Getting Guide/basics.rst:170 Started/Scala
msgid ""
"In Scala, there is no ``static`` keyword. In place of that, there is "
"``object``. Everything defined inside an ``object`` definition is static."
msgstr ""
"在 Scala 中，没有 ``static`` 关键字。取而代之的是 ``object``。在 ``object`` "
"定义中所有内容都是静态的。"

#: ../../source/SpinalHDL/Getting Guide/basics.rst:172 Started/Scala
msgid ""
"The following example defines a static function named ``pow2`` which takes a"
" floating point value as parameter and returns a floating point value as "
"well."
msgstr "以下示例定义了一个名为 ``pow2`` "
"的静态函数，它接受浮点值作为参数并返回浮点值。"

#: ../../source/SpinalHDL/Getting Guide/basics.rst:180 Started/Scala
msgid "Then you can call it by writing:"
msgstr "然后你可以这样来调用它："

#: ../../source/SpinalHDL/Getting Guide/basics.rst:187 Started/Scala
msgid "Entry point (main)"
msgstr "入口点（main）"

#: ../../source/SpinalHDL/Getting Guide/basics.rst:189 Started/Scala
msgid ""
"The entry point of a Scala program (the main function) should be defined "
"inside an object as a function named ``main``."
msgstr "Scala 程序的入口点（主函数）应在对象内部定义为名为 ``main`` 的函数。"

#: ../../source/SpinalHDL/Getting Guide/basics.rst:200 Started/Scala
msgid "Class"
msgstr "类"

#: ../../source/SpinalHDL/Getting Guide/basics.rst:202 Started/Scala
msgid ""
"The class syntax is very similar to Java. Imagine that you want to define a "
"``Color`` class which takes as construction parameters three Float values "
"(r,g,b) :"
msgstr "类的语法与Java非常相似。想象一下，您想要定义一个 ``Color`` 类，它将三个 "
"Float 值 (r,g,b) 作为构造函数的参数："

#: ../../source/SpinalHDL/Getting Guide/basics.rst:210 Started/Scala
msgid ""
"Then, to instantiate the class from the previous example and use its "
"``getGrayLevel`` function:"
msgstr "然后，实例化上一个示例中的类并使用其 ``getGrayLevel`` 函数："

#: ../../source/SpinalHDL/Getting Guide/basics.rst:217 Started/Scala
msgid ""
"Be careful, if you want to access a construction parameter of the class from"
" the outside, this construction parameter should be defined as a ``val``:"
msgstr "注意，如果你想从外部访问类的构造参数，那么这个参数应该定义为 ``val``："

#: ../../source/SpinalHDL/Getting Guide/basics.rst:227 Started/Scala
msgid "Inheritance"
msgstr "继承"

#: ../../source/SpinalHDL/Getting Guide/basics.rst:229 Started/Scala
msgid ""
"As an example, suppose that you want to define two classes, ``Rectangle`` "
"and ``Square``, which extend the class ``Shape``:"
msgstr "举个例子，假设您要定义两个类，``Rectangle`` 和 ``Square``，它们扩展了 "
"``Shape`` 类："

#: ../../source/SpinalHDL/Getting Guide/basics.rst:246 Started/Scala
msgid "Case class"
msgstr "样例类"

#: ../../source/SpinalHDL/Getting Guide/basics.rst:248 Started/Scala
msgid "Case class is an alternative way of declaring classes."
msgstr "样例类是声明类的另一种方式。"

#: ../../source/SpinalHDL/Getting Guide/basics.rst:256 Started/Scala
msgid "Then there are some differences between ``case class`` and ``class`` :"
msgstr "``case class`` 和 ``class`` 之间有下面区别："

#: ../../source/SpinalHDL/Getting Guide/basics.rst:258 Started/Scala
msgid "case classes don't need the ``new`` keyword to be instantiated."
msgstr "样例类不需要 ``new`` 关键字来实例化。"

#: ../../source/SpinalHDL/Getting Guide/basics.rst:259 Started/Scala
msgid ""
"construction parameters are accessible from outside; you don't need to "
"define them as ``val``."
msgstr "构造参数可从外部获取；你不需要将它们定义为 ``val``。"

#: ../../source/SpinalHDL/Getting Guide/basics.rst:261 Started/Scala
msgid ""
"In SpinalHDL, this explains the reasoning behind the coding conventions: "
"it's in general recommended to use ``case class`` instead of ``class`` in "
"order to have less typing and more coherency."
msgstr ""
"在 SpinalHDL 中，这解释了编码约定背后的原因：通常建议使用``case class`` "
"而不是 ``class``，以减少代码量并提高一致性。"

#: ../../source/SpinalHDL/Getting Guide/basics.rst:264 Started/Scala
msgid "Templates / Type parameterization"
msgstr "模板/类型参数化"

#: ../../source/SpinalHDL/Getting Guide/basics.rst:266 Started/Scala
msgid ""
"Imagine you want to design a class which is a queue of a given datatype, in "
"that case you need to provide a type parameter to the class:"
msgstr "想象一下，您想要设计一个类，它是某数据类型的队列，在这种情况下，您需要向该类"
"提供类型参数："

#: ../../source/SpinalHDL/Getting Guide/basics.rst:275 Started/Scala
msgid ""
"If you want to restrict the ``T`` type to be a sub class of a given type "
"(for example ``Shape``), you can use the ``<: Shape`` syntax :"
msgstr "如果你想将 ``T`` 类型限制为给定类型的子类（例如 ``Shape``），你可以使用 ``<: "
"Shape`` 语法："

#: ../../source/SpinalHDL/Getting Guide/basics.rst:289 Started/Scala
msgid "The same is possible for functions:"
msgstr "对于函数来说也是如此："
