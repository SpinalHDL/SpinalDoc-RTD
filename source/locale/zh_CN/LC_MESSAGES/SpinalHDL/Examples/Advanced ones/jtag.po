msgid ""
msgstr ""
"Project-Id-Version: SpinalHDLReport-Msgid-Bugs-To:POT-Creation-Date:2023-12-"
"01 11:48+0800PO-Revision-Date:YEAR-MO-DA HO:MI+ZONELast-Translator:FULL NAME "
"<EMAIL@ADDRESS>Language:zh_CNLanguage-Team:zh_CN <LL@li.org>Plural-"
"Forms:nplurals=1; plural=0;MIME-Version:1.0Content-Type:text/plain; "
"charset=UTF-8\n"
"PO-Revision-Date: 2023-12-15 15:56+0000\n"
"Last-Translator: Readon <xydarcher@qq.com>\n"
"Language-Team: Chinese (Simplified) <https://hosted.weblate.org/projects/"
"spinaldoc-rtd/spinalhdlexamplesadvanced-onesjtag/zh_Hans/>\n"
"Language: zh_CN\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bitGenerated-By:Babel 2.13.1\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Weblate 5.3\n"

#: ../../source/SpinalHDL/Examples/Advanced ones/jtag.rst:3 ones/jtag.rst:60
msgid "JTAG TAP"
msgstr "JTAG TAP"

#: ../../source/SpinalHDL/Examples/Advanced ones/jtag.rst:6
msgid "Introduction"
msgstr "简介"

#: ../../source/SpinalHDL/Examples/Advanced ones/jtag.rst:9
msgid ""
"The goal of this page is to show the implementation of a JTAG TAP (a slave) "
"by a non-conventional way."
msgstr "本页的目的是展示一个JTAG TAP（从设备）的非常规方式实现方法。"

#: ../../source/SpinalHDL/Examples/Advanced ones/jtag.rst
msgid ""
"This implementation is not a simple one, it mix object oriented programming,"
" abstract interfaces decoupling, hardware generation and hardware "
"description."
msgstr "这个实现并不简单，它混合了面向对象编程、抽象接口解耦、硬件生成和硬件描述。"

#: ../../source/SpinalHDL/Examples/Advanced ones/jtag.rst
msgid ""
"Of course a simple JTAG TAP implementation could be done only with a simple "
"hardware description, but the goal here is really to going forward and "
"creating an very reusable and extensible JTAG TAP generator"
msgstr "当然，简单的JTAG "
"TAP实现只需通过简单的硬件描述就可以完成，但这里的目标实际上是更进一步，"
"创建一个可重用和可扩展的JTAG TAP生成器"

#: ../../source/SpinalHDL/Examples/Advanced ones/jtag.rst:16
msgid ""
"This page will not explain how JTAG works. A good tutorial can be found "
"`there <https://www.fpga4fun.com/JTAG.html>`_."
msgstr ""
"本页不会解释 JTAG 的工作原理。可以在 `这里 <https://www.fpga4fun.com/JTAG."
"html>`_ 找到一个很好的教程。"

#: ../../source/SpinalHDL/Examples/Advanced ones/jtag.rst:18
msgid ""
"One big difference between commonly used HDL and Spinal, is the fact that "
"SpinalHDL allow you to define hardware generators/builders. It's very "
"different than describing hardware. Let's take a look into the example "
"bellow because the difference between generate/build/describing could seem "
"\"playing with word\" or could be interpreted differently."
msgstr ""
"常用的HDL与Spinal之间的一个重要区别在于，SpinalHDL允许您定义硬件生成器/构建器"
"。这与描述硬件的方式非常不同。让我们看看下面的例子，因为在生成/构建/描述之间"
"的区别可能看起来像是在“玩文字游戏”，或者可以用不同的方式解释。"

#: ../../source/SpinalHDL/Examples/Advanced ones/jtag.rst:21
msgid ""
"The example bellow is a JTAG TAP which allow the JTAG master to read "
"``switchs``\\ /\\ ``keys`` inputs and write ``leds`` outputs. This TAP could"
" also be recognized by a master by using the UID 0x87654321."
msgstr ""
"下面的示例是一个JTAG TAP，它允许JTAG主设备读取 ``switchs``\\ /\\ ``keys`` "
"的输入并写入 ``leds`` 的输出。主设备也可以通过使用UID 0x87654321来识别此 "
"TAP。"

#: ../../source/SpinalHDL/Examples/Advanced ones/jtag.rst:28
msgid ""
"As you can see, a JtagTap is created but then some Generator/Builder "
"functions (idcode,read,write) are called to create each JTAG instruction. "
"This is what i call \"Hardware generator/builder\", then these "
"Generator/Builder are used by the user to describing an hardware. And there "
"is the point, in commonly HDL you can only describe your hardware, which "
"imply many donkey job."
msgstr ""
"正如您所看到的，上例创建了一个 JtagTap，不过又调用了一些生成(Generator)/构建("
"Builder)函数（idcode、read、write）来创建每个JTAG指令。这就是我所说的“硬件生"
"成器/构建器”，然后用户使用这些生成器/构建器来描述硬件。还有一点是，在通常的HD"
"L中，你只能描述你的硬件，这意味着很多繁琐的工作。"

#: ../../source/SpinalHDL/Examples/Advanced ones/jtag.rst:30
msgid ""
"This JTAG TAP tutorial is based on `this "
"<https://github.com/SpinalHDL/SpinalHDL/tree/master/lib/src/main/scala/spinal/lib/com/jtag>`_"
" implementation."
msgstr ""
"本JTAG TAP教程基于 `该库 <https://github.com/SpinalHDL/SpinalHDL/tree/master/"
"lib/src/main/scala/spinal/lib/com/jtag>`_ 实现。"

#: ../../source/SpinalHDL/Examples/Advanced ones/jtag.rst:35
msgid "JTAG bus"
msgstr "JTAG总线"

#: ../../source/SpinalHDL/Examples/Advanced ones/jtag.rst:37
msgid "First we need to define a JTAG bus bundle."
msgstr "首先我们需要定义一个JTAG总线束。"

#: ../../source/SpinalHDL/Examples/Advanced ones/jtag.rst:44
msgid ""
"As you can see this bus don't contain the TCK pin because it will be "
"provided by the clock domain."
msgstr "正如您所看到的，该总线不包含TCK引脚，因为它将由时钟域提供。"

#: ../../source/SpinalHDL/Examples/Advanced ones/jtag.rst:47
msgid "JTAG state machine"
msgstr "JTAG状态机"

#: ../../source/SpinalHDL/Examples/Advanced ones/jtag.rst:49
msgid ""
"Let's define the JTAG state machine as explained `here "
"<https://www.fpga4fun.com/JTAG2.html>`_"
msgstr "让我们定义JTAG状态机，依据 `此处 <https://www.fpga4fun.com/JTAG2.html>`_ "
"所述。"

#: ../../source/SpinalHDL/Examples/Advanced ones/jtag.rst:57
msgid ""
"The ``randBoot()`` on ``state`` make it initialized with a random state. "
"It's only for simulation purpose."
msgstr "``state`` 中的 ``randBoot()`` 会使其以随机状态初始化。这仅用于仿真目的。"

#: ../../source/SpinalHDL/Examples/Advanced ones/jtag.rst:62
msgid ""
"Let's implement the core of the JTAG TAP, without any instruction, just the "
"base manage the instruction register (IR) and the bypass."
msgstr "让我们不使用任何指令，只用最基本的指令寄存器(IR)控制和旁路控制实现JTAG "
"TAP的核心部分。"

#: ../../source/SpinalHDL/Examples/Advanced ones/jtag.rst:71
msgid ""
"Ignore the reference to `with JTagTapAccess` for now, it will be explained "
"further down."
msgstr "暂时忽略 `with JTagTapAccess` 的引用，下面将会进一步解释。"

#: ../../source/SpinalHDL/Examples/Advanced ones/jtag.rst:74
msgid "Jtag instructions"
msgstr "Jtag指令"

#: ../../source/SpinalHDL/Examples/Advanced ones/jtag.rst:76
msgid ""
"Now that the JTAG TAP core is done, we can think about how to implement JTAG"
" instructions by an reusable way."
msgstr "现在JTAG "
"TAP核心部分已经完成了，我们可以考虑如何通过可重用的方式来实现JTAG指令。"

#: ../../source/SpinalHDL/Examples/Advanced ones/jtag.rst:79
msgid "JTAG TAP class interface"
msgstr "JTAG TAP类接口"

#: ../../source/SpinalHDL/Examples/Advanced ones/jtag.rst:81
msgid ""
"First we need to define how an instruction could interact with the JTAG TAP "
"core. We could of course directly take the JtagTap area, but it's not very "
"nice because is some situation the JTAG TAP core is provided by another IP "
"(Altera virtual JTAG for example)."
msgstr ""
"首先，我们需要定义指令如何与JTAG "
"TAP内核交互。我们当然可以直接使用JtagTap区域（area）。但这不是很好，"
"因为在某些情况下JTAG TAP内核是由另一个IP（例如Altera的虚拟JTAG）提供的。"

#: ../../source/SpinalHDL/Examples/Advanced ones/jtag.rst:83
msgid ""
"So let's define a simple and abstract interface between the JTAG TAP core "
"and instructions :"
msgstr "因此，让我们在JTAG TAP内核和指令之间定义一个简单抽象接口："

#: ../../source/SpinalHDL/Examples/Advanced ones/jtag.rst:91
msgid "Then let the ``JtagTap`` implement this abstract interface:"
msgstr "然后让 ``JtagTap`` 实现这个抽象接口："

#: ../../source/SpinalHDL/Examples/Advanced ones/jtag.rst:93
msgid "Additions to ``class JtagTap``"
msgstr "添加到 ``class JtagTap``"

#: ../../source/SpinalHDL/Examples/Advanced ones/jtag.rst:102
msgid "Base class"
msgstr "基类"

#: ../../source/SpinalHDL/Examples/Advanced ones/jtag.rst:104
msgid ""
"Let's define a useful base class for JTAG instruction that provide some "
"callback (doCapture/doShift/doUpdate/doReset) depending the selected "
"instruction and the state of the JTAG TAP :"
msgstr ""
"让我们为JTAG指令定义一个有用的基类，它根据所选指令和JTAG "
"TAP的状态提供一些回调（doCapture/doShift/doUpdate/doReset）："

#: ../../source/SpinalHDL/Examples/Advanced ones/jtag.rst
msgid "About the Component.current.addPrePopTask(...) :"
msgstr "关于Component.current.addPrePopTask(...) ："

#: ../../source/SpinalHDL/Examples/Advanced ones/jtag.rst
msgid ""
"This allows you to call the given code at the end of the current component "
"construction. Because of object oriented nature of JtagInstruction, "
"doCapture, doShift, doUpdate and doReset should not be called before "
"children classes construction (because children classes will use it as a "
"callback to do some logic)."
msgstr ""
"这允许您在当前组件构造结束时调用给定的代码。由于JtagInstruction面向对象的性质"
"，doCapture、doShift、doUpdate 和 doReset "
"不应在子类构造之前调用（因为子类将使用它作为回调来执行某些逻辑）。"

#: ../../source/SpinalHDL/Examples/Advanced ones/jtag.rst:116
msgid "Read instruction"
msgstr "读指令"

#: ../../source/SpinalHDL/Examples/Advanced ones/jtag.rst:118
msgid "Let's implement an instruction that allow the JTAG to read a signal."
msgstr "让我们实现一条允许JTAG读取信号的指令。"

#: ../../source/SpinalHDL/Examples/Advanced ones/jtag.rst:126
msgid "Write instruction"
msgstr "写指令"

#: ../../source/SpinalHDL/Examples/Advanced ones/jtag.rst:128
msgid ""
"Let's implement an instruction that allow the JTAG to write a register (and "
"also read its current value)."
msgstr "让我们实现一条允许JTAG写入寄存器（并读取其当前值）的指令。"

#: ../../source/SpinalHDL/Examples/Advanced ones/jtag.rst:136
msgid "Idcode instruction"
msgstr "Idcode指令"

#: ../../source/SpinalHDL/Examples/Advanced ones/jtag.rst:138
msgid ""
"Let's implement the instruction that return a idcode to the JTAG and also, "
"when a reset occur, set the instruction register (IR) to it own "
"instructionId."
msgstr "让我们实现向JTAG返回idcode的指令，并且当发生复位时，将指令寄存器 (IR) "
"设置为它自己的instructionId。"

#: ../../source/SpinalHDL/Examples/Advanced ones/jtag.rst:146
msgid "User friendly wrapper"
msgstr "用户友好型包装"

#: ../../source/SpinalHDL/Examples/Advanced ones/jtag.rst:148
msgid ""
"Let's add some user friendly function to the JtagTapAccess to make "
"instructions instantiation easier ."
msgstr "让我们向JtagTapAccess添加一些对用户友好的功能，使指令实例化更容易。"

#: ../../source/SpinalHDL/Examples/Advanced ones/jtag.rst:150
msgid "Additions to ``trait JtagTapAccess``"
msgstr "添加 ``trait JtagTapAccess``"

#: ../../source/SpinalHDL/Examples/Advanced ones/jtag.rst:159
msgid "Usage demonstration"
msgstr "使用演示"

#: ../../source/SpinalHDL/Examples/Advanced ones/jtag.rst:161
msgid ""
"And there we are, we can now very easily create an application specific JTAG"
" TAP without having to write any logic or any interconnections."
msgstr "现在，我们可以非常容易地创建应用特定的JTAG "
"TAP，而无需编写任何逻辑或任何互连。"

#: ../../source/SpinalHDL/Examples/Advanced ones/jtag.rst:168
msgid ""
"This way of doing things (Generating hardware) could also be applied to, for"
" example, generating an APB/AHB/AXI bus slave."
msgstr "这种处理方式（生成硬件）也可以应用于生成APB/AHB/AXI的从端总线等。"
