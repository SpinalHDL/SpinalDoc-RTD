msgid ""
msgstr ""
"Project-Id-Version: SpinalHDLReport-Msgid-Bugs-To:POT-Creation-Date:2023-12-"
"01 11:48+0800PO-Revision-Date:YEAR-MO-DA HO:MI+ZONELast-Translator:FULL NAME "
"<EMAIL@ADDRESS>Language:zh_CNLanguage-Team:zh_CN <LL@li.org>Plural-"
"Forms:nplurals=1; plural=0;MIME-Version:1.0Content-Type:text/plain; "
"charset=UTF-8\n"
"Report-Msgid-Bugs-To: EMAIL@ADDRESSPOT-Creation-Date:2023-12-02 00:23+0800PO-"
"Revision-Date:YEAR-MO-DA HO:MI+ZONELast-Translator:FULL NAME <EMAIL@ADDRESS"
">Language-Team:LANGUAGE <LL@li.org>MIME-Version:1.0Content-Type:text/plain; "
"charset=UTF-8\n"
"PO-Revision-Date: 2024-01-12 04:06+0000\n"
"Last-Translator: tsy0123 <675526215@qq.com>\n"
"Language-Team: Chinese (Simplified) <https://hosted.weblate.org/projects/"
"spinaldoc-rtd/spinalhdllibrariesutils/zh_Hans/>\n"
"Language: zh_CN\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bitGenerated-By:Babel 2.13.1\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Weblate 5.4-dev\n"

#: ../../SpinalHDL/Libraries/utils.rst:5
msgid "Utils"
msgstr "实用工具"

#: ../../SpinalHDL/Libraries/utils.rst:7
msgid "Some utils are also present in :ref:`spinal.core <utils>`"
msgstr "一些实用工具也在 :ref:`spinal.core <utils>` 中"

#: ../../SpinalHDL/Libraries/utils.rst:10
msgid "State less utilities"
msgstr "免状态工具"

#: ../../SpinalHDL/Libraries/utils.rst:16
#: ../../SpinalHDL/Libraries/utils.rst:83
#: ../../SpinalHDL/Libraries/utils.rst:216
msgid "Syntax"
msgstr "语法"

#: ../../SpinalHDL/Libraries/utils.rst:17
#: ../../SpinalHDL/Libraries/utils.rst:84
#: ../../SpinalHDL/Libraries/utils.rst:217
msgid "Return"
msgstr "返回类型"

#: ../../SpinalHDL/Libraries/utils.rst:18
#: ../../SpinalHDL/Libraries/utils.rst:85
#: ../../SpinalHDL/Libraries/utils.rst:189
#: ../../SpinalHDL/Libraries/utils.rst:218
msgid "Description"
msgstr "描述"

#: ../../SpinalHDL/Libraries/utils.rst:19
msgid "toGray(x : UInt)"
msgstr "toGray(x : UInt)"

#: ../../SpinalHDL/Libraries/utils.rst:20
#: ../../SpinalHDL/Libraries/utils.rst:44
#: ../../SpinalHDL/Libraries/utils.rst:47
#: ../../SpinalHDL/Libraries/utils.rst:53
msgid "Bits"
msgstr "位"

#: ../../SpinalHDL/Libraries/utils.rst:21
msgid "Return the gray value converted from ``x`` (UInt)"
msgstr "返回从 ``x`` (UInt)转换而来的灰度值"

#: ../../SpinalHDL/Libraries/utils.rst:22
msgid "fromGray(x : Bits)"
msgstr "fromGray(x : Bits)"

#: ../../SpinalHDL/Libraries/utils.rst:23
#: ../../SpinalHDL/Libraries/utils.rst:30
#: ../../SpinalHDL/Libraries/utils.rst:34
msgid "UInt"
msgstr "UInt"

#: ../../SpinalHDL/Libraries/utils.rst:24
msgid "Return the UInt value converted value from ``x`` (gray)"
msgstr "返回从 ``x`` (灰度)转换而来的UInt值"

#: ../../SpinalHDL/Libraries/utils.rst:25
msgid "Reverse(x : T)"
msgstr "Reverse(x : T)"

#: ../../SpinalHDL/Libraries/utils.rst:26
#: ../../SpinalHDL/Libraries/utils.rst:41
#: ../../SpinalHDL/Libraries/utils.rst:61
#: ../../SpinalHDL/Libraries/utils.rst:67
#: ../../SpinalHDL/Libraries/utils.rst:72
#: ../../SpinalHDL/Libraries/utils.rst:87
#: ../../SpinalHDL/Libraries/utils.rst:95
msgid "T"
msgstr "T"

#: ../../SpinalHDL/Libraries/utils.rst:27
msgid "Flip all bits (lsb + n -> msb - n)"
msgstr "翻转所有位(lsb + n -> msb - n)"

#: ../../SpinalHDL/Libraries/utils.rst
msgid "OHToUInt(x : Seq[Bool])"
msgstr "OHToUInt(x : Seq[Bool])"

#: ../../SpinalHDL/Libraries/utils.rst
msgid "OHToUInt(x : BitVector)"
msgstr "OHToUInt(x : BitVector)"

#: ../../SpinalHDL/Libraries/utils.rst:31
msgid "Return the index of the single bit set (one hot) in ``x``"
msgstr "返回 ``x`` 中唯一被设置（为1）的比特位的索引"

#: ../../SpinalHDL/Libraries/utils.rst
msgid "CountOne(x : Seq[Bool])"
msgstr "CountOne(x : Seq[Bool])"

#: ../../SpinalHDL/Libraries/utils.rst
msgid "CountOne(x : BitVector)"
msgstr "CountOne(x : BitVector)"

#: ../../SpinalHDL/Libraries/utils.rst:35
msgid "Return the number of bit set in ``x``"
msgstr "返回 ``x`` 中被设为1的位数"

#: ../../SpinalHDL/Libraries/utils.rst
msgid "MajorityVote(x : Seq[Bool])"
msgstr "MajorityVote(x : Seq[Bool])"

#: ../../SpinalHDL/Libraries/utils.rst
msgid "MajorityVote(x : BitVector)"
msgstr "MajorityVote(x : BitVector)"

#: ../../SpinalHDL/Libraries/utils.rst:38
#: ../../SpinalHDL/Libraries/utils.rst:191
msgid "Bool"
msgstr "Bool"

#: ../../SpinalHDL/Libraries/utils.rst:39
msgid "Return True if the number of bit set is > x.size / 2"
msgstr "如果设置为1的位数 > x.size / 2，则返回 True"

#: ../../SpinalHDL/Libraries/utils.rst:40
msgid "EndiannessSwap(that: T[, base:BitCount])"
msgstr "EndiannessSwap(that: T[, base:BitCount])"

#: ../../SpinalHDL/Libraries/utils.rst:42
msgid "Big-Endian <-> Little-Endian"
msgstr "大端 <-> 小端"

#: ../../SpinalHDL/Libraries/utils.rst:43
msgid "OHMasking.first(x : Bits)"
msgstr "OHMasking.first(x : Bits)"

#: ../../SpinalHDL/Libraries/utils.rst:45
msgid "Apply a mask on x to only keep the first bit set"
msgstr "对x应用掩码以仅保留第一个设为1的位"

#: ../../SpinalHDL/Libraries/utils.rst:46
msgid "OHMasking.last(x : Bits)"
msgstr "OHMasking.last(x : Bits)"

#: ../../SpinalHDL/Libraries/utils.rst:48
msgid "Apply a mask on x to only keep the last bit set"
msgstr "对x应用掩码以仅保留最后一个设为1的位"

#: ../../SpinalHDL/Libraries/utils.rst
msgid "OHMasking.roundRobin("
msgstr "OHMasking.roundRobin("

#: ../../SpinalHDL/Libraries/utils.rst
msgid "requests : Bits,"
msgstr "requests : Bits,"

#: ../../SpinalHDL/Libraries/utils.rst
msgid "ohPriority : Bits"
msgstr "ohPriority : Bits"

#: ../../SpinalHDL/Libraries/utils.rst
msgid ")"
msgstr ")"

#: ../../SpinalHDL/Libraries/utils.rst
msgid "Apply a mask on x to only keep the bit set from ``requests``."
msgstr "对x应用掩码以仅保留 ``requests`` 中设置1的位。"

#: ../../SpinalHDL/Libraries/utils.rst
msgid "it start looking in ``requests`` from the ``ohPriority`` position."
msgstr "它从 ``ohPriority`` 位置开始访问 ``requests`` 。"

#: ../../SpinalHDL/Libraries/utils.rst
msgid ""
"For example if ``requests`` is \"1001\" and ``ohPriority`` is \"0010\", the "
"``roundRobin`` function will start looking in `requests` from its second bit"
" and will return \"1000\"."
msgstr ""
"例如，如果 ``requests`` 为“1001”且 ``ohPriority`` 为“0010”，则 ``roundRobin``"
" 函数将从第二位开始访问 `requests` 并返回“1000”。"

#: ../../SpinalHDL/Libraries/utils.rst
msgid "MuxOH ("
msgstr "MuxOH ("

#: ../../SpinalHDL/Libraries/utils.rst
msgid "oneHot : IndexedSeq[Bool],"
msgstr "oneHot : IndexedSeq[Bool],"

#: ../../SpinalHDL/Libraries/utils.rst
msgid "inputs : Iterable[T]"
msgstr "inputs : Iterable[T]"

#: ../../SpinalHDL/Libraries/utils.rst:62
msgid ""
"Returns the muxed ``T`` from the ``inputs`` based on the ``oneHot`` vector."
msgstr "根据 ``oneHot`` 向量从 ``inputs`` 中返回多路复用的 ``T`` 。"

#: ../../SpinalHDL/Libraries/utils.rst
msgid "PriorityMux ("
msgstr "PriorityMux ("

#: ../../SpinalHDL/Libraries/utils.rst
msgid "sel: Seq[Bool],"
msgstr "sel: Seq[Bool],"

#: ../../SpinalHDL/Libraries/utils.rst
msgid "in:  Seq[T]"
msgstr "in:  Seq[T]"

#: ../../SpinalHDL/Libraries/utils.rst:68
#: ../../SpinalHDL/Libraries/utils.rst:73
msgid "Return the first ``in`` element whose ``sel`` is ``True``."
msgstr "返回第一个其 ``sel`` 为 ``True`` 的 ``in`` 元素。"

#: ../../SpinalHDL/Libraries/utils.rst
msgid "in:  Seq[(Bool, T)]"
msgstr "in:  Seq[(Bool, T)]"

#: ../../SpinalHDL/Libraries/utils.rst:77
msgid "State full utilities"
msgstr "全状态工具"

#: ../../SpinalHDL/Libraries/utils.rst:86
msgid "Delay(that: T, cycleCount: Int)"
msgstr "Delay(that: T, cycleCount: Int)"

#: ../../SpinalHDL/Libraries/utils.rst:88
msgid "Return ``that`` delayed by ``cycleCount`` cycles"
msgstr "返回延迟了 ``cycleCount`` 周期的 ``that``"

#: ../../SpinalHDL/Libraries/utils.rst:89
msgid "History(that: T, length: Int[,when : Bool])"
msgstr "History(that: T, length: Int[,when : Bool])"

#: ../../SpinalHDL/Libraries/utils.rst:90
msgid "List[T]"
msgstr "List[T]"

#: ../../SpinalHDL/Libraries/utils.rst
msgid "Return a Vec of ``length`` elements"
msgstr "返回长度为 ``length`` 的Vec"

#: ../../SpinalHDL/Libraries/utils.rst
msgid ""
"The first element is ``that``\\ , the last one is ``that`` delayed by "
"``length``\\ -1\\"
msgstr "其第一个元素是 ``that`` ，最后一个元素是延迟了 ``length``\\ -1\\ 的``that``"

#: ../../SpinalHDL/Libraries/utils.rst
msgid "The internal shift register sample when ``when`` is asserted"
msgstr "内部移位寄存器会在 ``when`` 有效时采样"

#: ../../SpinalHDL/Libraries/utils.rst:94
msgid "BufferCC(input : T)"
msgstr "BufferCC(input : T)"

#: ../../SpinalHDL/Libraries/utils.rst:96
msgid ""
"Return the input signal synchronized with the current clock domain by using "
"2 flip flop"
msgstr "返回利用两个触发器同步到当前时钟域的同步输入信号"

#: ../../SpinalHDL/Libraries/utils.rst:100
msgid "Counter"
msgstr "计数器"

#: ../../SpinalHDL/Libraries/utils.rst:102
msgid "The Counter tool can be used to easily instantiate a hardware counter."
msgstr "计数器工具可用于轻松实例化硬件计数器。"

#: ../../SpinalHDL/Libraries/utils.rst:108
msgid "Instantiation syntax"
msgstr "实例化语法"

#: ../../SpinalHDL/Libraries/utils.rst:109
#: ../../SpinalHDL/Libraries/utils.rst:152
msgid "Notes"
msgstr "备注"

#: ../../SpinalHDL/Libraries/utils.rst:110
msgid "``Counter(start: BigInt, end: BigInt[, inc : Bool])``"
msgstr "``Counter(start: BigInt, end: BigInt[, inc : Bool])``"

#: ../../SpinalHDL/Libraries/utils.rst:112
msgid "``Counter(range : Range[, inc : Bool])``"
msgstr "``Counter(range : Range[, inc : Bool])``"

#: ../../SpinalHDL/Libraries/utils.rst:113
msgid "Compatible with the  ``x to y`` ``x until y`` syntaxes"
msgstr "与 ``x to y`` ``x until y`` 语法兼容"

#: ../../SpinalHDL/Libraries/utils.rst:114
msgid "``Counter(stateCount: BigInt[, inc : Bool])``"
msgstr "``Counter(stateCount: BigInt[, inc : Bool])``"

#: ../../SpinalHDL/Libraries/utils.rst:115
msgid "Starts at zero and ends at ``stateCount - 1``"
msgstr "从 0 开始，到 ``stateCount - 1`` 结束"

#: ../../SpinalHDL/Libraries/utils.rst:116
msgid "``Counter(bitCount: BitCount[, inc : Bool])``"
msgstr "``Counter(bitCount: BitCount[, inc : Bool])``"

#: ../../SpinalHDL/Libraries/utils.rst:117
msgid "Starts at zero and ends at ``(1 << bitCount) - 1``"
msgstr "从0开始到 ``(1 << bitCount) - 1`` 结束"

#: ../../SpinalHDL/Libraries/utils.rst:119
msgid "A counter can be controlled by methods, and wires can be read:"
msgstr "计数器可以通过方法控制，并且可以连线可以被读取："

#: ../../SpinalHDL/Libraries/utils.rst:135
msgid ""
"When a ``Counter`` overflows (reached end value), it restarts the next cycle"
" to its start value."
msgstr "当 ``Counter`` 溢出（达到最终值）时，它会重新启动下一个周期并设置为起始值。"

#: ../../SpinalHDL/Libraries/utils.rst:138
msgid "Currently, only up counter are supported."
msgstr "目前仅支持向上计数器。"

#: ../../SpinalHDL/Libraries/utils.rst:140
msgid ""
"``CounterFreeRun`` builds an always running counter: "
"``CounterFreeRun(stateCount: BigInt)``."
msgstr ""
"``CounterFreeRun`` 构建一个始终运行的计数器： ``CounterFreeRun(stateCount: "
"BigInt)`` 。"

#: ../../SpinalHDL/Libraries/utils.rst:143
msgid "Timeout"
msgstr "超时"

#: ../../SpinalHDL/Libraries/utils.rst:145
msgid ""
"The Timeout tool can be used to easily instantiate an hardware timeout."
msgstr "超时工具可用于方便地实例化一个硬件超时。"

#: ../../SpinalHDL/Libraries/utils.rst:151
msgid "Instanciation syntax"
msgstr "实例化语法"

#: ../../SpinalHDL/Libraries/utils.rst:153
msgid "Timeout(cycles : BigInt)"
msgstr "Timeout(cycles : BigInt)"

#: ../../SpinalHDL/Libraries/utils.rst:154
msgid "Tick after ``cycles`` clocks"
msgstr "在 ``cycles`` 个时钟后标记"

#: ../../SpinalHDL/Libraries/utils.rst:155
msgid "Timeout(time : TimeNumber)"
msgstr "Timeout(time : TimeNumber)"

#: ../../SpinalHDL/Libraries/utils.rst:156
msgid "Tick after a ``time`` duration"
msgstr "在持续 ``time`` 时间后标记"

#: ../../SpinalHDL/Libraries/utils.rst:157
msgid "Timeout(frequency : HertzNumber)"
msgstr "Timeout(frequency : HertzNumber)"

#: ../../SpinalHDL/Libraries/utils.rst:158
msgid "Tick at an ``frequency`` rate"
msgstr "以 ``frequency``频率进行标记"

#: ../../SpinalHDL/Libraries/utils.rst:161
msgid ""
"There is an example of different syntaxes which could be used with the "
"Counter tool"
msgstr "下方是可以与Counter工具一起使用的不同语法句式的示例"

#: ../../SpinalHDL/Libraries/utils.rst:171
msgid ""
"If you instantiate an ``Timeout`` with an time or frequency setup, the "
"implicit ``ClockDomain`` should have an frequency setting."
msgstr "如果您使用时间或频率设置实例化 ``Timeout`` ，则隐含地 ``ClockDomain`` "
"应该具有频率设置。"

#: ../../SpinalHDL/Libraries/utils.rst:174
msgid "ResetCtrl"
msgstr "复位控制"

#: ../../SpinalHDL/Libraries/utils.rst:176
msgid "The ResetCtrl provide some utilities to manage resets."
msgstr "复位控制(ResetCtrl)提供了一些实用工具来管理复位。"

#: ../../SpinalHDL/Libraries/utils.rst:179
msgid "asyncAssertSyncDeassert"
msgstr "asyncAssertSyncDeassert"

#: ../../SpinalHDL/Libraries/utils.rst:181
msgid ""
"You can filter an asynchronous reset by using an asynchronously asserted "
"synchronously deaserted logic. To do it you can use the "
"``ResetCtrl.asyncAssertSyncDeassert`` function which will return you the "
"filtered value."
msgstr ""
"您可以使用异步有效同步无效逻辑来筛选异步复位。为此，您可以使用 ``ResetCtrl."
"asyncAssertSyncDeassert`` 函数返回筛选后的值。"

#: ../../SpinalHDL/Libraries/utils.rst:187
msgid "Argument name"
msgstr "参数名称"

#: ../../SpinalHDL/Libraries/utils.rst:188
msgid "Type"
msgstr "类型"

#: ../../SpinalHDL/Libraries/utils.rst:190
msgid "input"
msgstr "input"

#: ../../SpinalHDL/Libraries/utils.rst:192
msgid "Signal that should be filtered"
msgstr "被筛选的信号"

#: ../../SpinalHDL/Libraries/utils.rst:193
msgid "clockDomain"
msgstr "clockDomain"

#: ../../SpinalHDL/Libraries/utils.rst:194
msgid "ClockDomain"
msgstr "ClockDomain"

#: ../../SpinalHDL/Libraries/utils.rst:195
msgid "ClockDomain which will use the filtered value"
msgstr "返回将使用所筛选值的时钟域(ClockDomain)"

#: ../../SpinalHDL/Libraries/utils.rst:196
msgid "inputPolarity"
msgstr "inputPolarity"

#: ../../SpinalHDL/Libraries/utils.rst:197
#: ../../SpinalHDL/Libraries/utils.rst:200
msgid "Polarity"
msgstr "Polarity"

#: ../../SpinalHDL/Libraries/utils.rst:198
msgid "HIGH/LOW (default=HIGH)"
msgstr "HIGH/LOW (default=HIGH)"

#: ../../SpinalHDL/Libraries/utils.rst:199
msgid "outputPolarity"
msgstr "outputPolarity"

#: ../../SpinalHDL/Libraries/utils.rst:201
msgid "HIGH/LOW (default=clockDomain.config.resetActiveLevel)"
msgstr "HIGH/LOW (default=clockDomain.config.resetActiveLevel)"

#: ../../SpinalHDL/Libraries/utils.rst:202
msgid "bufferDepth"
msgstr "bufferDepth"

#: ../../SpinalHDL/Libraries/utils.rst:203
#: ../../SpinalHDL/Libraries/utils.rst:220
msgid "Int"
msgstr "Int"

#: ../../SpinalHDL/Libraries/utils.rst:204
msgid "Number of register stages used to avoid metastability (default=2)"
msgstr "防止亚稳态所需的寄存器级数（默认为2）"

#: ../../SpinalHDL/Libraries/utils.rst:207
msgid ""
"There is also an ``ResetCtrl.asyncAssertSyncDeassertDrive`` version of tool "
"which directly assign the ``clockDomain`` reset with the filtered value."
msgstr ""
"另外还有一个 ``ResetCtrl.asyncAssertSyncDeassertDrive`` 版本的工具，"
"它直接使用筛选后的值为 ``clockDomain`` 的复位赋值。"

#: ../../SpinalHDL/Libraries/utils.rst:210
msgid "Special utilities"
msgstr "特殊工具"

#: ../../SpinalHDL/Libraries/utils.rst:219
msgid "LatencyAnalysis(paths : Node*)"
msgstr "LatencyAnalysis(paths : Node*)"

#: ../../SpinalHDL/Libraries/utils.rst
msgid ""
"Return the shortest path, in terms of cycles, that travel through all nodes,"
msgstr "以周期为单位返回经过所有节点的最短路径，"

#: ../../SpinalHDL/Libraries/utils.rst
msgid "from the first one to the last one"
msgstr "第一个节点到最后一个节点"
