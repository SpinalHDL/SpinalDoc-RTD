# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018 - 2024, SpinalHDL
# This file is distributed under the same license as the SpinalHDL package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
#
msgid ""
msgstr ""
"Project-Id-Version: SpinalHDL\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-01-26 16:21+0000\n"
"PO-Revision-Date: 2024-01-26 17:04+0000\n"
"Last-Translator: Readon <xydarcher@qq.com>\n"
"Language-Team: Chinese (Simplified) <https://hosted.weblate.org/projects/"
"spinaldoc-rtd/spinalhdllibrariespipelineintroduction/zh_Hans/>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Weblate 5.4-dev\n"
"Generated-By: Babel 2.14.0\n"

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:3
msgid "Introduction"
msgstr "简介"

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:5
msgid ""
"spinal.lib.misc.pipeline provides a pipelining API. The main advantages over "
"manual pipelining are :"
msgstr ""
"spinal.lib.misc.pipeline提供了一套流水线API。相对于手动流水线它的主要优点是："

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:7
msgid ""
"You don't have to predefine all the signal elements needed for the entire "
"staged system upfront. You can create and consume stagable signals in a more "
"ad hoc fashion as your design requires - without needing to refactor all the "
"intervening stages to know about the signal"
msgstr ""
"您不必预先准备好整个流水系统中所需的所有信号元素。您可以根据设计需要，以更特"
"别的方式创建和使用可分级的信号，而无需重构所有中间阶段来处理信号"

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:8
msgid ""
"Signals of the pipeline can utilize the powerful parametrization "
"capabilities of SpinalHDL and be subject to optimization/removal if a "
"specific design build does not require a particular parametrized feature, "
"without any need to modify the staging system design or project code base in "
"a significant way."
msgstr ""
"流水线的信号可以利用SpinalHDL的强大参数化能力，并且如果设计构建中不需要特定的"
"参数化特征，则可以进行优化/移除，而不需要以显著的方式修改流水系统设计或项目代"
"码库。"

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:9
msgid ""
"Manual retiming is much easier, as you don't have to handle the registers / "
"arbitration manualy"
msgstr "手动时序调整要容易得多，因为您不必手动处理寄存器/仲裁器"

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:10
msgid "Manage the arbitration by itself"
msgstr "它会自行管理仲裁器"

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:12
msgid "The API is composed of 4 main things :"
msgstr "API由4个主要部分组成："

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:14
msgid "Node : which represents a layer in the pipeline"
msgstr "Node：表示管道中的层"

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:15
msgid "Link : which allows to connect nodes to each other"
msgstr "Link：允许节点相互连接"

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:16
msgid ""
"Builder : which will generate the hardware required for a whole pipeline"
msgstr "Builder：生成整个管道所需的硬件"

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:17
msgid ""
"Payload : which are used to retrieve hardware signals on nodes along the "
"pipeline"
msgstr "Payload：用于获取流水线的节点上的硬件信号"

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:19
msgid ""
"It is important to understand that Payload isn't a hardware data/signal "
"instance, but a key to retrieve a data/signal on nodes along the pipeline, "
"and that the pipeline builder will then automatically interconnect/pipeline "
"every occurrence of a given Payload between nodes."
msgstr ""
"重要的是，Payload不是硬件数据/信号实例，而是用于检索流水线在节点中数据/信号的"
"关键，并且流水线构建器随后将在节点之间的每次给定Payload出现时自动互连/流水"
"线。"

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:21
msgid "Here is an example to illustrate :"
msgstr "以下是一个用于阐述的例子："

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:27
msgid "Here is a video about this API :"
msgstr "以下是关于此API的视频："

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:29
msgid "https://www.youtube.com/watch?v=74h_-FMWWIM"
msgstr "https://www.youtube.com/watch?v=74h_-FMWWIM"

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:32
msgid "Simple example"
msgstr "简单示例"

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:34
msgid "Here is a simple example which only uses the basics of the API :"
msgstr "下面是一个简单的例子，它只使用了基本的API："

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:78
msgid "This will produce the following hardware :"
msgstr "这将产生以下硬件："

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:83
msgid "Here is a simulation wave :"
msgstr "下面是一个仿真波形："

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:105
msgid "Here is the same example but using more of the API :"
msgstr "下面是相同的示例，但使用了更多的API："

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:148
msgid "Payload"
msgstr "Payload"

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:150
msgid ""
"Payload objects are used to refer to data which can go through the pipeline. "
"Technicaly speaking, Payload is a HardType which has a name and is used as a "
"\"key\" to retrieve the signals in a certain pipeline stage."
msgstr ""
"Payload对象用于引用可以通过流水线的数据。从技术上讲，Payload是一个HardType，"
"它有一个名字，并被用作在流水线某个级中检索信号的“键”。"

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:163
msgid ""
"Note that I got used to name the Payload instances using uppercase. This is "
"to make it very explicit that the thing isn't a hardware signal, but are "
"more like a \"key/type\" to access things."
msgstr ""
"请注意，我习惯于使用大写对Payload实例命名。这是为了让它非常明确，这不是一个硬"
"件信号，更像是一个“键/类型”访问的东西。"

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:166
msgid "Node"
msgstr "Node"

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:168
msgid ""
"Node mostly hosts the valid/ready arbitration signals, and the hardware "
"signals required for all the Payload values going through it."
msgstr "Node主要托管有效/就绪仲裁信号，以及所有通过它的硬件信号所需的Payload。"

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:170
msgid "You can access its arbitration via :"
msgstr "您可以通过以下方式访问其仲裁器："

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:177
#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:238
#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:268
#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:390
#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:427
msgid "API"
msgstr "API"

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:178
msgid "Access"
msgstr "访问"

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:179
#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:218
#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:239
#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:269
#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:391
#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:428
msgid "Description"
msgstr "描述"

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:180
msgid "node.valid"
msgstr "node.valid"

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:181
#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:184
#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:187
msgid "RW"
msgstr "RW"

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:182
msgid ""
"Is the signal which specifies if a transaction is present on the node. It is "
"driven by the upstream. Once asserted, it must only be de-asserted the cycle "
"after which either both valid and ready or node.cancel are high. valid must "
"not depend on ready."
msgstr ""
"指定节点上是否存在事务的信号。它是由上游逻辑驱动的。一旦置为1，则它必须且仅能"
"在valid和ready同时置位或node.cancel为高的周期后解除置位。valid不依赖于ready。"

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:183
msgid "node.ready"
msgstr "node.ready"

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:185
msgid ""
"Is the signal which specifies if the node's transaction can proceed "
"downstream. It is driven by the downstream to create backpresure. The signal "
"has no meaning when there is no transaction (node.valid being deasserted)"
msgstr ""
"指定节点的事务是否可以向下游进行的信号。它是由下游驱动以创建反压。当没有事务"
"（node.valid被置0）时，该信号无意义"

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:186
msgid "node.cancel"
msgstr "node.cancel"

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:188
msgid ""
"Is the signal which specifies if the node's transaction in being canceled "
"from the pipeline. It is driven by the downstream. The signal has no meaning "
"when there is no transaction (node.valid being deasserted)"
msgstr ""
"指定节点的事务是否正在从流水线中取消的信号。它由下游驱动。当没有事务时（node."
"valid被置0），该信号没有意义"

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:189
msgid "node.isValid"
msgstr "node.isValid"

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:190
#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:193
#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:196
#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:199
#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:202
#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:207
msgid "RO"
msgstr "RO"

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:191
msgid "node.valid's read only accessor"
msgstr "node.valid的只读访问器"

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:192
msgid "node.isReady"
msgstr "node.isReady"

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:194
msgid "node.ready's read only accessor"
msgstr "node.ready的只读访问器"

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:195
msgid "node.isCancel"
msgstr "node.isCancel"

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:197
msgid "node.cancel's read only accessor"
msgstr "node.cancel的只读访问器"

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:198
msgid "node.isFiring"
msgstr "node.isFiring"

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:200
msgid ""
"True when the node transaction is successfuly moving futher (valid && ready "
"&& !cancel). Useful to commit state changes."
msgstr ""
"当节点事务成功继续进行时为True（valid && ready && !cancel）。用于提交状态更"
"改。"

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:201
msgid "node.isMoving"
msgstr "node.isMoving"

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:203
msgid ""
"True when the node transaction will not be present anymore on the node "
"(starting from the next cycle), either because downstream is ready to take "
"the transaction, or because the transaction is canceled from the pipeline. "
"(valid && (ready || cancel)). Useful to \"reset\" states."
msgstr ""
"当节点事务将不再存在于节点上时（从下一周期开始）为True，要么是因为下游准备好"
"接收事务，要么是因为事务已从流水线中取消。（valid && (ready || cancel)）用"
"于“复位”(reset)状态。"

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:206
msgid "node.isCanceling"
msgstr "node.isCanceling"

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:208
msgid ""
"True when the node transaction is being canceled. Meaning that it will not "
"appear anywhere in the pipeline in future cycles."
msgstr ""
"当节点事务正在被取消时为True。这意味着在将来的周期中它不会出现在流水线中的任"
"何地方。"

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:210
msgid ""
"Note that the node.valid/node.ready signals follows the same conventions "
"than the :doc:`../stream`'s ones ."
msgstr ""
"请注意，node.valid/node.ready信号遵循与 :doc:`../stream` 中相同的规范。"

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:212
msgid ""
"The Node controls (valid/ready/cancel) and status (isValid, isReady, "
"isCancel, isFiring, ...) signals are created on demande. So for instance you "
"can create pipeline with no backpresure by never refering to the ready "
"signal. That's why it is important to use status signals when you want to "
"read the status of something and only use control signals when you to drive "
"something."
msgstr ""
"Node的控制信号（valid/ready/cancel）和状态信号（isValid、isReady、isCancel、"
"isFiring等）是按需创建的。因此，例如，您可以通过永远不引用ready信号来创建没有"
"反压的流水线。这就是在想要读取某物的状态时使用状态信号，仅在想要驱动某物时使"
"用控制信号的重要性所在。"

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:215
msgid ""
"Here is a list of arbitration cases you can have on a node. valid/ready/"
"cancel define the state we are in, while isFiring/isMoving result of those :"
msgstr ""
"以下是节点上可能出现的仲裁情况列表。valid/ready/cancel定义了我们所处的状态，"
"而isFiring/isMoving是这些状态的结果："

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:218
msgid "valid"
msgstr "valid"

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:218
msgid "ready"
msgstr "ready"

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:218
msgid "cancel"
msgstr "cancel"

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:218
msgid "isFiring"
msgstr "isFiring"

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:218
msgid "isMoving"
msgstr "isMoving"

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:220
#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:222
#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:224
#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:226
msgid "0"
msgstr "0"

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:220
#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:226
msgid "X"
msgstr "X"

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:220
msgid "No transaction"
msgstr "无事务"

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:222
#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:224
#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:226
msgid "1"
msgstr "1"

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:222
msgid "Going through"
msgstr "正在进行"

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:224
msgid "Blocked"
msgstr "阻塞"

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:226
msgid "Canceled"
msgstr "取消"

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:230
msgid ""
"Note that if you want to model things like for instance a CPU stage which "
"can block and flush stuff, take a look a the CtrlLink, as it provides the "
"API to do such things."
msgstr ""
"请注意，如果您想要建模诸如CPU级可能的阻塞和刷新的情况，可以查看 CtrlLink，因"
"为它提供了执行此类操作的 API。"

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:232
msgid "You can access signals referenced by a Payload via:"
msgstr "您可以通过以下方式访问由Payload引用的信号："

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:240
msgid "node(Payload)"
msgstr "node(Payload)"

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:241
msgid "Return the corresponding hardware signal"
msgstr "返回对应的硬件信号"

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:242
msgid "node(Payload, Any)"
msgstr "node(Payload, Any)"

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:243
msgid ""
"Same as above, but include a second argument which is used as a \"secondary "
"key\". This eases the construction of multi-lane hardware. For instance, "
"when you have a multi issue CPU pipeline, you can use the lane Int id as "
"secondary key"
msgstr ""
"与上述相同，但包括一个用作“次要键”的第二个参数。这有助于构建多通道硬件。例"
"如，当您有一个多发射CPU流水线时，您可以使用通道Int id作为次要键"

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:244
msgid "node.insert(Data)"
msgstr "node.insert(Data)"

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:245
msgid ""
"Return a new Payload instance which is connected to the given Data hardware "
"signal"
msgstr "返回一个新的Payload实例，该实例连接到给定的Data硬件信号"

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:261
msgid ""
"While you can manualy drive/read the arbitration/data of the first/last "
"stage of your pipeline, there is a few utilities to connect its boundaries."
msgstr ""
"虽然您可以手动驱动/读取流水线的第一个/最后一级的仲裁/数据，但有一些实用工具可"
"以连接其边界。"

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:270
msgid "node.arbitrateFrom(Stream[T]])"
msgstr "node.arbitrateFrom(Stream[T]])"

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:271
msgid "Drive a node arbitration from a stream."
msgstr "由反压流驱动节点仲裁。"

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:272
msgid "node.arbitrateFrom(Flow[T]])"
msgstr "node.arbitrateFrom(Flow[T]])"

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:273
msgid "Drive a node arbitration from the Flow."
msgstr "由数据流驱动节点仲裁。"

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:274
msgid "node.arbitrateTo(Stream[T]])"
msgstr "node.arbitrateTo(Stream[T]])"

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:275
msgid "Drive a stream arbitration from the node."
msgstr "由节点驱动反压流仲裁。"

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:276
msgid "node.arbitrateTo(Flow[T]])"
msgstr "node.arbitrateTo(Flow[T]])"

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:277
msgid "Drive a Flow arbitration from the node."
msgstr "由节点驱动数据流仲裁。"

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:278
msgid "node.driveFrom(Stream[T]])((Node, T) => Unit)"
msgstr "node.driveFrom(Stream[T]])((Node, T) => Unit)"

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:279
msgid ""
"Drive a node from a stream. The provided lambda function can be use to "
"connect the data"
msgstr "由反压流驱动节点。提供的lambda函数可以用于连接数据"

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:280
msgid "node.driveFrom(Flow[T]])((Node, T) => Unit)"
msgstr "node.driveFrom(Flow[T]])((Node, T) => Unit)"

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:281
#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:285
msgid "Same as above but for Flow"
msgstr "与上述类似，但适用于Flow"

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:282
msgid "node.driveTo(Stream[T]])((T, Node) => Unit)"
msgstr "node.driveTo(Stream[T]])((T, Node) => Unit)"

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:283
msgid ""
"Drive a stream from the node. The provided lambda function can be use to "
"connect the data"
msgstr "由节点驱动反压流。提供的lambda函数可以用于连接数据"

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:284
msgid "node.driveTo(Flow[T]])((T, Node) => Unit)"
msgstr "node.driveTo(Flow[T]])((T, Node) => Unit)"

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:305
msgid ""
"In order to reduce verbosity, there is a set of implicit conversions between "
"Payload toward their data representation which can be used when you are in "
"the context of a Node :"
msgstr ""
"为了减少冗长，在Payload与其数据表示之间有一组隐式转换，可在Node下使用："

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:314
msgid "You can also use those implicit conversions by importing them :"
msgstr "您还可以通过导入它们来使用这些隐式转换："

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:327
msgid ""
"There is also an API which alows you to create new Area which provide the "
"whole API of a given node instance (including implicit convertion) without "
"import :"
msgstr ""
"还有一个API，它允许你创建新的Area，这个Area提供了给定节点实例的全部API（包括"
"隐式转换），而无需导入："

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:338
msgid ""
"Such feature is very useful when you have parametrizable pipeline locations "
"for your hardware (see retiming example)."
msgstr ""
"当硬件具有可参数化的流水线位置时，这样的功能非常有用（请参阅重定时示例）。"

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:342
msgid "Links"
msgstr "Links"

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:344
msgid ""
"There is few different Links already implemented (but you could also create "
"your own custom one). The idea of Links is to connect two nodes together in "
"various ways. They generally have a `up` Node and a `down` Node."
msgstr ""
"目前已经实现了一些不同的Links（但您也可以创建自己的自定义Links）。Links的思想"
"是以各种方式将两个节点连接在一起，它们通常有一个 `up` 节点和一个 `down` 节"
"点。"

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:349
msgid "DirectLink"
msgstr "DirectLink"

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:351
msgid "Very simple, it connect two nodes with wires only. Here is an example :"
msgstr "非常简单，它只使用导线连接两个节点。以下是一个示例："

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:361
msgid "StageLink"
msgstr "StageLink"

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:363
msgid ""
"This connect two nodes using registers on the data / valid signals and some "
"arbitration on the ready."
msgstr "这使用data/valid信号上的寄存器和ready信号上的一些仲裁连接了两个节点。"

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:371
msgid "S2mLink"
msgstr "S2mLink"

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:373
msgid ""
"This connect two nodes using registers on the ready signal, which can be "
"useful to improve backpresure combinatorial timings."
msgstr ""
"这使用ready信号上的寄存器连接两个节点，这对于改进反压组合时序非常有用。"

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:380
msgid "CtrlLink"
msgstr "CtrlLink"

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:382
msgid ""
"This is kind of a special Link, as connect two nodes with optional flow "
"control / bypass logic. Its API should be flexible enough to implement a CPU "
"stage with it."
msgstr "这是一种特殊的 Link，用于连接两个节点，具有可选的流量控制/旁路逻辑。它的应用"
"程序接口应该足够灵活，可以用它来实现 CPU 流水级。"

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:384
msgid "Here is its flow control API (The Bool arguments enable the features) :"
msgstr "以下是其流量控制 API（Bool 参数启用了相关功能）："

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:392
msgid "haltWhen(Bool)"
msgstr "haltWhen(Bool)"

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:393
msgid "Allows to block the current transaction (clear up.ready down.valid)"
msgstr "允许阻止当前传输事务（清除 up.ready down.valid）"

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:394
msgid "throwWhen(Bool)"
msgstr "throwWhen(Bool)"

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:395
msgid ""
"Allows to cancel the current transaction from the pipeline (clear down.valid "
"and make the transaction driver forget its current state)"
msgstr "允许从流水线中取消当前事务（清除 down.valid，使事务驱动逻辑忘记其当前状态）"

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:396
msgid "forgetOneWhen(Bool)"
msgstr "forgetOneWhen(Bool)"

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:397
msgid ""
"Allows to request the upstream to forget its current transaction  (but "
"doesn't clear the down.valid)"
msgstr "允许请求上游节点忘记其当前事务（但不会清除 down.valid）"

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:398
msgid "ignoreReadyWhen(Bool)"
msgstr "ignoreReadyWhen(Bool)"

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:399
msgid "Allows to ignore the downstream ready (set up.ready)"
msgstr "允许忽略下游节点ready（设置 up.ready 为1）"

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:400
msgid "duplicateWhen(Bool)"
msgstr "duplicateWhen(Bool)"

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:401
msgid "Allows to duplicate the current transaction (clear up.ready)"
msgstr "允许复制当前传输事务（清零 up.ready）"

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:402
msgid "terminateWhen(Bool)"
msgstr "terminateWhen(Bool)"

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:403
msgid ""
"Allows to hide the current transaction from downstream (clear down.valid)"
msgstr "允许下游节点隐藏当前传输事务（清零 down.valid）"

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:405
msgid ""
"Also note that if you want to do flow control in a conditional scope (ex in "
"a when statement), you can call the following functions :"
msgstr "还要注意的是，如果要在条件作用域（例如在 when 语句中）进行通信流控制，"
"可以调用以下函数 ："

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:407
msgid ""
"haltIt(), duplicateIt(), terminateIt(), forgetOneNow(), ignoreReadyNow(), "
"throwIt()"
msgstr ""
"haltIt(), duplicateIt(), terminateIt(), forgetOneNow(), ignoreReadyNow(), "
"throwIt()"

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:419
msgid ""
"You can retrieve which nodes are connected to the Link using node.up / node."
"down."
msgstr "您可以使用 node.up / node.down 查看哪些节点连接到了链接。"

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:421
msgid "The CtrlLink also provide an API to access Payload :"
msgstr "CtrlLink 还提供了访问Payload的 API："

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:429
msgid "link(Payload)"
msgstr "link(Payload)"

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:430
msgid "Same as Link.down(Payload)"
msgstr "与 Link.down(Payload) 相同"

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:431
msgid "link(Payload, Any)"
msgstr "link(Payload, Any)"

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:432
msgid "Same as Link.down(Payload, Any)"
msgstr "与 Link.down(Payload, Any) 相同"

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:433
msgid "link.insert(Data)"
msgstr "link.insert(Data)"

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:434
msgid "Same as Link.down.insert(Data)"
msgstr "与 Link.down.insert(Data) 相同"

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:435
msgid "link.bypass(Payload)"
msgstr "link.bypass(Payload)"

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:436
msgid ""
"Allows to conditionaly override a Payload value between link.up -> link."
"down. This can be used to fix data hazard in CPU pipelines for instance."
msgstr "允许在 link.up -> link.down 之间有条件地覆盖 Payload 值。例如，这可用于修复 "
"CPU 流水线中的数据冲突。"

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:455
msgid ""
"Note that if you create a CtrlLink without node arguments, it will create "
"its own nodes internally."
msgstr "请注意，如果创建的 CtrlLink 不带节点参数，它将在内部创建自己的节点。"

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:466
msgid "Other Links"
msgstr "其他链接"

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:468
msgid "There is also a JoinLink / ForkLink implemented."
msgstr "此外，还实现了 JoinLink / ForkLink。"

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:471
msgid "Your custom Link"
msgstr "您的自定义链接"

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:473
msgid ""
"You can implement your custom links by implementing the Link base class."
msgstr "您可以通过实现 Link 基类来实现自定义链接。"

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:486
msgid "But that API may change a bit, as it is still fresh."
msgstr "不过，由于 API 还很新，后面可能会有一些变化。"

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:489
msgid "Builder"
msgstr "Builder"

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:491
msgid ""
"To generate the hardware of your pipeline, you need to give a list of all "
"the Links used in your pipeline."
msgstr "要生成流水线硬件，您需要提供流水线中使用的所有链接列表。"

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:506
msgid ""
"There is also a set of \"all in one\" builders that you can instanciate to "
"help yourself."
msgstr "此外，还有一套 \"一体化 \"的构建工具，您可以利用它来帮助你自己。"

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:508
msgid ""
"For instance there is the NodesBuilder class which can be used to create "
"sequentially staged pipelines :"
msgstr "例如，有一个 NodesBuilder 类，可用于创建按顺序分级的流水线："

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:521
msgid "Composability"
msgstr "组合能力（Composability）"

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:523
msgid ""
"One good thing about the API is that it easily allows to compose a pipeline "
"with multiple parallel things. What i mean by \"compose\" is that sometime "
"the pipeline you need to design has parallel processing to do."
msgstr "该API的一个优点是，它可以轻松地将多个并行事物组成一个流水线。这里的 \"组成 "
"\"是指有时你设计的流水线需要进行并行处理。"

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:525
msgid ""
"Imagine you need to do floating point multiplication on 4 pairs of numbers "
"(to later sum them). If those 4 pairs a provided at the same time by a "
"single stream of data, then you don't want 4 different pipelines to multiply "
"them, instead you want to process them all in parallel in the same pipeline."
msgstr ""
"试想一下，如果您需要对 4 对数字进行浮点乘法运算（稍后求和）。并且这 4 "
"对数字是由一个数据流同时提供的，那么就不需要 4 "
"条不同的流水线来进行乘法运算，而需要在同一条流水线上并行处理。"

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:527
msgid ""
"The example below show a pattern which composes a pipeline with multiple "
"lanes to process them in parallel."
msgstr "下面的示例展示了一种模式，它将多个通道组成一个流水线，来并行处理它们。"

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:571
msgid ""
"This will produce the following data path (assuming lanesCount = 2), "
"abitration not being shown :"
msgstr "这将产生以下数据路径（假设 lanesCount = 2），仲裁器没有显示："

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:578
msgid "Retiming / Variable lenth"
msgstr "重定时/可变长度"

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:580
msgid ""
"Sometime you want to design a pipeline, but you don't really know where the "
"critical paths will be and what the right balance between stages is. And "
"often you can't rely on the synthesis tool doing a good job with automatic "
"retiming."
msgstr "有时，你想设计一个流水线，但你并不真正知道关键路径在哪里，也不知道各阶段之间"
"如何平衡。而且通常情况下，你无法依赖综合工具做好自动重定时工作。"

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:582
msgid ""
"So, you kind of need a easy way to move the logic of your pipeline around."
msgstr "因此，你需要一种简单的方法来构建流水线逻辑。"

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:584
msgid "Here is how it can be done with this pipelining API :"
msgstr "下面介绍如何使用此流水线 API："

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:646
msgid "If then you generate this component like this :"
msgstr "如果像这样生成该组件："

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:659
msgid ""
"You will get a 4 stages separated by 3 layer of flip flop doing your "
"processing :"
msgstr "您将获得由 3 层寄存器（flip flop）分隔的 4 个处理阶段："

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:664
msgid ""
"Note the generated hardware verilog is kinda clean (by my standards at "
"least :P) :"
msgstr "请注意，生成的硬件 verilog 还算干净（至少按我的标准来说是这样 :P）："

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:779
msgid ""
"Also, you can easily tweak how many stages and where you want the processing "
"to be done, for instance you may want to move the inversion hardware in the "
"same stage as the adder. This can be done the following way :"
msgstr "此外，您还可以轻松调整处理的级数和位置，例如，您可能希望将翻转的硬件逻辑移到"
"与加法器相同级上。具体方法如下："

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:793
msgid "Then you may want to remove the output register stage :"
msgstr "那么您可能需要移除输出寄存器级："

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:809
msgid "Simple CPU example"
msgstr "简单的CPU示例"

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:811
msgid "Here is a simple/stupid 8 bits CPU example with :"
msgstr "下面是一个简单的 8 位 CPU 示例："

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:813
msgid "3 stages (fetch, decode, execute)"
msgstr "三级流水线（fetch, decode, execute）"

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:814
msgid "embedded fetch memory"
msgstr "嵌入的获取存储器"

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:815
msgid "add / jump / led /delay instructions"
msgstr "add / jump / led /delay 指令"

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:886
msgid ""
"Here is a simple testbench which implement a loop which will make the led "
"counting up."
msgstr "下面是一个简单的测试平台，它实现了一个循环，使 led 计数值上升。"
