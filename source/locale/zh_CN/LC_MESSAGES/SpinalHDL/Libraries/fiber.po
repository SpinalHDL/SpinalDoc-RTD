msgid ""
msgstr ""
"Project-Id-Version: SpinalHDLReport-Msgid-Bugs-To:POT-Creation-Date:2023-12-"
"01 11:48+0800PO-Revision-Date:YEAR-MO-DA HO:MI+ZONELast-Translator:FULL NAME "
"<EMAIL@ADDRESS>Language:zh_CNLanguage-Team:zh_CN <LL@li.org>Plural-"
"Forms:nplurals=1; plural=0;MIME-Version:1.0Content-Type:text/plain; "
"charset=UTF-8\n"
"Report-Msgid-Bugs-To: EMAIL@ADDRESSPOT-Creation-Date:2023-12-02 00:23+0800PO-"
"Revision-Date:YEAR-MO-DA HO:MI+ZONELast-Translator:FULL NAME <EMAIL@ADDRESS"
">Language-Team:LANGUAGE <LL@li.org>MIME-Version:1.0Content-Type:text/plain; "
"charset=UTF-8\n"
"PO-Revision-Date: 2024-01-12 04:06+0000\n"
"Last-Translator: tsy0123 <675526215@qq.com>\n"
"Language-Team: Chinese (Simplified) <https://hosted.weblate.org/projects/"
"spinaldoc-rtd/spinalhdllibrariesfiber/zh_Hans/>\n"
"Language: zh_CN\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bitGenerated-By:Babel 2.13.1\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Weblate 5.4-dev\n"

#: ../../SpinalHDL/Libraries/fiber.rst:7
msgid "Fiber framework"
msgstr "纤程框架"

#: ../../SpinalHDL/Libraries/fiber.rst:10
msgid ""
"This framework is not expected to be used for general RTL generation and "
"targets large system design management and code generation. It is currently "
"used as toplevel integration tool in SaxonSoC."
msgstr "该框架设计目标不是用于一般 RTL 生成，而是针对大型系统设计管理和代码生成。"
"它目前在 SaxonSoC 中用作顶级集成工具。"

#: ../../SpinalHDL/Libraries/fiber.rst:13
msgid "Currently in developpement."
msgstr "目前正在开发中。"

#: ../../SpinalHDL/Libraries/fiber.rst:15
msgid ""
"The Fiber to run the hardware elaboration in a out of order manner, a bit "
"similarly to Makefile, where you can define rules and dependencies which "
"will then be solved when you run a make command. It is very similar to the "
"Scala Future feature."
msgstr ""
"纤程(Fiber)以乱序的方式运行硬件生成，有点类似于Makefile，您可以在其中定义规则"
"和依赖关系，然后在运行make命令时解决这些依赖关系。这与Scala "
"Future功能非常相似。"

#: ../../SpinalHDL/Libraries/fiber.rst:17
msgid ""
"Using this framework can complicate simple things but provide some strong "
"features for complex cases :"
msgstr "使用这个框架可能会使简单的事情复杂化，但为复杂的情况提供了一些强大的功能："

#: ../../SpinalHDL/Libraries/fiber.rst:19
msgid ""
"You can define things before even knowing all their requirements, ex : "
"instantiating a interruption controller, before knowing how many interrupt "
"signal lines you need"
msgstr "您甚至可以在知道所有要求之前就定义事物，例如：在知道需要多少中断信号线之前实"
"例化中断控制器"

#: ../../SpinalHDL/Libraries/fiber.rst:21
msgid ""
"Abstract/lazy/partial SoC architecture definition allowing the creation of "
"SoC template for further specialisations"
msgstr "抽象/懒惰化/部分化SoC架构定义，允许创建SoC模板以供进一步专门化"

#: ../../SpinalHDL/Libraries/fiber.rst:22
msgid ""
"Automatic requirement negotiation between multiple agents in a decentralized"
" way, ex : between masters and slaves of a memory bus"
msgstr "以分散方式在多个代理之间自动进行需求协商，例如：内存总线的主设备和从设备之间"

#: ../../SpinalHDL/Libraries/fiber.rst:24
msgid "The framework is mainly composed of :"
msgstr "该框架主要由以下部分组成："

#: ../../SpinalHDL/Libraries/fiber.rst:26
msgid "``Handle[T]``, which can be used later to store a value of type ``T``."
msgstr "``Handle[T]``，稍后可用于存储 ``T`` 类型的值。"

#: ../../SpinalHDL/Libraries/fiber.rst:27
msgid ""
"``handle.load`` which allow to set the value of a handle (will reschedule "
"all tasks waiting on it)"
msgstr "``handle.load`` 允许设置句柄的值（将启动等待它的所有任务）"

#: ../../SpinalHDL/Libraries/fiber.rst:28
msgid ""
"``handle.get``, which return the value of the given handle. Will block the "
"task execution if that handle isn't loaded yet"
msgstr "``handle.get``，返回给定句柄的值。如果尚未加载该句柄，将阻止任务执行进入等待"

#: ../../SpinalHDL/Libraries/fiber.rst:29
msgid ""
"``Handle{ /*code*/ }``, which fork a new task which will execute the given "
"code. The result of that code will be loaded into the Handle"
msgstr "``Handle{ /*code*/ "
"}``，它派生一个新任务来执行给定的代码。该代码的结果将被加载到句柄中"

#: ../../SpinalHDL/Libraries/fiber.rst:30
msgid ""
"``soon(handle)``, which allows the current task to announce that it will "
"load ``handle`` with a value (used for scheduling)"
msgstr "``soon(handle)``，允许当前任务宣称它将加载 一个 ``handle`` 句柄（用于调度）"

#: ../../SpinalHDL/Libraries/fiber.rst:34
msgid "Simple dummy example"
msgstr "简单的示例"

#: ../../SpinalHDL/Libraries/fiber.rst:36
msgid "There is a simple example :"
msgstr "这是一个简单的例子："

#: ../../SpinalHDL/Libraries/fiber.rst:59
msgid "Its runtime will be :"
msgstr "它的运行步骤会是："

#: ../../SpinalHDL/Libraries/fiber.rst:61
msgid "create a and b"
msgstr "创建a和b"

#: ../../SpinalHDL/Libraries/fiber.rst:62
msgid "fork the calculator task, but is blocked when executing a.get"
msgstr "创建计算器任务分支，但在执行a.get时被阻塞"

#: ../../SpinalHDL/Libraries/fiber.rst:63
msgid "fork the printer task, but is blocked when executing calculator.get"
msgstr "创建打印任务分支，但在执行calculator.get时被阻塞"

#: ../../SpinalHDL/Libraries/fiber.rst:64
msgid ""
"load a and b, which reschedule the calculator task (as it was waiting on a)"
msgstr "加载a和b，这会重新调度计算器任务（因为它正在等待 a）"

#: ../../SpinalHDL/Libraries/fiber.rst:65
msgid ""
"calculator do its a + b sum, and load its Handle with that result, which "
"reschedule the printer task"
msgstr "计算器执行a+b求和操作，并将结果加载到其句柄，这将重新调度打印任务"

#: ../../SpinalHDL/Libraries/fiber.rst:66
msgid "printer task print its stuff"
msgstr "打印任务打印其结果"

#: ../../SpinalHDL/Libraries/fiber.rst:67
msgid "everything done"
msgstr "完成所有任务"

#: ../../SpinalHDL/Libraries/fiber.rst:70
msgid ""
"So, the main point of that example is to show that we kind of overcome the "
"sequential execution of things, as a and b are loaded after the definition "
"of the calculator."
msgstr "因此，该示例的要点是表明我们在某种程度上克服了顺序执行，因为a和b可以在计算器"
"定义之后被加载。"

#: ../../SpinalHDL/Libraries/fiber.rst:74
msgid "Handle[T]"
msgstr "Handle[T]"

#: ../../SpinalHDL/Libraries/fiber.rst:76
msgid ""
"Handle[T] are a bit like scala's Future[T], they allow to talk about "
"something before it is even existing, and wait on it."
msgstr "Handle[T]有点像scala的Future[T]，它们允许在某个对象存在之前就谈及它，并等待它"
"。"

#: ../../SpinalHDL/Libraries/fiber.rst:87
msgid "soon(handle)"
msgstr "soon(handle)"

#: ../../SpinalHDL/Libraries/fiber.rst:89
msgid ""
"In order to maintain a proper graph of dependencies between tasks and "
"Handle, a task can specify in advance that it will load a given handle. This"
" is very usefull in case of a generation starvation/deadlock for SpinalHDL "
"to report accuratly where is the issue."
msgstr ""
"为了维护任务和句柄之间正确的依赖关系图，任务可以预先指明它将加载给定的句柄。"
"在生成饥饿(starvation)/死锁的情况下非常有用，以便SpinalHDL准确报告问题所在。"
