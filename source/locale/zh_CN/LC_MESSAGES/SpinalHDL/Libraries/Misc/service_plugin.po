# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018 - 2024, SpinalHDL
# This file is distributed under the same license as the SpinalHDL package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
#
msgid ""
msgstr ""
"Project-Id-Version: SpinalHDL\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-01-22 03:53+0000\n"
"PO-Revision-Date: 2024-01-23 07:01+0000\n"
"Last-Translator: tsy0123 <675526215@qq.com>\n"
"Language-Team: Chinese (Simplified) <https://hosted.weblate.org/projects/"
"spinaldoc-rtd/spinalhdllibrariesmiscservice_plugin/zh_Hans/>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Weblate 5.4-dev\n"
"Generated-By: Babel 2.14.0\n"

#: ../../SpinalHDL/Libraries/Misc/service_plugin.rst:5
msgid "Plugin"
msgstr "插件"

#: ../../SpinalHDL/Libraries/Misc/service_plugin.rst:8
msgid "Introduction"
msgstr "简介"

#: ../../SpinalHDL/Libraries/Misc/service_plugin.rst:10
msgid ""
"For some design, instead of implementing your Component's hardware directly "
"in it, you may instead want to compose its hardware by using some sorts of "
"Plugins. This can provide a few key features :"
msgstr "对于某些设计，您可能希望通过使用某种插件来组合组件的硬件，而不是直接在组件中"
"实现硬件。这可以提供一些关键特性："

#: ../../SpinalHDL/Libraries/Misc/service_plugin.rst:13
msgid ""
"You can extend the features of your component by adding new plugins in its "
"parameters. For instance adding Floating point support in a CPU."
msgstr "您可以通过在组件的参数中添加新的插件来扩展组件的功能。例如，在CPU中添加浮点支"
"持。"

#: ../../SpinalHDL/Libraries/Misc/service_plugin.rst:14
msgid ""
"You can swap various implementations of the same functionality just by using "
"another set of plugins. For instance one implementation of a CPU multiplier "
"may fit well on some FPGA, while others may fit well on ASIC."
msgstr ""
"您可以通过使用另一组插件来轻松切换相同功能的各种实现。例如，某个CPU乘法器的实"
"现可能在某些FPGA上表现良好，而其他实现可能在ASIC上表现良好。"

#: ../../SpinalHDL/Libraries/Misc/service_plugin.rst:15
msgid ""
"It avoid the very very very large hand written toplevel syndrom where "
"everything has to be connected manualy. Instead plugins can discover their "
"neighborhood by looking/using the software interface of other plugins."
msgstr "它避免了非常非常庞大的手写顶层结构，其中一切都必须手动连接的情况。相反，插件"
"可以通过查看/使用其他插件的软件接口来发现它们的关联关系。"

#: ../../SpinalHDL/Libraries/Misc/service_plugin.rst:17
msgid ""
"VexRiscv and NaxRiscv projects are an example of this. Their are CPUs which "
"have a mostly empty toplevel, and their hardware parts are injected using "
"plugins. For instance :"
msgstr "VexRiscv和NaxRiscv项目就是这方面的例子。它们是具有大部分是空白的顶层的CPU，其"
"硬件部分通过插件注入。例如："

#: ../../SpinalHDL/Libraries/Misc/service_plugin.rst:20
msgid "PcPlugin"
msgstr "PcPlugin"

#: ../../SpinalHDL/Libraries/Misc/service_plugin.rst:21
msgid "FetchPlugin"
msgstr "FetchPlugin"

#: ../../SpinalHDL/Libraries/Misc/service_plugin.rst:22
msgid "DecoderPlugin"
msgstr "DecoderPlugin"

#: ../../SpinalHDL/Libraries/Misc/service_plugin.rst:23
msgid "RegFilePlugin"
msgstr "RegFilePlugin"

#: ../../SpinalHDL/Libraries/Misc/service_plugin.rst:24
msgid "IntAluPlugin"
msgstr "IntAluPlugin"

#: ../../SpinalHDL/Libraries/Misc/service_plugin.rst:25
msgid "..."
msgstr "..."

#: ../../SpinalHDL/Libraries/Misc/service_plugin.rst:27
msgid ""
"And those plugins will then negociate/propagate/interconnect to each others "
"via their pool of services."
msgstr "这些插件将通过他们的服务池进行协调/传递/互连。"

#: ../../SpinalHDL/Libraries/Misc/service_plugin.rst:29
msgid ""
"While VexRiscv use a strict synchronous 2 phase system (setup/build "
"callback), NaxRiscv uses a more flexible approach which uses the spinal.core."
"fiber API to fork elaboration threads which can interlock each others in "
"order to ensure a workable elaboration ordering."
msgstr ""
"虽然VexRiscv使用严格的同步二阶段系统（设置(setup)/构建(build)回调(callback)）"
"，但NaxRiscv采用了一种更灵活的方法，使用spinal.core.fiber "
"API来分叉实例化线程，这些线程可以联锁，以确保可行的实例化顺序。"

#: ../../SpinalHDL/Libraries/Misc/service_plugin.rst:31
msgid ""
"The Plugin API provide a NaxRiscv like system to define composable "
"components using plugins."
msgstr "插件API(Plugin API)提供了一个类似NaxRiscv的系统来定义使用插件的可组合组件。"

#: ../../SpinalHDL/Libraries/Misc/service_plugin.rst:34
msgid "Execution order"
msgstr "执行顺序"

#: ../../SpinalHDL/Libraries/Misc/service_plugin.rst:36
msgid "The main idea is that you have multiple 2 executions phases :"
msgstr "主要思想是您有多个2执行环节："

#: ../../SpinalHDL/Libraries/Misc/service_plugin.rst:38
msgid ""
"Setup phase, in which plugins can lock/retain each others. The idea is not "
"to start negociation / elaboration yet."
msgstr "设置(Setup)环节，在此环节插件可以联锁/保留。其目的并非开始协调/实例化。"

#: ../../SpinalHDL/Libraries/Misc/service_plugin.rst:39
msgid "Build phase, in which plugins can negociation / elaboration hardware."
msgstr "构建(Build)环节，在此环节插件可以协调/实例化硬件。"

#: ../../SpinalHDL/Libraries/Misc/service_plugin.rst:41
msgid ""
"The build phase will not start before all FiberPlugin are done with their "
"setup phase."
msgstr "构建环节将不会在所有FiberPlugin完成其设置环节前启动。"

#: ../../SpinalHDL/Libraries/Misc/service_plugin.rst:61
msgid "Simple example"
msgstr "简单示例"

#: ../../SpinalHDL/Libraries/Misc/service_plugin.rst:63
msgid ""
"Here is a simple dummy example with a SubComponent which will be composed "
"using 2 plugins :"
msgstr "这是一个简单的虚设示例，其中包含一个将使用两个插件组合的SubComponent："

#: ../../SpinalHDL/Libraries/Misc/service_plugin.rst:102
msgid "Such TopLevel would generate the following Verilog code :"
msgstr "该TopLevel会生成以下Verilog代码："

#: ../../SpinalHDL/Libraries/Misc/service_plugin.rst:131
msgid ""
"Note each \"during build\" fork an elaboration thread, the DriverPlugin."
"logic thread execution will be blocked on the \"sp\" evaluation until the "
"StatePlugin.logic execution is done."
msgstr ""
"请注意，每次在“构建期间”分叉一个实例化线程时，DriverPlugin."
"logic线程的执行将在“sp”评估上被阻塞，直到StatePlugin.logic执行完成。"

#: ../../SpinalHDL/Libraries/Misc/service_plugin.rst:135
msgid "Interlocking / Ordering"
msgstr "联锁/排序"

#: ../../SpinalHDL/Libraries/Misc/service_plugin.rst:137
msgid ""
"Plugins can interlock each others using Retainer instances. Each plugin "
"instance has a built in lock which can be controlled using retain/release "
"functions."
msgstr "插件可以通过Retainer实例相互联锁。每个插件实例都有一个内置锁，可以通过retain/"
"release函数进行控制。"

#: ../../SpinalHDL/Libraries/Misc/service_plugin.rst:140
msgid ""
"Here is an example based on the above `Simple example` but that time, the "
"DriverPlugin will increment the StatePlugin.logic.signal by an amount set by "
"other plugins (SetupPlugin in our case). And to ensure that the DriverPlugin "
"doesn't generate the hardware too early, the SetupPlugin uses the "
"DriverPlugin.retain/release functions."
msgstr ""
"这是一个基于上面的 `简单示例` 的例子，但这次，DriverPlugin将通过由其他插件（"
"在我们的例子中是SetupPlugin）设置的数量对StatePlugin.logic."
"signal递增。为了确保DriverPlugin不会过早生成硬件，SetupPlugin使用DriverPlugin"
".retain/release函数。"

#: ../../SpinalHDL/Libraries/Misc/service_plugin.rst:207
msgid "Here is the generated verilog"
msgstr "这是生成的verilog"

#: ../../SpinalHDL/Libraries/Misc/service_plugin.rst:236
msgid ""
"Clearly, those examples are overkilled for what they do, the idea in general "
"is more about :"
msgstr "显然，这些示例对于它们的功能来说有些过度，总体上的思路更多地是："

#: ../../SpinalHDL/Libraries/Misc/service_plugin.rst:238
msgid "Negociate / create interfaces between plugins (ex jump / flush ports)"
msgstr "协调/创建插件之间的接口（例如跳转(jump)/刷新(flush)端口）"

#: ../../SpinalHDL/Libraries/Misc/service_plugin.rst:239
msgid "Schedule the elaboration (ex decode / dispatch specification)"
msgstr "安排实例化（例如解码/调度规范）"

#: ../../SpinalHDL/Libraries/Misc/service_plugin.rst:240
msgid "Provide a distributed framework which can scale up (minimal hardcoding)"
msgstr "提供一个可扩展的分布式框架（最小硬编码）"
