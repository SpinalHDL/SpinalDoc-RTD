msgid ""
msgstr ""
"Project-Id-Version: SpinalHDLReport-Msgid-Bugs-To:POT-Creation-Date:2023-12-"
"01 11:48+0800PO-Revision-Date:YEAR-MO-DA HO:MI+ZONELast-Translator:FULL NAME "
"<EMAIL@ADDRESS>Language:zh_CNLanguage-Team:zh_CN <LL@li.org>Plural-"
"Forms:nplurals=1; plural=0;MIME-Version:1.0Content-Type:text/plain; "
"charset=UTF-8\n"
"Report-Msgid-Bugs-To: EMAIL@ADDRESSPOT-Creation-Date:2023-12-02 00:23+0800PO-"
"Revision-Date:YEAR-MO-DA HO:MI+ZONELast-Translator:FULL NAME <EMAIL@ADDRESS"
">Language-Team:LANGUAGE <LL@li.org>MIME-Version:1.0Content-Type:text/plain; "
"charset=UTF-8\n"
"POT-Creation-Date: 2024-01-26 16:21+0000\n"
"PO-Revision-Date: 2024-01-26 17:04+0000\n"
"Last-Translator: Readon <xydarcher@qq.com>\n"
"Language-Team: Chinese (Simplified) <https://hosted.weblate.org/projects/"
"spinaldoc-rtd/spinalhdlstructuringclock_domain/zh_Hans/>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Weblate 5.4-dev\n"
"Generated-By: Babel 2.14.0\n"

#: ../../SpinalHDL/Structuring/clock_domain.rst:4
msgid "Clock domains"
msgstr "时钟域"

#: ../../SpinalHDL/Structuring/clock_domain.rst:7
msgid "Introduction"
msgstr "简介"

#: ../../SpinalHDL/Structuring/clock_domain.rst:9
msgid ""
"In SpinalHDL, clock and reset signals can be combined to create a **clock"
" domain**. Clock domains can be applied to some areas of the design and "
"then all synchronous elements instantiated into those areas will then "
"**implicitly** use this clock domain."
msgstr ""
"在 SpinalHDL "
"中，时钟和复位信号可以组合起来创建**时钟域**。时钟域可以应用于设计的某些区域，然后实例化到这些区域中的所有同步元件将**隐式**使用该时钟域。"

#: ../../SpinalHDL/Structuring/clock_domain.rst:11
msgid ""
"Clock domain application works like a stack, which means that if you are "
"in a given clock domain you can still apply another clock domain locally."
msgstr "时钟域的应用方式类似于堆栈，这意味着当您的设计位于给定时钟域中，您仍然可以将该设计应用到另一个时钟域。"

#: ../../SpinalHDL/Structuring/clock_domain.rst:13
msgid ""
"Please note that a register captures its clock domain when the register "
"is created, not when it is assigned. So please make sure to create them "
"inside the desired ``ClockingArea``."
msgstr "请注意，寄存器在创建时捕获其时钟域，而不是在赋值时捕获。因此，请确保在所需的 ``ClockingArea`` 内创建它们。"

#: ../../SpinalHDL/Structuring/clock_domain.rst:18
msgid "Instantiation"
msgstr "实例化"

#: ../../SpinalHDL/Structuring/clock_domain.rst:20
msgid "The syntax to define a clock domain is as follows (using EBNF syntax):"
msgstr "定义时钟域的语法如下（使用EBNF语法）："

#: ../../SpinalHDL/Structuring/clock_domain.rst:33
msgid "This definition takes five parameters:"
msgstr "这个定义有五个参数："

#: ../../SpinalHDL/Structuring/clock_domain.rst:39
#: ../../SpinalHDL/Structuring/clock_domain.rst:196
msgid "Argument"
msgstr "参数"

#: ../../SpinalHDL/Structuring/clock_domain.rst:40
#: ../../SpinalHDL/Structuring/clock_domain.rst:197
#: ../../SpinalHDL/Structuring/clock_domain.rst:338
msgid "Description"
msgstr "描述"

#: ../../SpinalHDL/Structuring/clock_domain.rst:41
#: ../../SpinalHDL/Structuring/clock_domain.rst:198
msgid "Default"
msgstr "默认值"

#: ../../SpinalHDL/Structuring/clock_domain.rst:42
msgid "``clock``"
msgstr "``clock``"

#: ../../SpinalHDL/Structuring/clock_domain.rst:43
msgid "Clock signal that defines the domain"
msgstr "定义时钟域中的时钟信号"

#: ../../SpinalHDL/Structuring/clock_domain.rst:45
msgid "``reset``"
msgstr "``reset``"

#: ../../SpinalHDL/Structuring/clock_domain.rst:46
msgid ""
"Reset signal. If a register exists which needs a reset and the clock "
"domain doesn't provide one, an error message will be displayed"
msgstr "复位信号。如果存在需要复位的寄存器，而时钟域没有提供复位，则会显示错误消息"

#: ../../SpinalHDL/Structuring/clock_domain.rst:47
#: ../../SpinalHDL/Structuring/clock_domain.rst:50
#: ../../SpinalHDL/Structuring/clock_domain.rst:53
msgid "null"
msgstr "null"

#: ../../SpinalHDL/Structuring/clock_domain.rst:48
msgid "``softReset``"
msgstr "``softReset``"

#: ../../SpinalHDL/Structuring/clock_domain.rst:49
msgid "Reset which infers an additional synchronous reset"
msgstr "复位意味着额外的同步复位"

#: ../../SpinalHDL/Structuring/clock_domain.rst:51
msgid "``clockEnable``"
msgstr "``clockEnable``"

#: ../../SpinalHDL/Structuring/clock_domain.rst:52
msgid ""
"The goal of this signal is to disable the clock on the whole clock domain"
" without having to manually implement that on each synchronous element"
msgstr "该信号的目标是禁用整个时钟域上的时钟，而无需在每个同步元件上手动实现"

#: ../../SpinalHDL/Structuring/clock_domain.rst:54
#: ../../SpinalHDL/Structuring/clock_domain.rst:214
msgid "``frequency``"
msgstr "``frequency``"

#: ../../SpinalHDL/Structuring/clock_domain.rst:55
msgid ""
"Allows you to specify the frequency of the given clock domain and later "
"read it in your design. This parameter does not generate and PLL or other"
" hardware to control the frequency"
msgstr "允许您指定给定时钟域的频率，然后在您的设计中读取它。该参数不生成PLL或其他硬件来控制频率"

#: ../../SpinalHDL/Structuring/clock_domain.rst:57
#: ../../SpinalHDL/Structuring/clock_domain.rst:216
msgid "UnknownFrequency"
msgstr "UnknownFrequency"

#: ../../SpinalHDL/Structuring/clock_domain.rst:58
#: ../../SpinalHDL/Structuring/clock_domain.rst:202
msgid "``config``"
msgstr "``config``"

#: ../../SpinalHDL/Structuring/clock_domain.rst:59
msgid "Specify the polarity of signals and the nature of the reset"
msgstr "指定信号的极性和复位的性质"

#: ../../SpinalHDL/Structuring/clock_domain.rst:60
#: ../../SpinalHDL/Structuring/clock_domain.rst:204
msgid "Current config"
msgstr "当前配置"

#: ../../SpinalHDL/Structuring/clock_domain.rst:63
msgid ""
"An applied example to define a specific clock domain within the design is"
" as follows:"
msgstr "在设计中定义具有指定属性时钟域的示例如下："

#: ../../SpinalHDL/Structuring/clock_domain.rst:78
msgid ""
"When an `Area` is not needed, it is also possible to apply the clock "
"domain directly. Two syntaxes exist:"
msgstr "当不需要 `Area` 时，也可以直接应用时钟域。存在两种语法："

#: ../../SpinalHDL/Structuring/clock_domain.rst:105
msgid "Configuration"
msgstr "配置"

#: ../../SpinalHDL/Structuring/clock_domain.rst:107
msgid ""
"In addition to :ref:`constructor parameters "
"<clock_domain_instantiation>`\\ , the following elements of each clock "
"domain are configurable via a ``ClockDomainConfig``\\ class:"
msgstr ""
"除了 :ref:`构造函数参数 <clock_domain_instantiation>`\\ 之外，每个时钟域的以下元素都可以通过 "
"``ClockDomainConfig``\\ 类进行配置："

#: ../../SpinalHDL/Structuring/clock_domain.rst:113
msgid "Property"
msgstr "属性"

#: ../../SpinalHDL/Structuring/clock_domain.rst:114
msgid "Valid values"
msgstr "有效值"

#: ../../SpinalHDL/Structuring/clock_domain.rst:115
msgid "``clockEdge``"
msgstr "``clockEdge``"

#: ../../SpinalHDL/Structuring/clock_domain.rst:116
msgid "``RISING``\\ , ``FALLING``"
msgstr "``RISING``\\ , ``FALLING``"

#: ../../SpinalHDL/Structuring/clock_domain.rst:117
msgid "``resetKind``"
msgstr "``resetKind``"

#: ../../SpinalHDL/Structuring/clock_domain.rst:118
msgid ""
"``ASYNC``\\ , ``SYNC``\\ , and ``BOOT`` which is supported by some FPGAs "
"(where FF values are loaded by the bitstream)"
msgstr "某些 FPGA 支持的 ``ASYNC``\\ 、 ``SYNC``\\ 和 ``BOOT`` （其中 FF 值由比特流加载）"

#: ../../SpinalHDL/Structuring/clock_domain.rst:119
msgid "``resetActiveLevel``"
msgstr "``resetActiveLevel``"

#: ../../SpinalHDL/Structuring/clock_domain.rst:120
#: ../../SpinalHDL/Structuring/clock_domain.rst:122
#: ../../SpinalHDL/Structuring/clock_domain.rst:124
msgid "``HIGH``\\ , ``LOW``"
msgstr "``HIGH``\\ , ``LOW``"

#: ../../SpinalHDL/Structuring/clock_domain.rst:121
msgid "``softResetActiveLevel``"
msgstr "``softResetActiveLevel``"

#: ../../SpinalHDL/Structuring/clock_domain.rst:123
msgid "``clockEnableActiveLevel``"
msgstr "``clockEnableActiveLevel``"

#: ../../SpinalHDL/Structuring/clock_domain.rst:157
msgid ""
"By default, a ``ClockDomain`` is applied to the whole design. The "
"configuration of this default domain is:"
msgstr "默认情况下， ``ClockDomain`` 应用于整个设计。该默认域的配置为："

#: ../../SpinalHDL/Structuring/clock_domain.rst:160
msgid "Clock : rising edge"
msgstr "Clock：上升沿"

#: ../../SpinalHDL/Structuring/clock_domain.rst:161
msgid "Reset : asynchronous, active high"
msgstr "Reset ：异步，高电平有效"

#: ../../SpinalHDL/Structuring/clock_domain.rst:162
msgid "No clock enable"
msgstr "无时钟使能"

#: ../../SpinalHDL/Structuring/clock_domain.rst:164
msgid "This corresponds to the following ``ClockDomainConfig``:"
msgstr "这对应于以下 ``ClockDomainConfig``："

#: ../../SpinalHDL/Structuring/clock_domain.rst:175
msgid "Internal clock"
msgstr "内部时钟"

#: ../../SpinalHDL/Structuring/clock_domain.rst:177
msgid "An alternative syntax to create a clock domain is the following:"
msgstr "另一种创建时钟域的语法如下："

#: ../../SpinalHDL/Structuring/clock_domain.rst:190
msgid "This definition takes six parameters:"
msgstr "该定义有六个参数："

#: ../../SpinalHDL/Structuring/clock_domain.rst:199
msgid "``name``"
msgstr "``name``"

#: ../../SpinalHDL/Structuring/clock_domain.rst:200
msgid "Name of `clk` and `reset` signal"
msgstr "`clk` 和 `reset` 信号的名称"

#: ../../SpinalHDL/Structuring/clock_domain.rst:203
msgid "Specify polarity of signals and the nature of the reset"
msgstr "指定信号的极性和复位的性质"

#: ../../SpinalHDL/Structuring/clock_domain.rst:205
msgid "``withReset``"
msgstr "``withReset``"

#: ../../SpinalHDL/Structuring/clock_domain.rst:206
msgid "Add a reset signal"
msgstr "添加复位信号"

#: ../../SpinalHDL/Structuring/clock_domain.rst:207
msgid "true"
msgstr "true"

#: ../../SpinalHDL/Structuring/clock_domain.rst:208
msgid "``withSoftReset``"
msgstr "``withSoftReset``"

#: ../../SpinalHDL/Structuring/clock_domain.rst:209
msgid "Add a soft reset signal"
msgstr "添加软复位信号"

#: ../../SpinalHDL/Structuring/clock_domain.rst:210
#: ../../SpinalHDL/Structuring/clock_domain.rst:213
msgid "false"
msgstr "false"

#: ../../SpinalHDL/Structuring/clock_domain.rst:211
msgid "``withClockEnable``"
msgstr "``withClockEnable``"

#: ../../SpinalHDL/Structuring/clock_domain.rst:212
msgid "Add a clock enable"
msgstr "添加时钟使能"

#: ../../SpinalHDL/Structuring/clock_domain.rst:215
msgid "Frequency of the clock domain"
msgstr "时钟域频率"

#: ../../SpinalHDL/Structuring/clock_domain.rst:219
msgid ""
"The advantage of this approach is to create clock and reset signals with "
"a known/specified name instead of an inherited one."
msgstr "这种方法的优点是使用已知/指定的名称而不是继承的名称来创建时钟和复位信号。"

#: ../../SpinalHDL/Structuring/clock_domain.rst:221
msgid ""
"Once created, you have to assign the ``ClockDomain``'s signals, as shown "
"in the example below:"
msgstr "创建后，您必须分配 ``ClockDomain`` 的信号，如下例所示："

#: ../../SpinalHDL/Structuring/clock_domain.rst:253
msgid ""
"In other components then the one you created the ClockDomain in, you must"
" not use ``.clock`` and ``.reset``, but ``.readClockWire`` and "
"``.readResetWire`` as listed below. For the global ClockDomain you must "
"always use those ``.readXXX`` functions."
msgstr ""
"在您创建时钟域的其他组件中，您不得使用 ``.clock`` 和 ``.reset``，而应使用 ``.readClockWire`` 和 "
"``.readResetWire`` ，如下所示。对于全局时钟域，您必须始终使用这些 ``.readXXX`` 函数。"

#: ../../SpinalHDL/Structuring/clock_domain.rst:259
msgid "External clock"
msgstr "外部时钟"

#: ../../SpinalHDL/Structuring/clock_domain.rst:261
msgid ""
"You can define a clock domain which is driven by the outside anywhere in "
"your source. It will then automatically add clock and reset wires from "
"the top level inputs to all synchronous elements."
msgstr "您可以在源中的任何位置定义由外部驱动的时钟域。然后，它会自动将时钟和复位线从顶层输入添加到所有同步元件。"

#: ../../SpinalHDL/Structuring/clock_domain.rst:274
msgid ""
"The arguments to the ``ClockDomain.external`` function are exactly the "
"same as in the ``ClockDomain.internal`` function. Below is an example of "
"a design using ``ClockDomain.external``:"
msgstr ""
"``ClockDomain.external`` 函数的参数与 ``ClockDomain.internal`` 函数中的参数完全相同。下面是使用"
" ``ClockDomain.external`` 的设计示例："

#: ../../SpinalHDL/Structuring/clock_domain.rst:296
msgid "Signal priorities in HDL generation"
msgstr "生成 HDL 时的信号优先级"

#: ../../SpinalHDL/Structuring/clock_domain.rst:298
msgid ""
"In the current version, reset and clock enable signals have different "
"priorities. Their order is : ``asyncReset``, ``clockEnable``, "
"``syncReset`` and ``softReset``."
msgstr ""
"在当前版本中，复位和时钟使能信号具有不同的优先级。它们的顺序是： ``asyncReset``, ``clockEnable``, "
"``syncReset`` 和 ``softReset``。"

#: ../../SpinalHDL/Structuring/clock_domain.rst:300
msgid ""
"Please be careful that clockEnable has a higher priority than syncReset. "
"If you do a sync reset when the clockEnable is disabled (especially at "
"the beginning of a simulation), the gated registers will not be reseted."
msgstr ""
"请注意，clockEnable "
"的优先级高于syncReset。如果在禁用clockEnable（尤其是在仿真开始时）时执行同步重置，则门控寄存器将不会重置。"

#: ../../SpinalHDL/Structuring/clock_domain.rst:302
msgid "Here is an example:"
msgstr "这是一个例子："

#: ../../SpinalHDL/Structuring/clock_domain.rst:310
msgid "It will generate VerilogHDL codes like:"
msgstr "它将生成 Verilog HDL 代码，例如："

#: ../../SpinalHDL/Structuring/clock_domain.rst:324
msgid ""
"If that behaviour is problematic, one workaround is to use a when "
"statement as a clock enable instead of using the ClockDomain.enable "
"feature. This is open for future improvements."
msgstr "如果该行为有问题，一种解决方法是使用when 语句作为时钟使能，而不是使用ClockDomain.enable 功能。这对于未来的改进是开放的。"

#: ../../SpinalHDL/Structuring/clock_domain.rst:327
msgid "Context"
msgstr "语境"

#: ../../SpinalHDL/Structuring/clock_domain.rst:329
msgid ""
"You can retrieve in which clock domain you are by calling "
"``ClockDomain.current`` anywhere."
msgstr "您可以通过在任何地方调用 ``ClockDomain.current`` 来检索您所在的时钟域。"

#: ../../SpinalHDL/Structuring/clock_domain.rst:331
msgid ""
"The returned ``ClockDomain`` instance has the following functions that "
"can be called:"
msgstr "返回的 ``ClockDomain`` 实例具有以下可以调用的函数："

#: ../../SpinalHDL/Structuring/clock_domain.rst:337
msgid "name"
msgstr "名称"

#: ../../SpinalHDL/Structuring/clock_domain.rst:339
msgid "Return"
msgstr "返回类型"

#: ../../SpinalHDL/Structuring/clock_domain.rst:340
msgid "frequency.getValue"
msgstr "frequency.getValue"

#: ../../SpinalHDL/Structuring/clock_domain.rst
msgid "Return the frequency of the clock domain."
msgstr "返回时钟域的频率。"

#: ../../SpinalHDL/Structuring/clock_domain.rst
msgid "This being the arbitrary value you configured the domain with."
msgstr "这是您配置域的任意值。"

#: ../../SpinalHDL/Structuring/clock_domain.rst:343
msgid "Double"
msgstr "Double"

#: ../../SpinalHDL/Structuring/clock_domain.rst:344
msgid "hasReset"
msgstr "hasReset"

#: ../../SpinalHDL/Structuring/clock_domain.rst:345
msgid "Return if the clock domain has a reset signal"
msgstr "如果时钟域有复位信号则返回"

#: ../../SpinalHDL/Structuring/clock_domain.rst:346
#: ../../SpinalHDL/Structuring/clock_domain.rst:349
#: ../../SpinalHDL/Structuring/clock_domain.rst:352
msgid "Boolean"
msgstr "Boolean"

#: ../../SpinalHDL/Structuring/clock_domain.rst:347
msgid "hasSoftReset"
msgstr "hasSoftReset"

#: ../../SpinalHDL/Structuring/clock_domain.rst:348
msgid "Return if the clock domain has a soft reset signal"
msgstr "返回时钟域是否有软复位信号"

#: ../../SpinalHDL/Structuring/clock_domain.rst:350
msgid "hasClockEnable"
msgstr "hasClockEnable"

#: ../../SpinalHDL/Structuring/clock_domain.rst:351
msgid "Return if the clock domain has a clock enable signal"
msgstr "返回时钟域是否有时钟使能信号"

#: ../../SpinalHDL/Structuring/clock_domain.rst:353
msgid "readClockWire"
msgstr "readClockWire"

#: ../../SpinalHDL/Structuring/clock_domain.rst:354
msgid "Return a signal derived from the clock signal"
msgstr "返回从时钟信号派生的信号"

#: ../../SpinalHDL/Structuring/clock_domain.rst:355
#: ../../SpinalHDL/Structuring/clock_domain.rst:358
#: ../../SpinalHDL/Structuring/clock_domain.rst:361
#: ../../SpinalHDL/Structuring/clock_domain.rst:364
#: ../../SpinalHDL/Structuring/clock_domain.rst:367
#: ../../SpinalHDL/Structuring/clock_domain.rst:370
#: ../../SpinalHDL/Structuring/clock_domain.rst:373
msgid "Bool"
msgstr "Bool"

#: ../../SpinalHDL/Structuring/clock_domain.rst:356
msgid "readResetWire"
msgstr "readResetWire"

#: ../../SpinalHDL/Structuring/clock_domain.rst:357
msgid "Return a signal derived from the reset signal"
msgstr "返回一个从复位信号派生的信号"

#: ../../SpinalHDL/Structuring/clock_domain.rst:359
msgid "readSoftResetWire"
msgstr "readSoftResetWire"

#: ../../SpinalHDL/Structuring/clock_domain.rst:360
msgid "Return a signal derived from the soft reset signal"
msgstr "返回从软复位信号派生的信号"

#: ../../SpinalHDL/Structuring/clock_domain.rst:362
msgid "readClockEnableWire"
msgstr "readClockEnableWire"

#: ../../SpinalHDL/Structuring/clock_domain.rst:363
msgid "Return a signal derived from the clock enable signal"
msgstr "返回从时钟使能信号派生的信号"

#: ../../SpinalHDL/Structuring/clock_domain.rst:365
msgid "isResetActive"
msgstr "isResetActive"

#: ../../SpinalHDL/Structuring/clock_domain.rst:366
msgid "Return True when the reset is active"
msgstr "当复位有效时返回 True"

#: ../../SpinalHDL/Structuring/clock_domain.rst:368
msgid "isSoftResetActive"
msgstr "isSoftResetActive"

#: ../../SpinalHDL/Structuring/clock_domain.rst:369
msgid "Return True when the soft reset is active"
msgstr "当软复位有效时返回 True"

#: ../../SpinalHDL/Structuring/clock_domain.rst:371
msgid "isClockEnableActive"
msgstr "isClockEnableActive"

#: ../../SpinalHDL/Structuring/clock_domain.rst:372
msgid "Return True when the clock enable is active"
msgstr "当时钟使能有效时返回 True"

#: ../../SpinalHDL/Structuring/clock_domain.rst:375
msgid ""
"An example is included below where a UART controller uses the frequency "
"specification to set its clock divider:"
msgstr "下面包含一个示例，其中通过 UART 控制器使用频率来设置其时钟分频器："

#: ../../SpinalHDL/Structuring/clock_domain.rst:387
msgid "Clock domain crossing"
msgstr "跨时钟域设计"

#: ../../SpinalHDL/Structuring/clock_domain.rst:389
msgid ""
"SpinalHDL checks at compile time that there are no unwanted/unspecified "
"cross clock domain signal reads. If you want to read a signal that is "
"emitted by another ``ClockDomain`` area, you should add the "
"``crossClockDomain`` tag to the destination signal as depicted in the "
"following example:"
msgstr ""
"SpinalHDL 在编译时检查是否存在不需要的/未指定的跨时钟域信号读取。如果您想读取另一个 ``ClockDomain`` "
"逻辑区发出的信号，则应给目标信号增加 ``crossClockDomain`` 标记，如下例所示："

#: ../../SpinalHDL/Structuring/clock_domain.rst:451
msgid ""
"In general, you can use 2 or more flip-flop driven by the destination "
"clock domain to prevent metastability. The ``BufferCC(input: T, init: T ="
" null, bufferDepth: Int = 2)`` function provided in ``spinal.lib._`` will"
" instantiate the necessary flip-flops (the number of flip-flops will "
"depends on the ``bufferDepth`` parameter) to mitigate the phenomena."
msgstr ""
"一般来说，可以使用2个或更多由目标时钟域驱动的触发器来防止亚稳态。 ``spinal.lib._`` 中提供的 ``BufferCC(input:"
" T, init: T = null, bufferDepth: Int = 2)`` 函数将实例化必要的触发器（触发器的数量将取决于 "
"``bufferDepth`` 参数）来减轻这种现象。"

#: ../../SpinalHDL/Structuring/clock_domain.rst:475
msgid ""
"The ``BufferCC`` function is only for signals of type ``Bit``, or "
"``Bits`` operating as Gray-coded counters (only 1 bit-flip per clock "
"cycle), and can not used for multi-bit cross-domain processes. For multi-"
"bit cases, it is recommended to use ``StreamFifoCC`` for high bandwidth "
"requirements, or use ``StreamCCByToggle`` to reduce resource usage in "
"cases where bandwidth is not critical."
msgstr ""
"``BufferCC`` 函数仅适用于 ``Bit`` 类型的信号，或作为格雷编码计数器运行的 ``Bits`` 信号（每个时钟周期仅翻转 1 "
"位），并且不能用于多位跨时钟域信号。对于多位情况，建议使用 ``StreamFifoCC`` 来满足高带宽要求，或者在带宽要求不高的情况下使用 "
"``StreamCCByToggle`` 来减少资源使用。"

#: ../../SpinalHDL/Structuring/clock_domain.rst:478
msgid "Special clocking Areas"
msgstr "特殊计时逻辑区"

#: ../../SpinalHDL/Structuring/clock_domain.rst:481
msgid "Slow Area"
msgstr "慢时钟逻辑区"

#: ../../SpinalHDL/Structuring/clock_domain.rst:483
msgid ""
"A ``SlowArea`` is used to create a new clock domain area which is slower "
"than the current one:"
msgstr "``SlowArea`` 用于创建一个逻辑区，使用比当前时钟域慢的新时钟域："

#: ../../SpinalHDL/Structuring/clock_domain.rst:512
msgid ""
"The clock signal used in a SlowArea is the same as the parent one. The "
"SlowArea add instead a clock-enable signal that will slow down the "
"sampling rate inside it. In other words, "
"``ClockDomain.current.readClockWire`` will return the fast (parent "
"domain) clock. To obtain the clock enable, use "
"``ClockDomain.current.readClockEnableWire``"
msgstr ""
"SlowArea 中使用的时钟信号与父区域相同。而 SlowArea "
"会添加一个时钟启用信号，以减慢其内部的采样率。换句话说，``ClockDomain.current"
".readClockWire`` 将返回快速（父域）时钟。要获取时钟使能信号，请使用 "
"``ClockDomain.current.readClockEnableWire``"

#: ../../SpinalHDL/Structuring/clock_domain.rst:517
msgid "BootReset"
msgstr "启动复位"

#: ../../SpinalHDL/Structuring/clock_domain.rst:519
msgid ""
"`clockDomain.withBootReset()` could specify register's resetKind as BOOT."
" `clockDomain.withSyncReset()` could specify register's resetKind as SYNC"
" (sync-reset)."
msgstr ""
"`clockDomain.withBootReset()` 可以指定寄存器的resetKind为BOOT。 "
"`clockDomain.withSyncReset()` 可以指定寄存器的resetKind为SYNC（同步复位）。"

#: ../../SpinalHDL/Structuring/clock_domain.rst:537
msgid "ResetArea"
msgstr "复位时钟域"

#: ../../SpinalHDL/Structuring/clock_domain.rst:539
msgid ""
"A ``ResetArea`` is used to create a new clock domain area where a special"
" reset signal is combined with the current clock domain reset:"
msgstr "``ResetArea`` 用于创建一个新的时钟域区域，其使用指定的复位信号与当前时钟域复位相结合进行复位·："

#: ../../SpinalHDL/Structuring/clock_domain.rst:559
msgid "ClockEnableArea"
msgstr "时钟使能逻辑区"

#: ../../SpinalHDL/Structuring/clock_domain.rst:561
msgid ""
"A ``ClockEnableArea`` is used to add an additional clock enable in the "
"current clock domain:"
msgstr "``ClockEnableArea`` 用于在当前时钟域中添加额外的时钟使能信号："
