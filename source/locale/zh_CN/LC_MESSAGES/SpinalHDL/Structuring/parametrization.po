msgid ""
msgstr ""
"Project-Id-Version: SpinalHDLReport-Msgid-Bugs-To:POT-Creation-Date:2023-12-"
"01 11:48+0800PO-Revision-Date:YEAR-MO-DA HO:MI+ZONELast-Translator:FULL NAME "
"<EMAIL@ADDRESS>Language:zh_CNLanguage-Team:zh_CN <LL@li.org>Plural-"
"Forms:nplurals=1; plural=0;MIME-Version:1.0Content-Type:text/plain; "
"charset=UTF-8\n"
"Report-Msgid-Bugs-To: EMAIL@ADDRESSPOT-Creation-Date:2023-12-02 00:23+0800PO-"
"Revision-Date:YEAR-MO-DA HO:MI+ZONELast-Translator:FULL NAME <EMAIL@ADDRESS"
">Language-Team:LANGUAGE <LL@li.org>MIME-Version:1.0Content-Type:text/plain; "
"charset=UTF-8\n"
"PO-Revision-Date: 2023-12-24 15:57+0000\n"
"Last-Translator: Readon <xydarcher@qq.com>\n"
"Language-Team: Chinese (Simplified) <https://hosted.weblate.org/projects/"
"spinaldoc-rtd/spinalhdlstructuringparametrization/zh_Hans/>\n"
"Language: zh_CN\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bitGenerated-By:Babel 2.13.1\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Weblate 5.4-dev\n"

#: ../../SpinalHDL/Structuring/parametrization.rst:2
msgid "Parametrization"
msgstr "参数化"

#: ../../SpinalHDL/Structuring/parametrization.rst:4
msgid "There are multiple aspects to parametrization :"
msgstr "参数化有多个方面的含义："

#: ../../SpinalHDL/Structuring/parametrization.rst:6
msgid ""
"Providing and the management of, elaboration time parameters provided to "
"SpinalHDL during elaboration of the design"
msgstr "在设计实例细化（elaboration）过程中向 SpinalHDL "
"提供细化过程的参数并对其进行管理"

#: ../../SpinalHDL/Structuring/parametrization.rst:8
msgid ""
"Using the parameter data to allow the designer to perform any kind of "
"hardware construction, configuration and interconnection task needed in the "
"design.  Such as optional component generation within the hardware design."
msgstr "通过使用参数，设计人员可以实现任何类型硬件的构造、配置和互连任务。例如硬件设"
"计中的可选组件生成。"

#: ../../SpinalHDL/Structuring/parametrization.rst:13
msgid ""
"Parallels exist with the aims of HDL features such as Verilog module "
"parameters and VHDL generics.  SpinalHDL brings a far richer and more "
"powerful set of capabilities into this area with the additional protection "
"of Scala type safety and SpinalHDL built in HDL design rule checking."
msgstr ""
"与 HDL 泛化功能（例如 Verilog 模块参数和 VHDL 泛型）的目标类似。 SpinalHDL "
"通过 Scala 类型安全和内置 HDL "
"设计规则检查带来额外保护，提供了更丰富、更强大的功能集。"

#: ../../SpinalHDL/Structuring/parametrization.rst:19
msgid ""
"The SpinalHDL mechanisms for parameterization of components is not built on "
"top of any native HDL mechanism and so is not impeded by HDL language "
"level/version support or restrictions about what can be achieved in hand "
"written HDL."
msgstr ""
"用于组件参数化的 SpinalHDL 机制不是构建在任何 HDL 机制之上，因此，不会受到 "
"HDL 语言级别/版本支持或手写 HDL 带来限制的影响。"

#: ../../SpinalHDL/Structuring/parametrization.rst:24
msgid ""
"For readers looking to interoperate with parameterized Verilog or "
"genericized VHDL using SpinalHDL, please see the section on :ref:`BlackBox "
"<BlackBox>` IP for those scenarios your project requires."
msgstr ""
"对于希望使用 SpinalHDL 与参数化 Verilog 或通用 VHDL 进行互操作的读者，请参阅 "
":ref:`BlackBox <BlackBox>` IP 中有关您的项目所需场景的部分。"

#: ../../SpinalHDL/Structuring/parametrization.rst:31
msgid "Elaboration time parameters"
msgstr "实例细化时参数"

#: ../../SpinalHDL/Structuring/parametrization.rst:33
msgid ""
"You can use the whole Scala syntax to provide elaboration time parameters."
msgstr "您可以使用所有 Scala 语法来提供实例细化时参数。"

#: ../../SpinalHDL/Structuring/parametrization.rst:35
msgid ""
"The whole syntax means you have the entire power and feature set of the "
"Scala language at your disposal to solve parameterization requirements for "
"your project at the level of complexity you choose."
msgstr "所有的语法意味着您可以使用 Scala "
"语言的全部功能，以按照您选择的复杂程度解决项目的参数化要求。"

#: ../../SpinalHDL/Structuring/parametrization.rst:39
msgid ""
"SpinalHDL does not place any opinionated restrictions on how to achieve your"
" parameterization goals.  As such there are many Scala design patterns and a"
" few SpinalHDL helpers that can be used to manage parameters that are suited"
" to different parameter management scenarios."
msgstr ""
"SpinalHDL 不会对如何实现参数化目标施加任何特殊限制。因此，有许多 Scala "
"设计模式和一些 SpinalHDL 帮助程序可用于管理参数，以适合不同场景。"

#: ../../SpinalHDL/Structuring/parametrization.rst:44
msgid "Here are some examples and ideas of the possibilities:"
msgstr "以下是一些示例和可能的想法："

#: ../../SpinalHDL/Structuring/parametrization.rst:46
msgid ""
"Hardwired code and constants (not strictly parameter management at all but "
"serves to hilight the most basic mechanism, a code change, not a parameter "
"data change)"
msgstr "硬连线代码和常量（突出最基本的机制，而不是严格的参数管理，代码上的变更，而不"
"是数据上的变更）"

#: ../../SpinalHDL/Structuring/parametrization.rst:49
msgid ""
"Constant values provided from a companion object that are static constants "
"in Scala."
msgstr "由伴随对象提供的常量值在 Scala 中是静态常量。"

#: ../../SpinalHDL/Structuring/parametrization.rst:51
msgid ""
"Values provided to Scala class constructor, often a ``case class`` that "
"causes Scala to capture those constructor argument values as constants."
msgstr "提供给 Scala 类构造函数的值，通常一个 ``case class`` 会导致 Scala "
"将这些构造函数的参数值捕获为常量。"

#: ../../SpinalHDL/Structuring/parametrization.rst:53
msgid ""
"Regular Scala flow-control syntax, not limited to but including "
"conditionals, looping, lambdas/monads, everything."
msgstr "常规 Scala 流程控制语法，包括但不限于条件、循环、lambda/monad 等。"

#: ../../SpinalHDL/Structuring/parametrization.rst:55
msgid ""
"Config class pattern (examples exist in library items such as "
"UartCtrlConfig_, SpiMasterCtrlConfig)"
msgstr "配置类的模式（示例存在于库中，包括 UartCtrlConfig_, SpiMasterCtrlConfig 等）"

#: ../../SpinalHDL/Structuring/parametrization.rst:57
msgid ""
"Project defined 'Plugin' pattern (examples exist in the VexRiscV_ project to"
" configure the feature set the resulting CPU IP core is built with)"
msgstr "项目定义的“插件”模式（在 VexRiscV_ 项目中有示例，用于配置生成的 CPU IP "
"核所使用的功能集）"

#: ../../SpinalHDL/Structuring/parametrization.rst:59
msgid ""
"Values and information loaded from a file or network based source, using "
"standard Scala/JVM libraries and APIs."
msgstr "使用标准 Scala/JVM 库和 API 从文件或网络源中加载值和信息。"

#: ../../SpinalHDL/Structuring/parametrization.rst:61
msgid "`any mechanism you can create`"
msgstr "“任何你可以创建的机制”"

#: ../../SpinalHDL/Structuring/parametrization.rst:63
msgid ""
"All of the mechanisms result in a change in resulting elaborated HDL output."
msgstr "所有机制都会导致实力细化生成的 HDL 输出发生变化。"

#: ../../SpinalHDL/Structuring/parametrization.rst:65
msgid ""
"This could vary from a single constant value change all the way through to "
"describing the entire bus and interconnection architecture of an entire SoC "
"all without leaving the Scala programming paradigm."
msgstr "这可以仅仅使用 Scala 编程就完成设计，支持单个常数值到整个 SoC "
"的所有总线和互连架构描述的参数化。"

#: ../../SpinalHDL/Structuring/parametrization.rst:70
msgid "Here is an example of class parameters"
msgstr "这是一个类参数的示例"

#: ../../SpinalHDL/Structuring/parametrization.rst:84
msgid ""
"You can also use global variable defined in Scala objects (companion object "
"pattern)."
msgstr "您还可以使用 Scala 对象（伴随对象模式）中定义的全局变量。"

#: ../../SpinalHDL/Structuring/parametrization.rst:87
msgid ""
"A :ref:`ScopeProperty <scopeproperty>` can also be used for configuration."
msgstr "\\ :ref:`ScopeProperty <scopeproperty>` 也可用于配置。"

#: ../../SpinalHDL/Structuring/parametrization.rst:90
msgid "Optional hardware"
msgstr "可选硬件"

#: ../../SpinalHDL/Structuring/parametrization.rst:92
msgid "So here there is more possibilities."
msgstr "所以这里还有更多的可能性。"

#: ../../SpinalHDL/Structuring/parametrization.rst:96
msgid "For optional signal :"
msgstr "对于可选信号："

#: ../../SpinalHDL/Structuring/parametrization.rst:106
msgid ""
"The ``generate`` method is a mechanism to evaluate the expression that "
"follows for an optional value.  If the predicate is true, generate will "
"evaluate the given expression and return the result, otherwise it returns "
"null."
msgstr ""
"``generate`` 函数是一种实现具有可选值的表达式机制。如果谓词为 true，generate "
"将计算给定表达式并返回结果，否则返回 null。"

#: ../../SpinalHDL/Structuring/parametrization.rst:111
msgid ""
"This may be used in cases to help parameterize the SpinalHDL hardware "
"description using an elaboration-time conditional expression.  Causing HDL "
"constructs to be emitted or not-emitted in the resulting HDL. The generate "
"method can be seen as SpinalHDL syntatic sugar reducing language clutter."
msgstr ""
"使用实例细化时条件表达式有助于参数化 SpinalHDL 硬件描述。导致 HDL "
"结构在生成的 HDL 中存在或不存在。generate函数可以看作是 SpinalHDL "
"语法糖，减少语言混乱。"

#: ../../SpinalHDL/Structuring/parametrization.rst:116
msgid ""
"Project SpinalHDL code referencing ``mySignal`` would need to ensure it "
"handles the possiblity of null gracefully.  This is usually not a problem as"
" those parts of the design can also be omitted dependant on the ``flag`` "
"value.  Thus the feature of parameterizing this component is demonstrated."
msgstr ""
"SpinalHDL 代码中引用 ``mySignal`` 信号将需要确保它优雅地处理 null "
"的可能性。这通常不是问题，因为实际设计中的这些部分也会根据 ``flag`` "
"值省略。从而达到了该组件参数化的目的。"

#: ../../SpinalHDL/Structuring/parametrization.rst:122
msgid "You can do the same in Bundle."
msgstr "您也可以在线束（Bundle）中做相同的事。"

#: ../../SpinalHDL/Structuring/parametrization.rst:124
msgid "Note that you can also use scala Option."
msgstr "请注意，您还可以使用 scala 选项类（Option）。"

#: ../../SpinalHDL/Structuring/parametrization.rst:126
msgid "If you want to disable the generation of a chunk of hardware :"
msgstr "如果你想禁用某个硬件块的生成："

#: ../../SpinalHDL/Structuring/parametrization.rst:136
msgid "You can also use scala for loops :"
msgstr "您还可以使用 scala 中的 for 循环："

#: ../../SpinalHDL/Structuring/parametrization.rst:146
msgid ""
"So, you can extends those scala usages at elaboration time as much as you "
"want, including using the whole scala collections (List, Set, Map, ...) to "
"build some data model and then converting them into hardware in a procedural"
" way (ex iterating over those list elements)."
msgstr ""
"因此，您可以在实例细化时根据需要扩展这些 scala 用法，包括使用整个 scala 集合"
"（List、Set、Map...）来构建一些数据模型，然后以程序方式将它们转换为硬件（例如"
"，迭代这些列表中的元素）。"

#~ msgid "Introduction"
#~ msgstr "介绍"

#~ msgid "Optionaly generate some hardware"
#~ msgstr "可选择生成一些硬件"
