msgid ""
msgstr ""
"Project-Id-Version: SpinalHDLReport-Msgid-Bugs-To:POT-Creation-Date:2023-12-"
"01 11:48+0800PO-Revision-Date:YEAR-MO-DA HO:MI+ZONELast-Translator:FULL NAME "
"<EMAIL@ADDRESS>Language:zh_CNLanguage-Team:zh_CN <LL@li.org>Plural-"
"Forms:nplurals=1; plural=0;MIME-Version:1.0Content-Type:text/plain; "
"charset=UTF-8\n"
"Report-Msgid-Bugs-To: EMAIL@ADDRESSPOT-Creation-Date:2023-12-02 00:23+0800PO-"
"Revision-Date:YEAR-MO-DA HO:MI+ZONELast-Translator:FULL NAME <EMAIL@ADDRESS"
">Language-Team:LANGUAGE <LL@li.org>MIME-Version:1.0Content-Type:text/plain; "
"charset=UTF-8\n"
"PO-Revision-Date: 2024-01-12 04:06+0000\n"
"Last-Translator: tsy0123 <675526215@qq.com>\n"
"Language-Team: Chinese (Simplified) <https://hosted.weblate.org/projects/"
"spinaldoc-rtd/spinalhdldevelopers-areatypes/zh_Hans/>\n"
"Language: zh_CN\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bitGenerated-By:Babel 2.13.1\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Weblate 5.4-dev\n"

#: ../../SpinalHDL/Developers area/types.rst:3
msgid "Types"
msgstr "类型"

#: ../../SpinalHDL/Developers area/types.rst:10
msgid "Introduction"
msgstr "简介"

#: ../../SpinalHDL/Developers area/types.rst:12
msgid ""
"The language provides 5 base types and 2 composite types that can be used."
msgstr "该语言提供了 5 种基本类型和 2 种复合类型。"

#: ../../SpinalHDL/Developers area/types.rst:15
msgid ""
"Base types : ``Bool``, ``Bits``, ``UInt`` for unsigned integers, ``SInt`` "
"for signed integers, ``Enum``."
msgstr "基本类型： ``Bool``、``Bits``、 ``UInt`` "
"（无符号整数）、``SInt``（有符号整数）、 ``Enum``。"

#: ../../SpinalHDL/Developers area/types.rst:16
msgid "Composite types : Bundle, Vec."
msgstr "复合类型：``Bundle``、``Vec``。"

#: ../../SpinalHDL/Developers area/types.rst:22
msgid "Those types and their usage (with examples) are explained hereafter."
msgstr "这些类型及其用法（包括示例）将在后面解释。"

#: ../../SpinalHDL/Developers area/types.rst:24
msgid "Fixed point support is documented :ref:`Fixed-Point <fixed>`"
msgstr "定点小数支持已归档 :ref:`Fixed-Point <fixed>`"

#: ../../SpinalHDL/Developers area/types.rst:27 area/types.rst:45
#: area/types.rst:48 area/types.rst:51 area/types.rst:54 area/types.rst:79
#: area/types.rst:83 area/types.rst:87 area/types.rst:90 area/types.rst:99
#: area/types.rst:102 area/types.rst:105 area/types.rst:108 area/types.rst:111
#: area/types.rst:114 area/types.rst:240 area/types.rst:249 area/types.rst:258
#: area/types.rst:261 area/types.rst:270 area/types.rst:273 area/types.rst:276
#: area/types.rst:363 area/types.rst:366 area/types.rst:369 area/types.rst:372
#: area/types.rst:709 area/types.rst:712
msgid "Bool"
msgstr "Bool"

#: ../../SpinalHDL/Developers area/types.rst:29
msgid "This is the standard *boolean* type that corresponds to a single bit."
msgstr "这是对应于单个位的标准 *boolean* 类型。"

#: ../../SpinalHDL/Developers area/types.rst:32 area/types.rst:420
msgid "Declaration"
msgstr "声明"

#: ../../SpinalHDL/Developers area/types.rst:34
msgid "The syntax to declare such as value is as follows:"
msgstr "声明值/对象的语法如下："

#: ../../SpinalHDL/Developers area/types.rst:40 area/types.rst:130
msgid "Syntax"
msgstr "语法"

#: ../../SpinalHDL/Developers area/types.rst:41 area/types.rst:75
#: area/types.rst:131 area/types.rst:157 area/types.rst:180 area/types.rst:224
#: area/types.rst:315 area/types.rst:350 area/types.rst:397 area/types.rst:421
#: area/types.rst:434 area/types.rst:664 area/types.rst:705
msgid "Description"
msgstr "描述"

#: ../../SpinalHDL/Developers area/types.rst:42 area/types.rst:132
#: area/types.rst:225 area/types.rst:316 area/types.rst:351 area/types.rst:398
#: area/types.rst:435 area/types.rst:706
msgid "Return"
msgstr "返回类型"

#: ../../SpinalHDL/Developers area/types.rst:43
msgid "Bool()"
msgstr "Bool()"

#: ../../SpinalHDL/Developers area/types.rst:44
msgid "Create a Bool"
msgstr "创建Bool值"

#: ../../SpinalHDL/Developers area/types.rst:46
msgid "True"
msgstr "True"

#: ../../SpinalHDL/Developers area/types.rst:47
msgid "Create a Bool assigned with ``true``"
msgstr "创建一个分配有 ``true`` 值的 Bool对象"

#: ../../SpinalHDL/Developers area/types.rst:49
msgid "False"
msgstr "False"

#: ../../SpinalHDL/Developers area/types.rst:50
msgid "Create a Bool assigned with ``false``"
msgstr "创建一个Bool值并赋值为 ``false``"

#: ../../SpinalHDL/Developers area/types.rst:52
msgid "Bool(value : Boolean)"
msgstr "Bool(value : Boolean)"

#: ../../SpinalHDL/Developers area/types.rst:53
msgid "Create a Bool assigned with a Scala Boolean"
msgstr "创建一个赋值有 Scala 布尔值的 Bool信号"

#: ../../SpinalHDL/Developers area/types.rst:57
msgid "Using this type into SpinalHDL yields:"
msgstr "在 SpinalHDL 中使用这种类型会生成："

#: ../../SpinalHDL/Developers area/types.rst:66 area/types.rst:217
msgid "Operators"
msgstr "运算符"

#: ../../SpinalHDL/Developers area/types.rst:68
msgid "The following operators are available for the ``Bool`` type"
msgstr "以下运算符可用于 ``Bool`` 类型"

#: ../../SpinalHDL/Developers area/types.rst:74 area/types.rst:223
#: area/types.rst:314 area/types.rst:349 area/types.rst:396 area/types.rst:433
#: area/types.rst:704
msgid "Operator"
msgstr "运算符"

#: ../../SpinalHDL/Developers area/types.rst:76
msgid "Return type"
msgstr "返回类型"

#: ../../SpinalHDL/Developers area/types.rst:77
msgid "!x"
msgstr "!x"

#: ../../SpinalHDL/Developers area/types.rst:78
msgid "Logical NOT"
msgstr "逻辑非"

#: ../../SpinalHDL/Developers area/types.rst
msgid "x && y"
msgstr "x && y"

#: ../../SpinalHDL/Developers area/types.rst area/types.rst:229
msgid "x & y"
msgstr "x & y"

#: ../../SpinalHDL/Developers area/types.rst:82
msgid "Logical AND"
msgstr "逻辑与"

#: ../../SpinalHDL/Developers area/types.rst
msgid "x || y"
msgstr "x || y"

#: ../../SpinalHDL/Developers area/types.rst area/types.rst:232
msgid "x | y"
msgstr "x | y"

#: ../../SpinalHDL/Developers area/types.rst:86
msgid "Logical OR"
msgstr "逻辑或"

#: ../../SpinalHDL/Developers area/types.rst:88 area/types.rst:235
msgid "x ^ y"
msgstr "x ^ y"

#: ../../SpinalHDL/Developers area/types.rst:89
msgid "Logical XOR"
msgstr "逻辑异或"

#: ../../SpinalHDL/Developers area/types.rst:91
msgid "x.set[()]"
msgstr "x.set[()]"

#: ../../SpinalHDL/Developers area/types.rst:92
msgid "Set x to True"
msgstr "将 x 设置为 True"

#: ../../SpinalHDL/Developers area/types.rst:94
msgid "x.clear[()]"
msgstr "x.clear[()]"

#: ../../SpinalHDL/Developers area/types.rst:95
msgid "Set x to False"
msgstr "将 x 设置为 False"

#: ../../SpinalHDL/Developers area/types.rst:97
msgid "x.rise[()]"
msgstr "x.rise[()]"

#: ../../SpinalHDL/Developers area/types.rst:98
msgid "Return True when x was low at the last cycle and is now high"
msgstr "当 x 在上一个周期为低电平且现在为高电平时返回 True"

#: ../../SpinalHDL/Developers area/types.rst:100
msgid "x.rise(initAt : Bool)"
msgstr "x.rise(initAt : Bool)"

#: ../../SpinalHDL/Developers area/types.rst:101
msgid "Same as x.rise but with a reset value"
msgstr "与 x.rise 相同但具有重置后的初始值"

#: ../../SpinalHDL/Developers area/types.rst:103
msgid "x.fall[()]"
msgstr "x.fall[()]"

#: ../../SpinalHDL/Developers area/types.rst:104
msgid "Return True when x was high at the last cycle and is now low"
msgstr "当 x 在上一个周期为高且现在为低时返回 True"

#: ../../SpinalHDL/Developers area/types.rst:106
msgid "x.fall(initAt : Bool)"
msgstr "x.fall(initAt : Bool)"

#: ../../SpinalHDL/Developers area/types.rst:107
msgid "Same as x.fall but with a reset value"
msgstr "与 x.fall 相同但具有重置后的初始值"

#: ../../SpinalHDL/Developers area/types.rst:109
msgid "x.setWhen(cond)"
msgstr "x.setWhen(cond)"

#: ../../SpinalHDL/Developers area/types.rst:110
msgid "Set x when cond is True"
msgstr "当 cond 为 True 时设置 x 为 True"

#: ../../SpinalHDL/Developers area/types.rst:112
msgid "x.clearWhen(cond)"
msgstr "x.clearWhen(cond)"

#: ../../SpinalHDL/Developers area/types.rst:113
msgid "Clear x when cond is True"
msgstr "当 cond 为 True 时设置 x 为 False"

#: ../../SpinalHDL/Developers area/types.rst:118
msgid "The BitVector family - (``Bits``, ``UInt``, ``SInt``)"
msgstr "BitVector 系列 - (``Bits``, ``UInt``, ``SInt``)"

#: ../../SpinalHDL/Developers area/types.rst:120
msgid ""
"``BitVector`` is a family of types for storing multiple bits of information "
"in a single value. This type has three subtypes that can be used to model "
"different behaviours:"
msgstr "``BitVector`` 是一个系列的类型，用于在单个值中存储多位信息。该类型具有三个子"
"类型，可用于描述不同的行为："

#: ../../SpinalHDL/Developers area/types.rst:121
msgid ""
"``Bits`` do not convey any sign information whereas the ``UInt`` (unsigned "
"integer) and ``SInt`` (signed integer) provide the required operations to "
"compute correct results if signed / unsigned arithmetic is used."
msgstr ""
"``Bits`` 不传达任何符号信息，而 ``UInt`` （无符号整数）和 ``SInt`` "
"（有符号整数）提供了计算正确结果所需的操作（如果使用有符号/无符号算术）。"

#: ../../SpinalHDL/Developers area/types.rst:124
msgid "Declaration syntax"
msgstr "声明语法"

#: ../../SpinalHDL/Developers area/types.rst:133
msgid "Bits/UInt/SInt [()]"
msgstr "Bits/UInt/SInt [()]"

#: ../../SpinalHDL/Developers area/types.rst:134
msgid "Create a BitVector, bits count is inferred"
msgstr "创建一个 BitVector，自动推断其位数"

#: ../../SpinalHDL/Developers area/types.rst:135 area/types.rst:138
#: area/types.rst:141 area/types.rst:144 area/types.rst:147
msgid "Bits/UInt/SInt"
msgstr "Bits/UInt/SInt"

#: ../../SpinalHDL/Developers area/types.rst:136
msgid "Bits/UInt/SInt(x bits)"
msgstr "Bits/UInt/SInt(x bits)"

#: ../../SpinalHDL/Developers area/types.rst:137
msgid "Create a BitVector with x bits"
msgstr "创建一个具有 x 位的 BitVector信号"

#: ../../SpinalHDL/Developers area/types.rst:139
msgid "B/U/S(value : Int[,width : BitCount])"
msgstr "B/U/S(value : Int[,width : BitCount])"

#: ../../SpinalHDL/Developers area/types.rst:140 area/types.rst:143
msgid "Create a BitVector assigned with 'value'"
msgstr "创建一个赋值为“value”的 BitVector信号"

#: ../../SpinalHDL/Developers area/types.rst:142
msgid "B/U/S\"[[size']base]value\""
msgstr "B/U/S\"[[size']base]value\""

#: ../../SpinalHDL/Developers area/types.rst:145
msgid "B/U/S([x bits], element, ...)"
msgstr "B/U/S([x bits], element, ...)"

#: ../../SpinalHDL/Developers area/types.rst:146
msgid ""
"Create a BitVector assigned with the value specified by elements (see the "
"table below)"
msgstr "创建一个 BitVector信号，并为各元素赋值（见下表）"

#: ../../SpinalHDL/Developers area/types.rst:150
msgid "Elements could be defined as follows:"
msgstr "可以这样定义元素："

#: ../../SpinalHDL/Developers area/types.rst:156
msgid "Element syntax"
msgstr "元素语法"

#: ../../SpinalHDL/Developers area/types.rst:158
msgid "x : Int -> y : Boolean/Bool"
msgstr "x : Int -> y : Boolean/Bool"

#: ../../SpinalHDL/Developers area/types.rst:159
msgid "Set bit x with y"
msgstr "用 y 设置位 x"

#: ../../SpinalHDL/Developers area/types.rst:160
msgid "x : Range -> y : Boolean/Bool"
msgstr "x : Range -> y : Boolean/Bool"

#: ../../SpinalHDL/Developers area/types.rst:161
msgid "Set each bits in range x with y"
msgstr "设置 x 范围内的每个位为 y"

#: ../../SpinalHDL/Developers area/types.rst:162 area/types.rst:167
msgid "x : Range -> y : T"
msgstr "x : Range -> y : T"

#: ../../SpinalHDL/Developers area/types.rst area/types.rst:163
#: area/types.rst:168
msgid "Set bits in range x with y"
msgstr "设置 x 范围内的位为y"

#: ../../SpinalHDL/Developers area/types.rst:164
msgid "x : Range -> y : String"
msgstr "x : Range -> y : String"

#: ../../SpinalHDL/Developers area/types.rst
msgid "The string format follows the same rules as B/U/S\"xyz\" one"
msgstr "字符串格式遵循与B/U/S\"xyz\"相同的规则"

#: ../../SpinalHDL/Developers area/types.rst:169
msgid "default -> y : Boolean/Bool"
msgstr "default -> y : Boolean/Bool"

#: ../../SpinalHDL/Developers area/types.rst
msgid "Set all unconnected bits with the y value."
msgstr "使用 y 值设置所有未连接的位。"

#: ../../SpinalHDL/Developers area/types.rst
msgid ""
"This feature can only be used to do assignments without the U/B/S prefix"
msgstr "此功能只能用于对没有 U/B/S 前缀信号的赋值"

#: ../../SpinalHDL/Developers area/types.rst:174
msgid "You can define a Range values"
msgstr "您可以定义一个范围值"

#: ../../SpinalHDL/Developers area/types.rst:179
msgid "Range syntax"
msgstr "范围语法"

#: ../../SpinalHDL/Developers area/types.rst:181
msgid "Width"
msgstr "位宽"

#: ../../SpinalHDL/Developers area/types.rst:182
msgid "(x downto y)"
msgstr "(x downto y)"

#: ../../SpinalHDL/Developers area/types.rst:183
msgid "[x:y] x >= y"
msgstr "[x:y] x >= y"

#: ../../SpinalHDL/Developers area/types.rst:184
msgid "x-y+1"
msgstr "x-y+1"

#: ../../SpinalHDL/Developers area/types.rst:185
msgid "(x to y)"
msgstr "(x to y)"

#: ../../SpinalHDL/Developers area/types.rst:186
msgid "[x:y] x <= y"
msgstr "[x:y] x <= y"

#: ../../SpinalHDL/Developers area/types.rst:187
msgid "y-x+1"
msgstr "y-x+1"

#: ../../SpinalHDL/Developers area/types.rst:188
msgid "(x until y)"
msgstr "(x until y)"

#: ../../SpinalHDL/Developers area/types.rst:189
msgid "[x:y[ x < y"
msgstr "[x:y[ x < y"

#: ../../SpinalHDL/Developers area/types.rst:190
msgid "y-x"
msgstr "y-x"

#: ../../SpinalHDL/Developers area/types.rst:226
msgid "~x"
msgstr "~x"

#: ../../SpinalHDL/Developers area/types.rst:227
msgid "Bitwise NOT"
msgstr "按位非"

#: ../../SpinalHDL/Developers area/types.rst:228 area/types.rst:322
#: area/types.rst:378
msgid "T(w(x) bits)"
msgstr "T(w(x) bits)"

#: ../../SpinalHDL/Developers area/types.rst:230
msgid "Bitwise AND"
msgstr "按位与"

#: ../../SpinalHDL/Developers area/types.rst:231 area/types.rst:234
#: area/types.rst:237 area/types.rst:354 area/types.rst:357 area/types.rst:724
msgid "T(max(w(x), w(y) bits)"
msgstr "T(max(w(x), w(y) bits)"

#: ../../SpinalHDL/Developers area/types.rst:233
msgid "Bitwise OR"
msgstr "按位或"

#: ../../SpinalHDL/Developers area/types.rst:236
msgid "Bitwise XOR"
msgstr "按位异或"

#: ../../SpinalHDL/Developers area/types.rst:238 area/types.rst:436
msgid "x(y)"
msgstr "x(y)"

#: ../../SpinalHDL/Developers area/types.rst:239
msgid "Read bitfield, y : Int/UInt"
msgstr "读取位域，y : Int/UInt"

#: ../../SpinalHDL/Developers area/types.rst:241
msgid "x(hi,lo)"
msgstr "x(hi,lo)"

#: ../../SpinalHDL/Developers area/types.rst:242
msgid "Read bitfield, hi : Int, lo : Int"
msgstr "读取位域，hi : Int，lo : Int"

#: ../../SpinalHDL/Developers area/types.rst:243 area/types.rst:252
#: area/types.rst:733
msgid "T(hi-lo+1 bits)"
msgstr "T(hi-lo+1 bits)"

#: ../../SpinalHDL/Developers area/types.rst:244
msgid "x(offset,width)"
msgstr "x(offset,width)"

#: ../../SpinalHDL/Developers area/types.rst:245
msgid "Read bitfield, offset: UInt, width: Int"
msgstr "读取位域，offset: UInt，width: Int"

#: ../../SpinalHDL/Developers area/types.rst:246 area/types.rst:255
#: area/types.rst:736
msgid "T(width bits)"
msgstr "T(width bits)"

#: ../../SpinalHDL/Developers area/types.rst:247 area/types.rst:439
msgid "x(y) := z"
msgstr "x(y) := z"

#: ../../SpinalHDL/Developers area/types.rst:248
msgid "Assign bits, y : Int/UInt"
msgstr "赋值位，y : Int/UInt"

#: ../../SpinalHDL/Developers area/types.rst:250
msgid "x(hi,lo) := z"
msgstr "x(hi,lo) := z"

#: ../../SpinalHDL/Developers area/types.rst:251 area/types.rst:732
msgid "Assign bitfield, hi : Int, lo : Int"
msgstr "赋值位域，hi : Int，lo : Int"

#: ../../SpinalHDL/Developers area/types.rst:253
msgid "x(offset,width) := z"
msgstr "x(offset,width) := z"

#: ../../SpinalHDL/Developers area/types.rst:254 area/types.rst:735
msgid "Assign bitfield, offset: UInt, width: Int"
msgstr "赋值位域，offset: UInt，width: Int"

#: ../../SpinalHDL/Developers area/types.rst:256
msgid "x.msb"
msgstr "x.msb"

#: ../../SpinalHDL/Developers area/types.rst:257
msgid "Return the most significant bit"
msgstr "返回最高有效位"

#: ../../SpinalHDL/Developers area/types.rst:259
msgid "x.lsb"
msgstr "x.lsb"

#: ../../SpinalHDL/Developers area/types.rst:260
msgid "Return the least significant bit"
msgstr "返回最低有效位"

#: ../../SpinalHDL/Developers area/types.rst:262
msgid "x.range"
msgstr "x.range"

#: ../../SpinalHDL/Developers area/types.rst:263
msgid "Return the range (x.high downto 0)"
msgstr "返回范围（x.high downto 0）"

#: ../../SpinalHDL/Developers area/types.rst:264
msgid "Range"
msgstr "范围"

#: ../../SpinalHDL/Developers area/types.rst:265
msgid "x.high"
msgstr "x.high"

#: ../../SpinalHDL/Developers area/types.rst:266
msgid "Return the upper bound of the type x"
msgstr "返回类型 x 的上限"

#: ../../SpinalHDL/Developers area/types.rst:267 area/types.rst:715
msgid "Int"
msgstr "Int"

#: ../../SpinalHDL/Developers area/types.rst:268
msgid "x.xorR"
msgstr "x.xorR"

#: ../../SpinalHDL/Developers area/types.rst:269
msgid "XOR all bits of x"
msgstr "对 x 的所有位进行异或"

#: ../../SpinalHDL/Developers area/types.rst:271
msgid "x.orR"
msgstr "x.orR"

#: ../../SpinalHDL/Developers area/types.rst:272
msgid "OR all bits of x"
msgstr "对x 的所有位做或运算"

#: ../../SpinalHDL/Developers area/types.rst:274
msgid "x.andR"
msgstr "x.andR"

#: ../../SpinalHDL/Developers area/types.rst:275
msgid "AND all bits of x"
msgstr "对x 的所有位做与运算"

#: ../../SpinalHDL/Developers area/types.rst:277
msgid "x.clearAll[()]"
msgstr "x.clearAll[()]"

#: ../../SpinalHDL/Developers area/types.rst:278
msgid "Clear all bits"
msgstr "清零所有位"

#: ../../SpinalHDL/Developers area/types.rst:279 area/types.rst:282
#: area/types.rst:438 area/types.rst:739
msgid "T"
msgstr "T"

#: ../../SpinalHDL/Developers area/types.rst:280
msgid "x.setAll[()]"
msgstr "x.setAll[()]"

#: ../../SpinalHDL/Developers area/types.rst:281
msgid "Set all bits"
msgstr "将所有的位设置为1"

#: ../../SpinalHDL/Developers area/types.rst:283
msgid "x.setAllTo(value : Boolean)"
msgstr "x.setAllTo(value : Boolean)"

#: ../../SpinalHDL/Developers area/types.rst:284
msgid "Set all bits to the given Boolean value"
msgstr "将所有位设置为给定的布尔值（Scala Boolean）"

#: ../../SpinalHDL/Developers area/types.rst:286
msgid "x.setAllTo(value : Bool)"
msgstr "x.setAllTo(value : Bool)"

#: ../../SpinalHDL/Developers area/types.rst:287
msgid "Set all bits to the given Bool value"
msgstr "将所有位设置为给定的布尔值（Spinal Bool）"

#: ../../SpinalHDL/Developers area/types.rst:289
msgid "x.asBools"
msgstr "x.asBools"

#: ../../SpinalHDL/Developers area/types.rst:290
msgid "Cast into an array of Bool"
msgstr "转换为 Bool 数组"

#: ../../SpinalHDL/Developers area/types.rst:291
msgid "Vec(Bool(),width(x))"
msgstr "Vec(Bool(),width(x))"

#: ../../SpinalHDL/Developers area/types.rst:295
msgid "Masked comparison"
msgstr "掩码过滤结果比较"

#: ../../SpinalHDL/Developers area/types.rst:297
msgid ""
"Sometimes you need to check equality between a ``BitVector`` and a bits "
"constant that contain holes defined as a bitmask (bit positions not to be "
"compared by the equality expression)."
msgstr "有时候，你需要检查一个 ``BitVector`` "
"和一个包含空位（不需要进行相等性表达式比较的位）的位掩码之间的相等性。"

#: ../../SpinalHDL/Developers area/types.rst:300
msgid "An example demonstrating how to do that (note the use of 'M' prefix) :"
msgstr "此操作的示例（注意使用“M”前缀）："

#: ../../SpinalHDL/Developers area/types.rst:308
msgid "Bits"
msgstr "位"

#: ../../SpinalHDL/Developers area/types.rst:317 area/types.rst:320
#: area/types.rst:373 area/types.rst:376
msgid "x >> y"
msgstr "x >> y"

#: ../../SpinalHDL/Developers area/types.rst:318
msgid "Logical shift right, y : Int"
msgstr "逻辑右移，y : Int"

#: ../../SpinalHDL/Developers area/types.rst:319 area/types.rst:375
msgid "T(w(x) - y bits)"
msgstr "T(w(x) - y bits)"

#: ../../SpinalHDL/Developers area/types.rst:321
msgid "Logical shift right, y : UInt"
msgstr "逻辑右移，y : UInt"

#: ../../SpinalHDL/Developers area/types.rst:323 area/types.rst:326
#: area/types.rst:379 area/types.rst:382
msgid "x << y"
msgstr "x << y"

#: ../../SpinalHDL/Developers area/types.rst:324
msgid "Logical shift left, y : Int"
msgstr "逻辑左移，y : Int"

#: ../../SpinalHDL/Developers area/types.rst:325 area/types.rst:381
msgid "T(w(x) + y bits)"
msgstr "T(w(x) + y bits)"

#: ../../SpinalHDL/Developers area/types.rst:327
msgid "Logical shift left, y : UInt"
msgstr "逻辑左移， y : UInt"

#: ../../SpinalHDL/Developers area/types.rst:328 area/types.rst:384
msgid "T(w(x) + max(y) bits)"
msgstr "T(w(x) + max(y) bits)"

#: ../../SpinalHDL/Developers area/types.rst:329
msgid "x.rotateLeft(y)"
msgstr "x.rotateLeft(y)"

#: ../../SpinalHDL/Developers area/types.rst:330
msgid "Logical left rotation, y : UInt"
msgstr "逻辑循环左移，y : UInt"

#: ../../SpinalHDL/Developers area/types.rst:331
msgid "T(w(x))"
msgstr "T(w(x))"

#: ../../SpinalHDL/Developers area/types.rst:332 area/types.rst:385
msgid "x.resize(y)"
msgstr "x.resize(y)"

#: ../../SpinalHDL/Developers area/types.rst:333
msgid ""
"Return a resized copy of x, filled with zero bits as necessary at the MSB to"
" widen, may also truncate width retaining at the LSB side, y : Int"
msgstr "返回调整位宽后的 x，根据需要在 MSB 处填充零位以加大位宽，也可以截断保留在 "
"LSB 侧的宽度，y : Int"

#: ../../SpinalHDL/Developers area/types.rst:335 area/types.rst:339
#: area/types.rst:387
msgid "T(y bits)"
msgstr "T(y bits)"

#: ../../SpinalHDL/Developers area/types.rst:336
msgid "x.resizeLeft(y)"
msgstr "x.resizeLeft(y)"

#: ../../SpinalHDL/Developers area/types.rst:337
msgid ""
"Return a resized copy of x, filled with zero bits as necessary at the LSB to"
" widen, may also truncate width retraining at the MSB side, y : Int"
msgstr "返回调整位宽的 x，根据需要在 LSB 处填充零位以加大位宽，也可以在 MSB "
"端截断宽度，y : Int"

#: ../../SpinalHDL/Developers area/types.rst:343
msgid "UInt, SInt"
msgstr "UInt、SInt"

#: ../../SpinalHDL/Developers area/types.rst:352
msgid "x + y"
msgstr "x + y"

#: ../../SpinalHDL/Developers area/types.rst:353
msgid "Addition"
msgstr "加法"

#: ../../SpinalHDL/Developers area/types.rst:355
msgid "x - y"
msgstr "x - y"

#: ../../SpinalHDL/Developers area/types.rst:356
msgid "Subtraction"
msgstr "减法"

#: ../../SpinalHDL/Developers area/types.rst:358
msgid "x * y"
msgstr "x * y"

#: ../../SpinalHDL/Developers area/types.rst:359
msgid "Multiplication"
msgstr "乘法"

#: ../../SpinalHDL/Developers area/types.rst:360
msgid "T(w(x) + w(y) bits)"
msgstr "T(w(x) + w(y) bits)"

#: ../../SpinalHDL/Developers area/types.rst:361
msgid "x > y"
msgstr "x > y"

#: ../../SpinalHDL/Developers area/types.rst:362
msgid "Greater than"
msgstr "大于"

#: ../../SpinalHDL/Developers area/types.rst:364
msgid "x >= y"
msgstr "x >= y"

#: ../../SpinalHDL/Developers area/types.rst:365
msgid "Greater than or equal"
msgstr "大于或等于"

#: ../../SpinalHDL/Developers area/types.rst:367
msgid "x < y"
msgstr "x < y"

#: ../../SpinalHDL/Developers area/types.rst:368
msgid "Less than"
msgstr "小于"

#: ../../SpinalHDL/Developers area/types.rst:370
msgid "x <= y"
msgstr "x <= y"

#: ../../SpinalHDL/Developers area/types.rst:371
msgid "Less than or equal"
msgstr "小于或等于"

#: ../../SpinalHDL/Developers area/types.rst:374
msgid "Arithmetic shift right, y : Int"
msgstr "算术右移，y : Int"

#: ../../SpinalHDL/Developers area/types.rst:377
msgid "Arithmetic shift right, y : UInt"
msgstr "算术右移，y : UInt"

#: ../../SpinalHDL/Developers area/types.rst:380
msgid "Arithmetic shift left, y : Int"
msgstr "算术左移，y : Int"

#: ../../SpinalHDL/Developers area/types.rst:383
msgid "Arithmetic shift left, y : UInt"
msgstr "算术左移，y : UInt"

#: ../../SpinalHDL/Developers area/types.rst:386
msgid "Return an arithmetic resized copy of x, y : Int"
msgstr "返回算术位宽调整后的x，y。x, y : Int"

#: ../../SpinalHDL/Developers area/types.rst:391
msgid "Bool, Bits, UInt, SInt"
msgstr "Bool, Bits, UInt, SInt"

#: ../../SpinalHDL/Developers area/types.rst:399 area/types.rst:725
msgid "x.asBits"
msgstr "x.asBits"

#: ../../SpinalHDL/Developers area/types.rst:400
msgid "Binary cast in Bits"
msgstr "二进制转换为Bits"

#: ../../SpinalHDL/Developers area/types.rst:401
msgid "Bits(w(x) bits)"
msgstr "Bits(w(x) bits)"

#: ../../SpinalHDL/Developers area/types.rst:402
msgid "x.asUInt"
msgstr "x.asUInt"

#: ../../SpinalHDL/Developers area/types.rst:403
msgid "Binary cast in UInt"
msgstr "二进制转换为UInt"

#: ../../SpinalHDL/Developers area/types.rst:404
msgid "UInt(w(x) bits)"
msgstr "UInt(w(x) bits)"

#: ../../SpinalHDL/Developers area/types.rst:405
msgid "x.asSInt"
msgstr "x.asSInt"

#: ../../SpinalHDL/Developers area/types.rst:406
msgid "Binary cast in SInt"
msgstr "二进制转换为SInt"

#: ../../SpinalHDL/Developers area/types.rst:407
msgid "SInt(w(x) bits)"
msgstr "SInt(w(x) bits)"

#: ../../SpinalHDL/Developers area/types.rst:408
msgid "x.asBool"
msgstr "x.asBool"

#: ../../SpinalHDL/Developers area/types.rst:409
msgid "Binary cast in Bool"
msgstr "二进制转换为Bool"

#: ../../SpinalHDL/Developers area/types.rst:410
msgid "Bool(x.lsb)"
msgstr "Bool(x.lsb)"

#: ../../SpinalHDL/Developers area/types.rst:414
msgid "Vec"
msgstr "Vec"

#: ../../SpinalHDL/Developers area/types.rst:422
msgid "Vec(type : Data, size : Int)"
msgstr "Vec(type : Data, size : Int)"

#: ../../SpinalHDL/Developers area/types.rst:423
msgid "Create a vector of size time the given type"
msgstr "创建一个指定类型和位宽的向量"

#: ../../SpinalHDL/Developers area/types.rst:424
msgid "Vec(x,y,..)"
msgstr "Vec(x,y,..)"

#: ../../SpinalHDL/Developers area/types.rst
msgid "Create a vector where indexes point to given elements."
msgstr "创建一个向量，其中索引指向给定元素。"

#: ../../SpinalHDL/Developers area/types.rst
msgid "this construct supports mixed element width"
msgstr "这会构造支持混合宽度的元素"

#: ../../SpinalHDL/Developers area/types.rst:437
msgid "Read element y, y : Int/UInt"
msgstr "读取元素 y, y : Int/UInt"

#: ../../SpinalHDL/Developers area/types.rst:440
msgid "Assign element y with z, y : Int/UInt"
msgstr "将元素 y 赋值给 z, y : Int/UInt"

#: ../../SpinalHDL/Developers area/types.rst:460
msgid "Bundle"
msgstr "Bundle"

#: ../../SpinalHDL/Developers area/types.rst:462
msgid ""
"Bundles could be used to model data structure line buses and interfaces."
msgstr "线束可用于对数据结构信号总线和接口进行建模。"

#: ../../SpinalHDL/Developers area/types.rst:463
msgid ""
"All attributes that extends Data (Bool, Bits, UInt, ...) that are defined "
"inside the bundle are considered as part of the bundle."
msgstr "线束内定义的所有数据属性（Bool、Bits、UInt...）都被视为线束的一部分。"

#: ../../SpinalHDL/Developers area/types.rst:466
msgid "Simple example (RGB/VGA)"
msgstr "简单示例（RGB/VGA）"

#: ../../SpinalHDL/Developers area/types.rst:468
msgid ""
"The following example show an RGB bundle definition with some internal "
"function."
msgstr "以下示例显示了具有某些内部函数的 RGB 线束的定义。"

#: ../../SpinalHDL/Developers area/types.rst:484
msgid ""
"Then you can also incorporate a Bundle inside Bundle as deeply as you want:"
msgstr "然后，您还可以根据需要将一个线束实例放置在另一个线束中（没有深度限制）："

#: ../../SpinalHDL/Developers area/types.rst:494
msgid "And finaly instantiate your Bundles inside the hardware :"
msgstr "最后在硬件中实例化您的线束："

#: ../../SpinalHDL/Developers area/types.rst:504
msgid ""
"If you want to specify your bundle as an input or an output of a Component, "
"you have to do it by the following way :"
msgstr "如果想将你的线束指定为组件的输入或输出，你必须通过以下方式来完成："

#: ../../SpinalHDL/Developers area/types.rst:518
msgid "Interface example (APB)"
msgstr "接口示例（APB）"

#: ../../SpinalHDL/Developers area/types.rst:520
msgid ""
"If you want to define an interface, let's imagine an APB interface, you can "
"also use bundles :"
msgstr "如果你想定义一个接口，比如一个APB接口，就可以使用线束："

#: ../../SpinalHDL/Developers area/types.rst:546
msgid ""
"One good practice is to group all construction parameters inside a "
"configuration class. This could make the parametrization much easier later "
"in your components, especially if you have to reuse the same configuration "
"at multiple places. Also if one time you need to add another construction "
"parameter, you will only have to add it into the configuration class and "
"everywhere this one is instantiated:"
msgstr ""
"一种好的做法是将所有构造参数分组到一个配置类中。这可以使组件中的参数化变得更"
"加容易，特别是当您必须在多个位置重用相同的配置时。另外，如果您需要添加另一个"
"构造参数，您只需将其添加到配置类中，并且在任何地方都可以实例化该参数："

#: ../../SpinalHDL/Developers area/types.rst:573
msgid ""
"Then at some points, you will probably need to use the APB bus as master or "
"as slave interface of some components. To do that you can define some "
"functions :"
msgstr "然后在某些时候，您可能需要使用 APB "
"总线作为某些组件的主端接口或从端接口。为此，您可以定义一些函数："

#: ../../SpinalHDL/Developers area/types.rst:611
msgid ""
"Then to make that better, the spinal.lib integrates a small master slave "
"utility named IMasterSlave. When a bundle extends IMasterSlave, it should "
"implement/override the asMaster function. It give you the ability to setup a"
" master or a slave interface in a smoother way :"
msgstr ""
"更进一步优化，spine.lib 中集成了一个名为 IMasterSlave 的小型主、从端口定义工"
"具。当线束扩展IMasterSlave时，它应该实现/覆盖asMaster函数，以便设置主端接口或"
"从端接口中的信号方向："

#: ../../SpinalHDL/Developers area/types.rst:622
msgid "An example of an APB bus that implement this IMasterSlave :"
msgstr "实现此 IMasterSlave 的 APB 总线示例："

#: ../../SpinalHDL/Developers area/types.rst:654
msgid "Enum"
msgstr "Enum"

#: ../../SpinalHDL/Developers area/types.rst:656
msgid "SpinalHDL supports enumeration with some encodings :"
msgstr "SpinalHDL 支持一些编码的枚举："

#: ../../SpinalHDL/Developers area/types.rst:662
msgid "Encoding"
msgstr "编码"

#: ../../SpinalHDL/Developers area/types.rst:663
msgid "Bit width"
msgstr "位宽"

#: ../../SpinalHDL/Developers area/types.rst:665
msgid "native"
msgstr "native"

#: ../../SpinalHDL/Developers area/types.rst:667
msgid "Use the VHDL enumeration system, this is the default encoding"
msgstr "使用VHDL枚举系统，这是默认编码"

#: ../../SpinalHDL/Developers area/types.rst:668
msgid "binarySequancial"
msgstr "二进制顺序"

#: ../../SpinalHDL/Developers area/types.rst:669
msgid "log2Up(stateCount)"
msgstr "log2Up(stateCount)"

#: ../../SpinalHDL/Developers area/types.rst:670
msgid "Use Bits to store states in declaration order (value from 0 to n-1)"
msgstr "使用 Bits 按声明顺序存储状态（值从 0 到 n-1）"

#: ../../SpinalHDL/Developers area/types.rst:671
msgid "binaryOneHot"
msgstr "binaryOneHot"

#: ../../SpinalHDL/Developers area/types.rst:672
msgid "stateCount"
msgstr "stateCount"

#: ../../SpinalHDL/Developers area/types.rst:673
msgid ""
"Use Bits to store state. Each bit position corresponds to one state, only "
"one bit is active at a time when encoded."
msgstr "使用位来存储状态。每个位对应一种状态，编码时一次只有一位有效。"

#: ../../SpinalHDL/Developers area/types.rst:677
msgid "Define an enumeration type:"
msgstr "定义一个枚举类型："

#: ../../SpinalHDL/Developers area/types.rst:685
msgid ""
"Instantiate a signal to store the enumeration encoded value and assign it a "
"value :"
msgstr "实例化一个信号来存储枚举编码值并为其赋值："

#: ../../SpinalHDL/Developers area/types.rst:697
msgid "Data (Bool, Bits, UInt, SInt, Enum, Bundle, Vec)"
msgstr "Data (Bool, Bits, UInt, SInt, Enum, Bundle, Vec)"

#: ../../SpinalHDL/Developers area/types.rst:699
msgid ""
"All hardware types extends the Data class, which mean that all of them "
"provide following operators :"
msgstr "所有硬件类型都扩展了 Data 类，这意味着它们都提供以下运算符："

#: ../../SpinalHDL/Developers area/types.rst:707
msgid "x === y"
msgstr "x === y"

#: ../../SpinalHDL/Developers area/types.rst:708
msgid "Equality"
msgstr "等价性判断"

#: ../../SpinalHDL/Developers area/types.rst:710
msgid "x =/= y"
msgstr "x =/= y"

#: ../../SpinalHDL/Developers area/types.rst:711
msgid "Inequality"
msgstr "不等价判断运算"

#: ../../SpinalHDL/Developers area/types.rst:713
msgid "x.getWidth"
msgstr "x.getWidth"

#: ../../SpinalHDL/Developers area/types.rst:714
msgid "Return bitcount"
msgstr "返回位数"

#: ../../SpinalHDL/Developers area/types.rst:716
msgid "x ## y"
msgstr "x ## y"

#: ../../SpinalHDL/Developers area/types.rst:717
msgid "Concatenate, x->high, y->low"
msgstr "连接Bits，x->高位，y->低位"

#: ../../SpinalHDL/Developers area/types.rst:718
msgid "Bits(width(x) + width(y) bits)"
msgstr "Bits(width(x) + width(y) bits)"

#: ../../SpinalHDL/Developers area/types.rst:719
msgid "Cat(x)"
msgstr "Cat(x)"

#: ../../SpinalHDL/Developers area/types.rst:720
msgid "Concatenate list, first element on lsb, x : Array[Data]"
msgstr "连接列表，第一个元素放置在lsb 上，x : Array[Data]"

#: ../../SpinalHDL/Developers area/types.rst:721
msgid "Bits(sumOfWidth bits)"
msgstr "Bits(sumOfWidth bits)"

#: ../../SpinalHDL/Developers area/types.rst:722
msgid "Mux(cond,x,y)"
msgstr "Mux(cond,x,y)"

#: ../../SpinalHDL/Developers area/types.rst:723
msgid "if cond ? x : y"
msgstr "if cond ? x : y"

#: ../../SpinalHDL/Developers area/types.rst:726
msgid "Cast in Bits"
msgstr "类型转换到Bits"

#: ../../SpinalHDL/Developers area/types.rst:727
msgid "Bits(width(x) bits)"
msgstr "Bits(width(x) bits)"

#: ../../SpinalHDL/Developers area/types.rst:728
msgid "x.assignFromBits(bits)"
msgstr "x.assignFromBits(bits)"

#: ../../SpinalHDL/Developers area/types.rst:729
msgid "Assign from Bits"
msgstr "从Bits获取信号来赋值"

#: ../../SpinalHDL/Developers area/types.rst:731
msgid "x.assignFromBits(bits,hi,lo)"
msgstr "x.assignFromBits(bits,hi,lo)"

#: ../../SpinalHDL/Developers area/types.rst:734
msgid "x.assignFromBits(bits,offset,width)"
msgstr "x.assignFromBits(bits,offset,width)"

#: ../../SpinalHDL/Developers area/types.rst:737
msgid "x.getZero"
msgstr "x.getZero"

#: ../../SpinalHDL/Developers area/types.rst:738
msgid "Get equivalent type assigned with zero"
msgstr "获取等效类型且赋值0"

#: ../../SpinalHDL/Developers area/types.rst:743
msgid "Literals as signal declaration"
msgstr "使用字面量声明信号"

#: ../../SpinalHDL/Developers area/types.rst:745
msgid ""
"Literals are generally use as a constant value. But you can also use them to"
" do two things in a single one :"
msgstr "字面量通常用作常量值。但您也可以使用它们一次完成两件事："

#: ../../SpinalHDL/Developers area/types.rst:748
msgid "Define a wire which is assigned with a constant value"
msgstr "定义一条分配有常量值的连线"

#: ../../SpinalHDL/Developers area/types.rst:749
msgid "Setup inferred type: UInt(4 bits)"
msgstr "设置推断类型：UInt(4 bits)"

#: ../../SpinalHDL/Developers area/types.rst:750
msgid ""
"Clock cycles where `cond =/= True` will result in the constant being "
"reinstated"
msgstr "当条件 `cond =/= True` 满足的时钟周期，将信号重新设置为常量"

#: ../../SpinalHDL/Developers area/types.rst:751
msgid ""
"Clock cycles where `cond === True` will result in the signal having the "
"value of `red` due to the last statement wins rule."
msgstr "由于最后一条语句获胜规则，满足 `cond === True` "
"条件的时钟周期将导致信号具有“red”值。"

#: ../../SpinalHDL/Developers area/types.rst:754
msgid "An example :"
msgstr "实例："

#: ../../SpinalHDL/Developers area/types.rst:770
msgid "Continuous Assignment Literals as signal declaration"
msgstr "用连续赋值字面量作来声明信号"

#: ../../SpinalHDL/Developers area/types.rst:772
msgid "You can also use them in expressions to do three things at once :"
msgstr "您还可以在表达式中使用它们来同时达成三件事："

#: ../../SpinalHDL/Developers area/types.rst:774
msgid "Define a wire"
msgstr "定义一个信号（一条线）"

#: ../../SpinalHDL/Developers area/types.rst:775
msgid ""
"Maintain the result of an equality operation in the hardware logic "
"implementation with the constant value and another signal"
msgstr "在硬件逻辑实现中，保持等价性比较运算结果的常数值和另一信号的结果"

#: ../../SpinalHDL/Developers area/types.rst:777
msgid ""
"Setup inferred type: Bool due to use of === equality operator having a "
"result of type Bool"
msgstr "设置推断类型：Bool，因为使用 === 相等运算符，其结果为 Bool 类型"

#: ../../SpinalHDL/Developers area/types.rst:780
msgid "There is an example :"
msgstr "这里是一个例子："

#~ msgid "There is an example about how to do that :"
#~ msgstr "有一个关于如何执行此操作的示例："

#~ msgid "Return a resized copy of x, filled with zero, y : Int"
#~ msgstr "返回 x 的调整大小副本，用零填充，y : Int"
