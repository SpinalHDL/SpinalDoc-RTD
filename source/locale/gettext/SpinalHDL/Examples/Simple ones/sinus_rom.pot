# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018 - 2024, SpinalHDL
# This file is distributed under the same license as the SpinalHDL package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: SpinalHDL \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-01-02 16:09+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../SpinalHDL/Examples/Simple ones/sinus_rom.rst:4
msgid "Sinus rom"
msgstr ""

#: ../../SpinalHDL/Examples/Simple ones/sinus_rom.rst:6
msgid "Let's imagine that you want to generate a sine wave and also have a filtered version of it (which is completely useless in practical, but let's do it as an example)."
msgstr ""

#: ../../SpinalHDL/Examples/Simple ones/sinus_rom.rst:12
msgid "Parameters name"
msgstr ""

#: ../../SpinalHDL/Examples/Simple ones/sinus_rom.rst:13
#: ../../SpinalHDL/Examples/Simple ones/sinus_rom.rst:29
msgid "Type"
msgstr ""

#: ../../SpinalHDL/Examples/Simple ones/sinus_rom.rst:14
#: ../../SpinalHDL/Examples/Simple ones/sinus_rom.rst:30
msgid "Description"
msgstr ""

#: ../../SpinalHDL/Examples/Simple ones/sinus_rom.rst:15
msgid "resolutionWidth"
msgstr ""

#: ../../SpinalHDL/Examples/Simple ones/sinus_rom.rst:16
#: ../../SpinalHDL/Examples/Simple ones/sinus_rom.rst:19
msgid "Int"
msgstr ""

#: ../../SpinalHDL/Examples/Simple ones/sinus_rom.rst:17
msgid "Number of bits used to represent numbers"
msgstr ""

#: ../../SpinalHDL/Examples/Simple ones/sinus_rom.rst:18
msgid "sampleCount"
msgstr ""

#: ../../SpinalHDL/Examples/Simple ones/sinus_rom.rst:20
msgid "Number of samples in a sine period"
msgstr ""

#: ../../SpinalHDL/Examples/Simple ones/sinus_rom.rst:27
msgid "IO name"
msgstr ""

#: ../../SpinalHDL/Examples/Simple ones/sinus_rom.rst:28
msgid "Direction"
msgstr ""

#: ../../SpinalHDL/Examples/Simple ones/sinus_rom.rst:31
msgid "sin"
msgstr ""

#: ../../SpinalHDL/Examples/Simple ones/sinus_rom.rst:32
#: ../../SpinalHDL/Examples/Simple ones/sinus_rom.rst:36
msgid "out"
msgstr ""

#: ../../SpinalHDL/Examples/Simple ones/sinus_rom.rst:33
#: ../../SpinalHDL/Examples/Simple ones/sinus_rom.rst:37
msgid "SInt(resolutionWidth bits)"
msgstr ""

#: ../../SpinalHDL/Examples/Simple ones/sinus_rom.rst:34
msgid "Output which plays the sine wave"
msgstr ""

#: ../../SpinalHDL/Examples/Simple ones/sinus_rom.rst:35
msgid "sinFiltered"
msgstr ""

#: ../../SpinalHDL/Examples/Simple ones/sinus_rom.rst:38
msgid "Output which plays the filtered version of the sine"
msgstr ""

#: ../../SpinalHDL/Examples/Simple ones/sinus_rom.rst:41
msgid "So let's define the ``Component``\\ :"
msgstr ""

#: ../../SpinalHDL/Examples/Simple ones/sinus_rom.rst:49
msgid "To play the sine wave on the ``sin`` output, you can define a ROM which contain all samples of a sine period (it could be just a quarter, but let's do things the most simple way). Then you can read that ROM with an phase counter and this will generate your sine wave."
msgstr ""

#: ../../SpinalHDL/Examples/Simple ones/sinus_rom.rst:57
msgid "Then to generate ``sinFiltered``\\ , you can for example use a first order low pass filter implementation:"
msgstr ""

#: ../../SpinalHDL/Examples/Simple ones/sinus_rom.rst:64
msgid "Here is the complete code:"
msgstr ""
