# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018 - 2024, SpinalHDL
# This file is distributed under the same license as the SpinalHDL package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: SpinalHDL \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-01-02 16:09+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../SpinalHDL/Developers area/types.rst:3
msgid "Types"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:10
msgid "Introduction"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:12
msgid "The language provides 5 base types and 2 composite types that can be used."
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:15
msgid "Base types : ``Bool``, ``Bits``, ``UInt`` for unsigned integers, ``SInt`` for signed integers, ``Enum``."
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:16
msgid "Composite types : Bundle, Vec."
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:22
msgid "Those types and their usage (with examples) are explained hereafter."
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:24
msgid "Fixed point support is documented :ref:`Fixed-Point <fixed>`"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:27
#: ../../SpinalHDL/Developers area/types.rst:45
#: ../../SpinalHDL/Developers area/types.rst:48
#: ../../SpinalHDL/Developers area/types.rst:51
#: ../../SpinalHDL/Developers area/types.rst:54
#: ../../SpinalHDL/Developers area/types.rst:79
#: ../../SpinalHDL/Developers area/types.rst:83
#: ../../SpinalHDL/Developers area/types.rst:87
#: ../../SpinalHDL/Developers area/types.rst:90
#: ../../SpinalHDL/Developers area/types.rst:99
#: ../../SpinalHDL/Developers area/types.rst:102
#: ../../SpinalHDL/Developers area/types.rst:105
#: ../../SpinalHDL/Developers area/types.rst:108
#: ../../SpinalHDL/Developers area/types.rst:111
#: ../../SpinalHDL/Developers area/types.rst:114
#: ../../SpinalHDL/Developers area/types.rst:240
#: ../../SpinalHDL/Developers area/types.rst:249
#: ../../SpinalHDL/Developers area/types.rst:258
#: ../../SpinalHDL/Developers area/types.rst:261
#: ../../SpinalHDL/Developers area/types.rst:270
#: ../../SpinalHDL/Developers area/types.rst:273
#: ../../SpinalHDL/Developers area/types.rst:276
#: ../../SpinalHDL/Developers area/types.rst:363
#: ../../SpinalHDL/Developers area/types.rst:366
#: ../../SpinalHDL/Developers area/types.rst:369
#: ../../SpinalHDL/Developers area/types.rst:372
#: ../../SpinalHDL/Developers area/types.rst:709
#: ../../SpinalHDL/Developers area/types.rst:712
msgid "Bool"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:29
msgid "This is the standard *boolean* type that corresponds to a single bit."
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:32
#: ../../SpinalHDL/Developers area/types.rst:420
msgid "Declaration"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:34
msgid "The syntax to declare such as value is as follows:"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:40
#: ../../SpinalHDL/Developers area/types.rst:130
msgid "Syntax"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:41
#: ../../SpinalHDL/Developers area/types.rst:75
#: ../../SpinalHDL/Developers area/types.rst:131
#: ../../SpinalHDL/Developers area/types.rst:157
#: ../../SpinalHDL/Developers area/types.rst:180
#: ../../SpinalHDL/Developers area/types.rst:224
#: ../../SpinalHDL/Developers area/types.rst:315
#: ../../SpinalHDL/Developers area/types.rst:350
#: ../../SpinalHDL/Developers area/types.rst:397
#: ../../SpinalHDL/Developers area/types.rst:421
#: ../../SpinalHDL/Developers area/types.rst:434
#: ../../SpinalHDL/Developers area/types.rst:664
#: ../../SpinalHDL/Developers area/types.rst:705
msgid "Description"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:42
#: ../../SpinalHDL/Developers area/types.rst:132
#: ../../SpinalHDL/Developers area/types.rst:225
#: ../../SpinalHDL/Developers area/types.rst:316
#: ../../SpinalHDL/Developers area/types.rst:351
#: ../../SpinalHDL/Developers area/types.rst:398
#: ../../SpinalHDL/Developers area/types.rst:435
#: ../../SpinalHDL/Developers area/types.rst:706
msgid "Return"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:43
msgid "Bool()"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:44
msgid "Create a Bool"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:46
msgid "True"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:47
msgid "Create a Bool assigned with ``true``"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:49
msgid "False"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:50
msgid "Create a Bool assigned with ``false``"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:52
msgid "Bool(value : Boolean)"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:53
msgid "Create a Bool assigned with a Scala Boolean"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:57
msgid "Using this type into SpinalHDL yields:"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:66
#: ../../SpinalHDL/Developers area/types.rst:217
msgid "Operators"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:68
msgid "The following operators are available for the ``Bool`` type"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:74
#: ../../SpinalHDL/Developers area/types.rst:223
#: ../../SpinalHDL/Developers area/types.rst:314
#: ../../SpinalHDL/Developers area/types.rst:349
#: ../../SpinalHDL/Developers area/types.rst:396
#: ../../SpinalHDL/Developers area/types.rst:433
#: ../../SpinalHDL/Developers area/types.rst:704
msgid "Operator"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:76
msgid "Return type"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:77
msgid "!x"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:78
msgid "Logical NOT"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:0
msgid "x && y"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:0
#: ../../SpinalHDL/Developers area/types.rst:229
msgid "x & y"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:82
msgid "Logical AND"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:0
msgid "x || y"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:0
#: ../../SpinalHDL/Developers area/types.rst:232
msgid "x | y"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:86
msgid "Logical OR"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:88
#: ../../SpinalHDL/Developers area/types.rst:235
msgid "x ^ y"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:89
msgid "Logical XOR"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:91
msgid "x.set[()]"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:92
msgid "Set x to True"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:94
msgid "x.clear[()]"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:95
msgid "Set x to False"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:97
msgid "x.rise[()]"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:98
msgid "Return True when x was low at the last cycle and is now high"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:100
msgid "x.rise(initAt : Bool)"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:101
msgid "Same as x.rise but with a reset value"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:103
msgid "x.fall[()]"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:104
msgid "Return True when x was high at the last cycle and is now low"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:106
msgid "x.fall(initAt : Bool)"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:107
msgid "Same as x.fall but with a reset value"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:109
msgid "x.setWhen(cond)"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:110
msgid "Set x when cond is True"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:112
msgid "x.clearWhen(cond)"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:113
msgid "Clear x when cond is True"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:118
msgid "The BitVector family - (``Bits``, ``UInt``, ``SInt``)"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:120
msgid "``BitVector`` is a family of types for storing multiple bits of information in a single value. This type has three subtypes that can be used to model different behaviours:"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:121
msgid "``Bits`` do not convey any sign information whereas the ``UInt`` (unsigned integer) and ``SInt`` (signed integer) provide the required operations to compute correct results if signed / unsigned arithmetic is used."
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:124
msgid "Declaration syntax"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:133
msgid "Bits/UInt/SInt [()]"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:134
msgid "Create a BitVector, bits count is inferred"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:135
#: ../../SpinalHDL/Developers area/types.rst:138
#: ../../SpinalHDL/Developers area/types.rst:141
#: ../../SpinalHDL/Developers area/types.rst:144
#: ../../SpinalHDL/Developers area/types.rst:147
msgid "Bits/UInt/SInt"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:136
msgid "Bits/UInt/SInt(x bits)"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:137
msgid "Create a BitVector with x bits"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:139
msgid "B/U/S(value : Int[,width : BitCount])"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:140
#: ../../SpinalHDL/Developers area/types.rst:143
msgid "Create a BitVector assigned with 'value'"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:142
msgid "B/U/S\"[[size']base]value\""
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:145
msgid "B/U/S([x bits], element, ...)"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:146
msgid "Create a BitVector assigned with the value specified by elements (see the table below)"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:150
msgid "Elements could be defined as follows:"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:156
msgid "Element syntax"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:158
msgid "x : Int -> y : Boolean/Bool"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:159
msgid "Set bit x with y"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:160
msgid "x : Range -> y : Boolean/Bool"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:161
msgid "Set each bits in range x with y"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:162
#: ../../SpinalHDL/Developers area/types.rst:167
msgid "x : Range -> y : T"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:0
#: ../../SpinalHDL/Developers area/types.rst:163
#: ../../SpinalHDL/Developers area/types.rst:168
msgid "Set bits in range x with y"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:164
msgid "x : Range -> y : String"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:0
msgid "The string format follows the same rules as B/U/S\"xyz\" one"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:169
msgid "default -> y : Boolean/Bool"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:0
msgid "Set all unconnected bits with the y value."
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:0
msgid "This feature can only be used to do assignments without the U/B/S prefix"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:174
msgid "You can define a Range values"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:179
msgid "Range syntax"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:181
msgid "Width"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:182
msgid "(x downto y)"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:183
msgid "[x:y] x >= y"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:184
msgid "x-y+1"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:185
msgid "(x to y)"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:186
msgid "[x:y] x <= y"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:187
msgid "y-x+1"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:188
msgid "(x until y)"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:189
msgid "[x:y[ x < y"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:190
msgid "y-x"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:226
msgid "~x"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:227
msgid "Bitwise NOT"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:228
#: ../../SpinalHDL/Developers area/types.rst:322
#: ../../SpinalHDL/Developers area/types.rst:378
msgid "T(w(x) bits)"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:230
msgid "Bitwise AND"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:231
#: ../../SpinalHDL/Developers area/types.rst:234
#: ../../SpinalHDL/Developers area/types.rst:237
#: ../../SpinalHDL/Developers area/types.rst:354
#: ../../SpinalHDL/Developers area/types.rst:357
#: ../../SpinalHDL/Developers area/types.rst:724
msgid "T(max(w(x), w(y) bits)"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:233
msgid "Bitwise OR"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:236
msgid "Bitwise XOR"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:238
#: ../../SpinalHDL/Developers area/types.rst:436
msgid "x(y)"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:239
msgid "Read bitfield, y : Int/UInt"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:241
msgid "x(hi,lo)"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:242
msgid "Read bitfield, hi : Int, lo : Int"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:243
#: ../../SpinalHDL/Developers area/types.rst:252
#: ../../SpinalHDL/Developers area/types.rst:733
msgid "T(hi-lo+1 bits)"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:244
msgid "x(offset,width)"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:245
msgid "Read bitfield, offset: UInt, width: Int"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:246
#: ../../SpinalHDL/Developers area/types.rst:255
#: ../../SpinalHDL/Developers area/types.rst:736
msgid "T(width bits)"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:247
#: ../../SpinalHDL/Developers area/types.rst:439
msgid "x(y) := z"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:248
msgid "Assign bits, y : Int/UInt"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:250
msgid "x(hi,lo) := z"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:251
#: ../../SpinalHDL/Developers area/types.rst:732
msgid "Assign bitfield, hi : Int, lo : Int"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:253
msgid "x(offset,width) := z"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:254
#: ../../SpinalHDL/Developers area/types.rst:735
msgid "Assign bitfield, offset: UInt, width: Int"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:256
msgid "x.msb"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:257
msgid "Return the most significant bit"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:259
msgid "x.lsb"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:260
msgid "Return the least significant bit"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:262
msgid "x.range"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:263
msgid "Return the range (x.high downto 0)"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:264
msgid "Range"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:265
msgid "x.high"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:266
msgid "Return the upper bound of the type x"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:267
#: ../../SpinalHDL/Developers area/types.rst:715
msgid "Int"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:268
msgid "x.xorR"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:269
msgid "XOR all bits of x"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:271
msgid "x.orR"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:272
msgid "OR all bits of x"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:274
msgid "x.andR"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:275
msgid "AND all bits of x"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:277
msgid "x.clearAll[()]"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:278
msgid "Clear all bits"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:279
#: ../../SpinalHDL/Developers area/types.rst:282
#: ../../SpinalHDL/Developers area/types.rst:438
#: ../../SpinalHDL/Developers area/types.rst:739
msgid "T"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:280
msgid "x.setAll[()]"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:281
msgid "Set all bits"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:283
msgid "x.setAllTo(value : Boolean)"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:284
msgid "Set all bits to the given Boolean value"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:286
msgid "x.setAllTo(value : Bool)"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:287
msgid "Set all bits to the given Bool value"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:289
msgid "x.asBools"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:290
msgid "Cast into an array of Bool"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:291
msgid "Vec(Bool(),width(x))"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:295
msgid "Masked comparison"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:297
msgid "Sometimes you need to check equality between a ``BitVector`` and a bits constant that contain holes defined as a bitmask (bit positions not to be compared by the equality expression)."
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:300
msgid "An example demonstrating how to do that (note the use of 'M' prefix) :"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:308
msgid "Bits"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:317
#: ../../SpinalHDL/Developers area/types.rst:320
#: ../../SpinalHDL/Developers area/types.rst:373
#: ../../SpinalHDL/Developers area/types.rst:376
msgid "x >> y"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:318
msgid "Logical shift right, y : Int"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:319
#: ../../SpinalHDL/Developers area/types.rst:375
msgid "T(w(x) - y bits)"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:321
msgid "Logical shift right, y : UInt"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:323
#: ../../SpinalHDL/Developers area/types.rst:326
#: ../../SpinalHDL/Developers area/types.rst:379
#: ../../SpinalHDL/Developers area/types.rst:382
msgid "x << y"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:324
msgid "Logical shift left, y : Int"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:325
#: ../../SpinalHDL/Developers area/types.rst:381
msgid "T(w(x) + y bits)"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:327
msgid "Logical shift left, y : UInt"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:328
#: ../../SpinalHDL/Developers area/types.rst:384
msgid "T(w(x) + max(y) bits)"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:329
msgid "x.rotateLeft(y)"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:330
msgid "Logical left rotation, y : UInt"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:331
msgid "T(w(x))"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:332
#: ../../SpinalHDL/Developers area/types.rst:385
msgid "x.resize(y)"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:333
msgid "Return a resized copy of x, filled with zero bits as necessary at the MSB to widen, may also truncate width retaining at the LSB side, y : Int"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:335
#: ../../SpinalHDL/Developers area/types.rst:339
#: ../../SpinalHDL/Developers area/types.rst:387
msgid "T(y bits)"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:336
msgid "x.resizeLeft(y)"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:337
msgid "Return a resized copy of x, filled with zero bits as necessary at the LSB to widen, may also truncate width retraining at the MSB side, y : Int"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:343
msgid "UInt, SInt"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:352
msgid "x + y"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:353
msgid "Addition"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:355
msgid "x - y"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:356
msgid "Subtraction"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:358
msgid "x * y"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:359
msgid "Multiplication"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:360
msgid "T(w(x) + w(y) bits)"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:361
msgid "x > y"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:362
msgid "Greater than"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:364
msgid "x >= y"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:365
msgid "Greater than or equal"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:367
msgid "x < y"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:368
msgid "Less than"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:370
msgid "x <= y"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:371
msgid "Less than or equal"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:374
msgid "Arithmetic shift right, y : Int"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:377
msgid "Arithmetic shift right, y : UInt"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:380
msgid "Arithmetic shift left, y : Int"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:383
msgid "Arithmetic shift left, y : UInt"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:386
msgid "Return an arithmetic resized copy of x, y : Int"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:391
msgid "Bool, Bits, UInt, SInt"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:399
#: ../../SpinalHDL/Developers area/types.rst:725
msgid "x.asBits"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:400
msgid "Binary cast in Bits"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:401
msgid "Bits(w(x) bits)"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:402
msgid "x.asUInt"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:403
msgid "Binary cast in UInt"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:404
msgid "UInt(w(x) bits)"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:405
msgid "x.asSInt"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:406
msgid "Binary cast in SInt"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:407
msgid "SInt(w(x) bits)"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:408
msgid "x.asBool"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:409
msgid "Binary cast in Bool"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:410
msgid "Bool(x.lsb)"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:414
msgid "Vec"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:422
msgid "Vec(type : Data, size : Int)"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:423
msgid "Create a vector of size time the given type"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:424
msgid "Vec(x,y,..)"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:0
msgid "Create a vector where indexes point to given elements."
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:0
msgid "this construct supports mixed element width"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:437
msgid "Read element y, y : Int/UInt"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:440
msgid "Assign element y with z, y : Int/UInt"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:460
msgid "Bundle"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:462
msgid "Bundles could be used to model data structure line buses and interfaces."
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:463
msgid "All attributes that extends Data (Bool, Bits, UInt, ...) that are defined inside the bundle are considered as part of the bundle."
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:466
msgid "Simple example (RGB/VGA)"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:468
msgid "The following example show an RGB bundle definition with some internal function."
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:484
msgid "Then you can also incorporate a Bundle inside Bundle as deeply as you want:"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:494
msgid "And finaly instantiate your Bundles inside the hardware :"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:504
msgid "If you want to specify your bundle as an input or an output of a Component, you have to do it by the following way :"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:518
msgid "Interface example (APB)"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:520
msgid "If you want to define an interface, let's imagine an APB interface, you can also use bundles :"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:546
msgid "One good practice is to group all construction parameters inside a configuration class. This could make the parametrization much easier later in your components, especially if you have to reuse the same configuration at multiple places. Also if one time you need to add another construction parameter, you will only have to add it into the configuration class and everywhere this one is instantiated:"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:573
msgid "Then at some points, you will probably need to use the APB bus as master or as slave interface of some components. To do that you can define some functions :"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:611
msgid "Then to make that better, the spinal.lib integrates a small master slave utility named IMasterSlave. When a bundle extends IMasterSlave, it should implement/override the asMaster function. It give you the ability to setup a master or a slave interface in a smoother way :"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:622
msgid "An example of an APB bus that implement this IMasterSlave :"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:654
msgid "Enum"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:656
msgid "SpinalHDL supports enumeration with some encodings :"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:662
msgid "Encoding"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:663
msgid "Bit width"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:665
msgid "native"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:667
msgid "Use the VHDL enumeration system, this is the default encoding"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:668
msgid "binarySequancial"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:669
msgid "log2Up(stateCount)"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:670
msgid "Use Bits to store states in declaration order (value from 0 to n-1)"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:671
msgid "binaryOneHot"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:672
msgid "stateCount"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:673
msgid "Use Bits to store state. Each bit position corresponds to one state, only one bit is active at a time when encoded."
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:677
msgid "Define an enumeration type:"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:685
msgid "Instantiate a signal to store the enumeration encoded value and assign it a value :"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:697
msgid "Data (Bool, Bits, UInt, SInt, Enum, Bundle, Vec)"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:699
msgid "All hardware types extends the Data class, which mean that all of them provide following operators :"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:707
msgid "x === y"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:708
msgid "Equality"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:710
msgid "x =/= y"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:711
msgid "Inequality"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:713
msgid "x.getWidth"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:714
msgid "Return bitcount"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:716
msgid "x ## y"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:717
msgid "Concatenate, x->high, y->low"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:718
msgid "Bits(width(x) + width(y) bits)"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:719
msgid "Cat(x)"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:720
msgid "Concatenate list, first element on lsb, x : Array[Data]"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:721
msgid "Bits(sumOfWidth bits)"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:722
msgid "Mux(cond,x,y)"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:723
msgid "if cond ? x : y"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:726
msgid "Cast in Bits"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:727
msgid "Bits(width(x) bits)"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:728
msgid "x.assignFromBits(bits)"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:729
msgid "Assign from Bits"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:731
msgid "x.assignFromBits(bits,hi,lo)"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:734
msgid "x.assignFromBits(bits,offset,width)"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:737
msgid "x.getZero"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:738
msgid "Get equivalent type assigned with zero"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:743
msgid "Literals as signal declaration"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:745
msgid "Literals are generally use as a constant value. But you can also use them to do two things in a single one :"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:748
msgid "Define a wire which is assigned with a constant value"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:749
msgid "Setup inferred type: UInt(4 bits)"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:750
msgid "Clock cycles where `cond =/= True` will result in the constant being reinstated"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:751
msgid "Clock cycles where `cond === True` will result in the signal having the value of `red` due to the last statement wins rule."
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:754
msgid "An example :"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:770
msgid "Continuous Assignment Literals as signal declaration"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:772
msgid "You can also use them in expressions to do three things at once :"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:774
msgid "Define a wire"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:775
msgid "Maintain the result of an equality operation in the hardware logic implementation with the constant value and another signal"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:777
msgid "Setup inferred type: Bool due to use of === equality operator having a result of type Bool"
msgstr ""

#: ../../SpinalHDL/Developers area/types.rst:780
msgid "There is an example :"
msgstr ""
