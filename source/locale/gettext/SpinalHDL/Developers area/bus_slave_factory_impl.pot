# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018 - 2024, SpinalHDL
# This file is distributed under the same license as the SpinalHDL package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: SpinalHDL \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-01-02 16:09+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../SpinalHDL/Developers area/bus_slave_factory_impl.rst:7
msgid "Bus Slave Factory Implementation"
msgstr ""

#: ../../SpinalHDL/Developers area/bus_slave_factory_impl.rst:10
msgid "Introduction"
msgstr ""

#: ../../SpinalHDL/Developers area/bus_slave_factory_impl.rst:12
msgid "This page will document the implementation of the BusSlaveFactory tool and one of those variant. You can get more information about the functionality of that tool :ref:`here <bus_slave_factory>`."
msgstr ""

#: ../../SpinalHDL/Developers area/bus_slave_factory_impl.rst:15
msgid "Specification"
msgstr ""

#: ../../SpinalHDL/Developers area/bus_slave_factory_impl.rst:17
msgid "The class diagram is the following :"
msgstr ""

#: ../../SpinalHDL/Developers area/bus_slave_factory_impl.rst:23
msgid "The ``BusSlaveFactory`` abstract class define minimum requirements that each implementation of it should provide :"
msgstr ""

#: ../../SpinalHDL/Developers area/bus_slave_factory_impl.rst:29
#: ../../SpinalHDL/Developers area/bus_slave_factory_impl.rst:52
msgid "Name"
msgstr ""

#: ../../SpinalHDL/Developers area/bus_slave_factory_impl.rst:30
#: ../../SpinalHDL/Developers area/bus_slave_factory_impl.rst:54
#: ../../SpinalHDL/Developers area/bus_slave_factory_impl.rst:340
msgid "Description"
msgstr ""

#: ../../SpinalHDL/Developers area/bus_slave_factory_impl.rst:31
msgid "busDataWidth"
msgstr ""

#: ../../SpinalHDL/Developers area/bus_slave_factory_impl.rst:32
msgid "Return the data width of the bus"
msgstr ""

#: ../../SpinalHDL/Developers area/bus_slave_factory_impl.rst:33
msgid "read(that,address,bitOffset)"
msgstr ""

#: ../../SpinalHDL/Developers area/bus_slave_factory_impl.rst:34
msgid "When the bus read the ``address``\\ , fill the response with ``that`` at ``bitOffset``"
msgstr ""

#: ../../SpinalHDL/Developers area/bus_slave_factory_impl.rst:35
msgid "write(that,address,bitOffset)"
msgstr ""

#: ../../SpinalHDL/Developers area/bus_slave_factory_impl.rst:36
msgid "When the bus write the ``address``\\ , assign ``that`` with bus's data from ``bitOffset``"
msgstr ""

#: ../../SpinalHDL/Developers area/bus_slave_factory_impl.rst:37
msgid "onWrite(address)(doThat)"
msgstr ""

#: ../../SpinalHDL/Developers area/bus_slave_factory_impl.rst:38
msgid "Call ``doThat`` when a write transaction occur on ``address``"
msgstr ""

#: ../../SpinalHDL/Developers area/bus_slave_factory_impl.rst:39
msgid "onRead(address)(doThat)"
msgstr ""

#: ../../SpinalHDL/Developers area/bus_slave_factory_impl.rst:40
msgid "Call ``doThat`` when a read transaction occur on ``address``"
msgstr ""

#: ../../SpinalHDL/Developers area/bus_slave_factory_impl.rst:41
msgid "nonStopWrite(that,bitOffset)"
msgstr ""

#: ../../SpinalHDL/Developers area/bus_slave_factory_impl.rst:42
msgid "Permanently assign ``that`` by the bus write data from ``bitOffset``"
msgstr ""

#: ../../SpinalHDL/Developers area/bus_slave_factory_impl.rst:45
msgid "By using them the ``BusSlaveFactory`` should also be able to provide many utilities :"
msgstr ""

#: ../../SpinalHDL/Developers area/bus_slave_factory_impl.rst:53
msgid "Return"
msgstr ""

#: ../../SpinalHDL/Developers area/bus_slave_factory_impl.rst:55
msgid "readAndWrite(that,address,bitOffset)"
msgstr ""

#: ../../SpinalHDL/Developers area/bus_slave_factory_impl.rst:57
msgid "Make ``that`` readable and writable at ``address`` and placed at ``bitOffset`` in the word"
msgstr ""

#: ../../SpinalHDL/Developers area/bus_slave_factory_impl.rst:58
msgid "readMultiWord(that,address)"
msgstr ""

#: ../../SpinalHDL/Developers area/bus_slave_factory_impl.rst:0
msgid "Create the memory mapping to read ``that`` from 'address'. :"
msgstr ""

#: ../../SpinalHDL/Developers area/bus_slave_factory_impl.rst:0
msgid "If ``that`` is bigger than one word it extends the register on followings addresses"
msgstr ""

#: ../../SpinalHDL/Developers area/bus_slave_factory_impl.rst:62
msgid "writeMultiWord(that,address)"
msgstr ""

#: ../../SpinalHDL/Developers area/bus_slave_factory_impl.rst:0
msgid "Create the memory mapping to write ``that`` at 'address'. :"
msgstr ""

#: ../../SpinalHDL/Developers area/bus_slave_factory_impl.rst:66
msgid "createWriteOnly(dataType,address,bitOffset)"
msgstr ""

#: ../../SpinalHDL/Developers area/bus_slave_factory_impl.rst:67
#: ../../SpinalHDL/Developers area/bus_slave_factory_impl.rst:70
msgid "T"
msgstr ""

#: ../../SpinalHDL/Developers area/bus_slave_factory_impl.rst:68
msgid "Create a write only register of type ``dataType`` at ``address`` and placed at ``bitOffset`` in the word"
msgstr ""

#: ../../SpinalHDL/Developers area/bus_slave_factory_impl.rst:69
msgid "createReadWrite(dataType,address,bitOffset)"
msgstr ""

#: ../../SpinalHDL/Developers area/bus_slave_factory_impl.rst:71
msgid "Create a read write register of type ``dataType`` at ``address`` and placed at ``bitOffset`` in the word"
msgstr ""

#: ../../SpinalHDL/Developers area/bus_slave_factory_impl.rst:72
msgid "createAndDriveFlow(dataType,address,bitOffset)"
msgstr ""

#: ../../SpinalHDL/Developers area/bus_slave_factory_impl.rst:73
msgid "Flow[T]"
msgstr ""

#: ../../SpinalHDL/Developers area/bus_slave_factory_impl.rst:74
msgid "Create a writable Flow register of type ``dataType`` at ``address`` and placed at ``bitOffset`` in the word"
msgstr ""

#: ../../SpinalHDL/Developers area/bus_slave_factory_impl.rst:75
msgid "drive(that,address,bitOffset)"
msgstr ""

#: ../../SpinalHDL/Developers area/bus_slave_factory_impl.rst:77
msgid "Drive ``that`` with a register writable at ``address`` placed at ``bitOffset`` in the word"
msgstr ""

#: ../../SpinalHDL/Developers area/bus_slave_factory_impl.rst:78
msgid "driveAndRead(that,address,bitOffset)"
msgstr ""

#: ../../SpinalHDL/Developers area/bus_slave_factory_impl.rst:80
msgid "Drive ``that`` with a register writable and readable at ``address`` placed at ``bitOffset`` in the word"
msgstr ""

#: ../../SpinalHDL/Developers area/bus_slave_factory_impl.rst:81
msgid "driveFlow(that,address,bitOffset)"
msgstr ""

#: ../../SpinalHDL/Developers area/bus_slave_factory_impl.rst:83
msgid "Emit on ``that`` a transaction when a write happen at ``address`` by using data placed at ``bitOffset`` in the word"
msgstr ""

#: ../../SpinalHDL/Developers area/bus_slave_factory_impl.rst:0
msgid "readStreamNonBlocking(that,address,"
msgstr ""

#: ../../SpinalHDL/Developers area/bus_slave_factory_impl.rst:0
msgid "validBitOffset,payloadBitOffset)"
msgstr ""

#: ../../SpinalHDL/Developers area/bus_slave_factory_impl.rst:0
msgid "Read ``that`` and consume the transaction when a read happen at ``address``."
msgstr ""

#: ../../SpinalHDL/Developers area/bus_slave_factory_impl.rst:0
msgid "valid <= validBitOffset bit"
msgstr ""

#: ../../SpinalHDL/Developers area/bus_slave_factory_impl.rst:0
msgid "payload <= payloadBitOffset+widthOf(payload) downto ``payloadBitOffset``"
msgstr ""

#: ../../SpinalHDL/Developers area/bus_slave_factory_impl.rst:0
msgid "doBitsAccumulationAndClearOnRead"
msgstr ""

#: ../../SpinalHDL/Developers area/bus_slave_factory_impl.rst:0
msgid "(that,address,bitOffset)"
msgstr ""

#: ../../SpinalHDL/Developers area/bus_slave_factory_impl.rst:0
msgid "Instantiate an internal register which at each cycle do :"
msgstr ""

#: ../../SpinalHDL/Developers area/bus_slave_factory_impl.rst:0
msgid "reg := reg | that"
msgstr ""

#: ../../SpinalHDL/Developers area/bus_slave_factory_impl.rst:0
msgid "Then when a read occur, the register is cleared. This register is readable at ``address`` and placed at ``bitOffset`` in the word"
msgstr ""

#: ../../SpinalHDL/Developers area/bus_slave_factory_impl.rst:98
msgid "About ``BusSlaveFactoryDelayed``, it's still an abstract class, but it capture each primitives (BusSlaveFactoryElement) calls into a data-model. This datamodel is one list that contain all primitives, but also a HashMap that link each address used to a list of primitives that are using it. Then when they all are collected (at the end of the current component), it do a callback that should be implemented by classes that extends it. The implementation of this callback should implement the hardware corresponding to all primitives collected."
msgstr ""

#: ../../SpinalHDL/Developers area/bus_slave_factory_impl.rst:101
msgid "Implementation"
msgstr ""

#: ../../SpinalHDL/Developers area/bus_slave_factory_impl.rst:104
msgid "BusSlaveFactory"
msgstr ""

#: ../../SpinalHDL/Developers area/bus_slave_factory_impl.rst:106
msgid "Let's describe primitives abstract function :"
msgstr ""

#: ../../SpinalHDL/Developers area/bus_slave_factory_impl.rst:133
msgid "Then let's operate the magic to implement all utile based on them :"
msgstr ""

#: ../../SpinalHDL/Developers area/bus_slave_factory_impl.rst:246
msgid "BusSlaveFactoryDelayed"
msgstr ""

#: ../../SpinalHDL/Developers area/bus_slave_factory_impl.rst:248
msgid "Let's implement classes that will be used to store primitives :"
msgstr ""

#: ../../SpinalHDL/Developers area/bus_slave_factory_impl.rst:279
msgid "Then let's implement the ``BusSlaveFactoryDelayed`` itself :"
msgstr ""

#: ../../SpinalHDL/Developers area/bus_slave_factory_impl.rst:330
msgid "AvalonMMSlaveFactory"
msgstr ""

#: ../../SpinalHDL/Developers area/bus_slave_factory_impl.rst:332
msgid "First let's implement the companion object that provide the compatible AvalonMM configuration object that correspond to the following table :"
msgstr ""

#: ../../SpinalHDL/Developers area/bus_slave_factory_impl.rst:338
msgid "Pin name"
msgstr ""

#: ../../SpinalHDL/Developers area/bus_slave_factory_impl.rst:339
msgid "Type"
msgstr ""

#: ../../SpinalHDL/Developers area/bus_slave_factory_impl.rst:341
msgid "read"
msgstr ""

#: ../../SpinalHDL/Developers area/bus_slave_factory_impl.rst:342
#: ../../SpinalHDL/Developers area/bus_slave_factory_impl.rst:345
#: ../../SpinalHDL/Developers area/bus_slave_factory_impl.rst:354
msgid "Bool"
msgstr ""

#: ../../SpinalHDL/Developers area/bus_slave_factory_impl.rst:343
msgid "High one cycle to produce a read request"
msgstr ""

#: ../../SpinalHDL/Developers area/bus_slave_factory_impl.rst:344
msgid "write"
msgstr ""

#: ../../SpinalHDL/Developers area/bus_slave_factory_impl.rst:346
msgid "High one cycle to produce a write request"
msgstr ""

#: ../../SpinalHDL/Developers area/bus_slave_factory_impl.rst:347
msgid "address"
msgstr ""

#: ../../SpinalHDL/Developers area/bus_slave_factory_impl.rst:348
msgid "UInt(addressWidth bits)"
msgstr ""

#: ../../SpinalHDL/Developers area/bus_slave_factory_impl.rst:349
msgid "Byte granularity but word aligned"
msgstr ""

#: ../../SpinalHDL/Developers area/bus_slave_factory_impl.rst:350
msgid "writeData"
msgstr ""

#: ../../SpinalHDL/Developers area/bus_slave_factory_impl.rst:351
#: ../../SpinalHDL/Developers area/bus_slave_factory_impl.rst:357
msgid "Bits(dataWidth bits)"
msgstr ""

#: ../../SpinalHDL/Developers area/bus_slave_factory_impl.rst:353
msgid "readDataValid"
msgstr ""

#: ../../SpinalHDL/Developers area/bus_slave_factory_impl.rst:355
msgid "High to respond a read command"
msgstr ""

#: ../../SpinalHDL/Developers area/bus_slave_factory_impl.rst:356
msgid "readData"
msgstr ""

#: ../../SpinalHDL/Developers area/bus_slave_factory_impl.rst:358
msgid "Valid when readDataValid is high"
msgstr ""

#: ../../SpinalHDL/Developers area/bus_slave_factory_impl.rst:378
msgid "Then, let's implement the AvalonMMSlaveFactory itself."
msgstr ""

#: ../../SpinalHDL/Developers area/bus_slave_factory_impl.rst:429
msgid "Conclusion"
msgstr ""

#: ../../SpinalHDL/Developers area/bus_slave_factory_impl.rst:431
msgid "That's all, you can check one example that use this ``Apb3SlaveFactory`` to create an Apb3UartCtrl :ref:`here <memory_mapped_uart>`."
msgstr ""

#: ../../SpinalHDL/Developers area/bus_slave_factory_impl.rst:433
msgid "If you want to add the support of a new memory bus, it's very simple you just need to implement another variation of the ``BusSlaveFactoryDelayed`` trait. The ``Apb3SlaveFactory`` is probably a good starting point :D"
msgstr ""
