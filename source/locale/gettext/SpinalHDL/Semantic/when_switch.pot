# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018 - 2024, SpinalHDL
# This file is distributed under the same license as the SpinalHDL package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: SpinalHDL \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-01-02 16:09+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../SpinalHDL/Semantic/when_switch.rst:2
msgid "When/Switch/Mux"
msgstr ""

#: ../../SpinalHDL/Semantic/when_switch.rst:5
msgid "When"
msgstr ""

#: ../../SpinalHDL/Semantic/when_switch.rst:7
msgid "As in VHDL and Verilog, signals can be conditionally assigned when a specified condition is met:"
msgstr ""

#: ../../SpinalHDL/Semantic/when_switch.rst:21
msgid "If the keyword ``otherwise`` is on the same line as the closing bracket ``}`` of the ``when`` condition, no dot is needed."
msgstr ""

#: ../../SpinalHDL/Semantic/when_switch.rst:31
msgid "But if ``.otherwise`` is on another line, a dot is **required**:"
msgstr ""

#: ../../SpinalHDL/Semantic/when_switch.rst:43
msgid "Switch"
msgstr ""

#: ../../SpinalHDL/Semantic/when_switch.rst:45
msgid "As in VHDL and Verilog, signals can be conditionally assigned when a signal has a defined value:"
msgstr ""

#: ../../SpinalHDL/Semantic/when_switch.rst:61
msgid "``is`` clauses can be factorized (logical OR) by separating them with a comma ``is(value1, value2)``."
msgstr ""

#: ../../SpinalHDL/Semantic/when_switch.rst:64
#: ../../SpinalHDL/Semantic/when_switch.rst:186
msgid "Example"
msgstr ""

#: ../../SpinalHDL/Semantic/when_switch.rst:86
msgid "is equivalent to"
msgstr ""

#: ../../SpinalHDL/Semantic/when_switch.rst:101
msgid "Additional options"
msgstr ""

#: ../../SpinalHDL/Semantic/when_switch.rst:103
msgid "By default, SpinalHDL will generate an \"UNREACHABLE DEFAULT STATEMENT\" error if a ``switch`` contains a ``default`` statement while all the possible logical values of the ``switch`` are already covered by the ``is`` statements. You can drop this error reporting by specifying `` switch(myValue, coverUnreachable = true) { ... }``."
msgstr ""

#: ../../SpinalHDL/Semantic/when_switch.rst:117
msgid "This check is done on the logical values, not on the physical values. For instance, if you have a SpinalEnum(A,B,C) encoded in a one-hot manner, SpinalHDL will only care about the A,B,C values (\"001\" \"010\" \"100\"). Physical values as \"000\" \"011\" \"101\" \"110\" \"111\" will not be taken in account."
msgstr ""

#: ../../SpinalHDL/Semantic/when_switch.rst:120
msgid "By default, SpinalHDL will generate a \"DUPLICATED ELEMENTS IN SWITCH IS(...) STATEMENT\" error if a given ``is`` statement provides multiple times the same value. For instance ``is(42,42) { ... }`` You can drop this error reporting by specifying ``switch(myValue, strict = true){ ... }``. SpinalHDL will then take care of removing duplicated values."
msgstr ""

#: ../../SpinalHDL/Semantic/when_switch.rst:133
msgid "Local declaration"
msgstr ""

#: ../../SpinalHDL/Semantic/when_switch.rst:135
msgid "It is possible to define new signals inside a when/switch statement:"
msgstr ""

#: ../../SpinalHDL/Semantic/when_switch.rst:152
msgid "SpinalHDL checks that signals defined inside a scope are only assigned inside that scope."
msgstr ""

#: ../../SpinalHDL/Semantic/when_switch.rst:155
msgid "Mux"
msgstr ""

#: ../../SpinalHDL/Semantic/when_switch.rst:157
msgid "If you just need a ``Mux`` with a ``Bool`` selection signal, there are two equivalent syntaxes:"
msgstr ""

#: ../../SpinalHDL/Semantic/when_switch.rst:163
msgid "Syntax"
msgstr ""

#: ../../SpinalHDL/Semantic/when_switch.rst:164
msgid "Return"
msgstr ""

#: ../../SpinalHDL/Semantic/when_switch.rst:165
msgid "Description"
msgstr ""

#: ../../SpinalHDL/Semantic/when_switch.rst:166
msgid "Mux(cond, whenTrue, whenFalse)"
msgstr ""

#: ../../SpinalHDL/Semantic/when_switch.rst:167
#: ../../SpinalHDL/Semantic/when_switch.rst:170
msgid "T"
msgstr ""

#: ../../SpinalHDL/Semantic/when_switch.rst:168
#: ../../SpinalHDL/Semantic/when_switch.rst:171
msgid "Return ``whenTrue`` when ``cond`` is True, ``whenFalse`` otherwise"
msgstr ""

#: ../../SpinalHDL/Semantic/when_switch.rst:169
msgid "cond ? whenTrue | whenFalse"
msgstr ""

#: ../../SpinalHDL/Semantic/when_switch.rst:181
msgid "Bitwise selection"
msgstr ""

#: ../../SpinalHDL/Semantic/when_switch.rst:183
msgid "A bitwise selection looks like the VHDL ``when`` syntax."
msgstr ""

#: ../../SpinalHDL/Semantic/when_switch.rst:198
msgid "``mux`` checks that all possible values are covered to prevent generation of latches. If all possible values are covered, the default statement must not be added:"
msgstr ""

#: ../../SpinalHDL/Semantic/when_switch.rst:211
msgid "``muxList(...)`` and ``muxListDc(...)`` are alternatives bitwise selectors that take a sequence of tuples or mappings as input."
msgstr ""

#: ../../SpinalHDL/Semantic/when_switch.rst:213
msgid "``muxList`` can be used as a direct replacement for ``mux``, providing a easier to use interface in code that generates the cases. It has the same checking behavior as ``mux`` does, requiring full coverage and prohibiting listing a default if it is not needed."
msgstr ""

#: ../../SpinalHDL/Semantic/when_switch.rst:216
msgid "``muxtListDc`` can be used if the uncovered values are not important, they can be left unassigned by using ``muxListDc``. This will add a default case if needed. This default case will generate X's during the simulation if ever encountered. ``muxListDc(...)`` is often a good alternative in generic code."
msgstr ""

#: ../../SpinalHDL/Semantic/when_switch.rst:220
msgid "Below is an example of dividing a ``Bits`` of 128 bits into 32 bits:"
msgstr ""

#: ../../SpinalHDL/Semantic/when_switch.rst:238
msgid "Example for ``muxListDc`` selecting bits from a configurable width vector:"
msgstr ""
