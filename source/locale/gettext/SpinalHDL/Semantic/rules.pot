# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018 - 2024, SpinalHDL
# This file is distributed under the same license as the SpinalHDL package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: SpinalHDL \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-01-02 16:09+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../SpinalHDL/Semantic/rules.rst:2
msgid "Rules"
msgstr ""

#: ../../SpinalHDL/Semantic/rules.rst:4
msgid "The semantics behind SpinalHDL are important to learn, so that you understand what is really happening behind the scenes, and how to control it."
msgstr ""

#: ../../SpinalHDL/Semantic/rules.rst:6
msgid "These semantics are defined by multiple rules:"
msgstr ""

#: ../../SpinalHDL/Semantic/rules.rst:8
msgid "Signals and registers are operating concurrently with each other (parallel behavioral, as in VHDL and Verilog)"
msgstr ""

#: ../../SpinalHDL/Semantic/rules.rst:9
msgid "An assignment to a combinational signal is like expressing a rule which is always true"
msgstr ""

#: ../../SpinalHDL/Semantic/rules.rst:10
msgid "An assignment to a register is like expressing a rule which is applied on each cycle of its clock domain"
msgstr ""

#: ../../SpinalHDL/Semantic/rules.rst:11
msgid "For each signal, the last valid assignment wins"
msgstr ""

#: ../../SpinalHDL/Semantic/rules.rst:12
msgid "Each signal and register can be manipulated as an object during hardware elaboration in a `OOP <https://en.wikipedia.org/wiki/Object-oriented_programming>`_ manner"
msgstr ""

#: ../../SpinalHDL/Semantic/rules.rst:15
msgid "Concurrency"
msgstr ""

#: ../../SpinalHDL/Semantic/rules.rst:17
msgid "The order in which you assign each combinational or registered signal has no behavioral impact."
msgstr ""

#: ../../SpinalHDL/Semantic/rules.rst:19
msgid "For example, both of the following pieces of code are equivalent:"
msgstr ""

#: ../../SpinalHDL/Semantic/rules.rst:28
msgid "This is equivalent to:"
msgstr ""

#: ../../SpinalHDL/Semantic/rules.rst:37
msgid "More generally, when you use the ``:=`` assignment operator, it's like specifying an additional new rule for the left side signal/register."
msgstr ""

#: ../../SpinalHDL/Semantic/rules.rst:40
msgid "Last valid assignment wins"
msgstr ""

#: ../../SpinalHDL/Semantic/rules.rst:42
msgid "If a combinational signal or register is assigned multiple times through the use of the SpinalHDL ``:=`` operator, the last assignment that may execute wins (and so gets to set the value as a result for this state)."
msgstr ""

#: ../../SpinalHDL/Semantic/rules.rst:46
msgid "It could be said that top to bottom evaluation occurs based on the state that exists at that time.  If your upstream signal inputs are driven from registers and so have synchronous behaviour, then it could be said that at each clock cycle the assignments are re-evaluated based on the new state at the time."
msgstr ""

#: ../../SpinalHDL/Semantic/rules.rst:51
msgid "Some reasons why an assignment statement may not get to execute in hardware this clock cycle, maybe due to it being wrapped in a ``when(cond)`` clause."
msgstr ""

#: ../../SpinalHDL/Semantic/rules.rst:54
msgid "Another reason maybe that the SpinalHDL code never made it through elaboration because the feature was paramaterized and disabled during HDL code-generation, see ``paramIsFalse`` use below."
msgstr ""

#: ../../SpinalHDL/Semantic/rules.rst:58
msgid "As an example:"
msgstr ""

#: ../../SpinalHDL/Semantic/rules.rst:78
msgid "This will produce the following truth table:"
msgstr ""

#: ../../SpinalHDL/Semantic/rules.rst:83
msgid "x"
msgstr ""

#: ../../SpinalHDL/Semantic/rules.rst:84
msgid "y"
msgstr ""

#: ../../SpinalHDL/Semantic/rules.rst:85
msgid "=>"
msgstr ""

#: ../../SpinalHDL/Semantic/rules.rst:86
msgid "result"
msgstr ""

#: ../../SpinalHDL/Semantic/rules.rst:87
#: ../../SpinalHDL/Semantic/rules.rst:88
#: ../../SpinalHDL/Semantic/rules.rst:91
#: ../../SpinalHDL/Semantic/rules.rst:96
msgid "False"
msgstr ""

#: ../../SpinalHDL/Semantic/rules.rst:90
#: ../../SpinalHDL/Semantic/rules.rst:94
msgid "1"
msgstr ""

#: ../../SpinalHDL/Semantic/rules.rst:92
#: ../../SpinalHDL/Semantic/rules.rst:95
#: ../../SpinalHDL/Semantic/rules.rst:99
#: ../../SpinalHDL/Semantic/rules.rst:100
msgid "True"
msgstr ""

#: ../../SpinalHDL/Semantic/rules.rst:98
msgid "2"
msgstr ""

#: ../../SpinalHDL/Semantic/rules.rst:102
msgid "3"
msgstr ""

#: ../../SpinalHDL/Semantic/rules.rst:106
msgid "Signal and register interactions with Scala (OOP reference + Functions)"
msgstr ""

#: ../../SpinalHDL/Semantic/rules.rst:108
msgid "In SpinalHDL, each hardware element is modeled by a class instance. This means you can manipulate instances by using their references, such as passing them as arguments to a function."
msgstr ""

#: ../../SpinalHDL/Semantic/rules.rst:110
msgid "As an example, the following code implements a register which is incremented when ``inc`` is True and cleared when ``clear`` is True (``clear`` has priority over ``inc``) :"
msgstr ""

#: ../../SpinalHDL/Semantic/rules.rst:124
msgid "You can implement exactly the same functionality by mixing the previous example with a function that assigns to ``counter``:"
msgstr ""

#: ../../SpinalHDL/Semantic/rules.rst:142
msgid "You can also integrate the conditional check inside the function:"
msgstr ""

#: ../../SpinalHDL/Semantic/rules.rst:158
msgid "And also specify what should be assigned to the function:"
msgstr ""

#: ../../SpinalHDL/Semantic/rules.rst:174
msgid "All of the previous examples are strictly equivalent both in their generated RTL and also in the SpinalHDL compiler's perspective. This is because SpinalHDL only cares about the Scala runtime and the objects instantiated there, it doesn't care about the Scala syntax itself."
msgstr ""

#: ../../SpinalHDL/Semantic/rules.rst:177
msgid "In other words, from a generated RTL generation / SpinalHDL perspective, when you use functions in Scala which generate hardware, it is like the function was inlined. This is also true case for Scala loops, as they will appear in unrolled form in the generated RTL."
msgstr ""
