# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018 - 2024, SpinalHDL
# This file is distributed under the same license as the SpinalHDL package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: SpinalHDL \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-01-02 16:09+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../SpinalHDL/Getting Started/Scala Guide/coding_conventions.rst:3
msgid "Coding conventions"
msgstr ""

#: ../../SpinalHDL/Getting Started/Scala Guide/coding_conventions.rst:6
msgid "Introduction"
msgstr ""

#: ../../SpinalHDL/Getting Started/Scala Guide/coding_conventions.rst:8
msgid "The coding conventions used in SpinalHDL are the same as the ones documented in the `Scala Style Guide <https://docs.scala-lang.org/style/>`_."
msgstr ""

#: ../../SpinalHDL/Getting Started/Scala Guide/coding_conventions.rst:10
msgid "Some additional practical details and cases are explained in next pages."
msgstr ""

#: ../../SpinalHDL/Getting Started/Scala Guide/coding_conventions.rst:13
msgid "class vs case class"
msgstr ""

#: ../../SpinalHDL/Getting Started/Scala Guide/coding_conventions.rst:15
msgid "When you define a ``Bundle`` or a ``Component``, it is preferable to declare it as a case class."
msgstr ""

#: ../../SpinalHDL/Getting Started/Scala Guide/coding_conventions.rst:17
msgid "The reasons are:"
msgstr ""

#: ../../SpinalHDL/Getting Started/Scala Guide/coding_conventions.rst:19
msgid "It avoids the use of ``new`` keywords. Never having to use it is better than sometimes, under some conditions."
msgstr ""

#: ../../SpinalHDL/Getting Started/Scala Guide/coding_conventions.rst:20
msgid "A ``case class`` provides a ``clone`` function. This is useful in SpinalHDL when there is a need to clone a ``Bundle``, for example, when you define a new ``Reg`` or a new ``Stream`` of some kind."
msgstr ""

#: ../../SpinalHDL/Getting Started/Scala Guide/coding_conventions.rst:21
msgid "Construction parameters are directly visible from outside."
msgstr ""

#: ../../SpinalHDL/Getting Started/Scala Guide/coding_conventions.rst:24
msgid "[case] class"
msgstr ""

#: ../../SpinalHDL/Getting Started/Scala Guide/coding_conventions.rst:26
msgid "All classes names should start with a uppercase letter"
msgstr ""

#: ../../SpinalHDL/Getting Started/Scala Guide/coding_conventions.rst:43
msgid "companion object"
msgstr ""

#: ../../SpinalHDL/Getting Started/Scala Guide/coding_conventions.rst:45
msgid "A `companion object <https://docs.scala-lang.org/overviews/scala-book/companion-objects.html>`_ should start with an uppercase letter."
msgstr ""

#: ../../SpinalHDL/Getting Started/Scala Guide/coding_conventions.rst:57
msgid "An exception to this rule is when the companion object is used as a function (only ``apply`` inside), and these ``apply`` functions don't generate hardware:"
msgstr ""

#: ../../SpinalHDL/Getting Started/Scala Guide/coding_conventions.rst:66
msgid "function"
msgstr ""

#: ../../SpinalHDL/Getting Started/Scala Guide/coding_conventions.rst:68
msgid "A function should always start with a lowercase letter:"
msgstr ""

#: ../../SpinalHDL/Getting Started/Scala Guide/coding_conventions.rst:80
msgid "instances"
msgstr ""

#: ../../SpinalHDL/Getting Started/Scala Guide/coding_conventions.rst:82
msgid "Instances of classes should always start with a lowercase letter:"
msgstr ""

#: ../../SpinalHDL/Getting Started/Scala Guide/coding_conventions.rst:90
msgid "if / when"
msgstr ""

#: ../../SpinalHDL/Getting Started/Scala Guide/coding_conventions.rst:92
msgid "Scala ``if`` and SpinalHDL ``when`` should normally be written in the following way:"
msgstr ""

#: ../../SpinalHDL/Getting Started/Scala Guide/coding_conventions.rst:112
msgid "Exceptions could be:"
msgstr ""

#: ../../SpinalHDL/Getting Started/Scala Guide/coding_conventions.rst:114
msgid "It's fine to include a dot before the keyword like methods ``.elsewhen`` and ``.otherwise``."
msgstr ""

#: ../../SpinalHDL/Getting Started/Scala Guide/coding_conventions.rst:115
msgid "It's fine to compress an ``if``\\ /\\ ``when`` statement onto a single line if it makes the code more readable."
msgstr ""

#: ../../SpinalHDL/Getting Started/Scala Guide/coding_conventions.rst:118
msgid "switch"
msgstr ""

#: ../../SpinalHDL/Getting Started/Scala Guide/coding_conventions.rst:120
msgid "SpinalHDL ``switch`` should normally be written in the following way:"
msgstr ""

#: ../../SpinalHDL/Getting Started/Scala Guide/coding_conventions.rst:136
msgid "It's fine to compress an ``is``\\ /\\ ``default`` statement onto a single line if it makes the code more readable."
msgstr ""

#: ../../SpinalHDL/Getting Started/Scala Guide/coding_conventions.rst:139
msgid "Parameters"
msgstr ""

#: ../../SpinalHDL/Getting Started/Scala Guide/coding_conventions.rst:141
msgid "Grouping parameters of a ``Component``/``Bundle`` inside a case class is generally welcome because:"
msgstr ""

#: ../../SpinalHDL/Getting Started/Scala Guide/coding_conventions.rst:143
msgid "Easier to carry/manipulate to configure the design"
msgstr ""

#: ../../SpinalHDL/Getting Started/Scala Guide/coding_conventions.rst:144
msgid "Better maintainability"
msgstr ""

#: ../../SpinalHDL/Getting Started/Scala Guide/coding_conventions.rst:158
msgid "But this should not be applied in all cases. For example: in a FIFO, it doesn't make sense to group the ``dataType`` parameter with the ``depth`` parameter of the fifo because, in general, the ``dataType`` is something related to the design, while the ``depth`` is something related to the configuration of the design."
msgstr ""
