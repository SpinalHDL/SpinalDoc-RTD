# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018 - 2024, SpinalHDL
# This file is distributed under the same license as the SpinalHDL package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: SpinalHDL \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-01-02 16:09+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../SpinalHDL/Getting Started/Scala Guide/basics.rst:3
msgid "Variables and functions should be defined into ``object``\\ , ``class``\\ , ``function``. You can't define them on the root of a Scala file."
msgstr ""

#: ../../SpinalHDL/Getting Started/Scala Guide/basics.rst:6
msgid "Basics"
msgstr ""

#: ../../SpinalHDL/Getting Started/Scala Guide/basics.rst:9
msgid "Types"
msgstr ""

#: ../../SpinalHDL/Getting Started/Scala Guide/basics.rst:11
msgid "In Scala, there are 5 major types:"
msgstr ""

#: ../../SpinalHDL/Getting Started/Scala Guide/basics.rst:17
msgid "Type"
msgstr ""

#: ../../SpinalHDL/Getting Started/Scala Guide/basics.rst:18
msgid "Literal"
msgstr ""

#: ../../SpinalHDL/Getting Started/Scala Guide/basics.rst:19
msgid "Description"
msgstr ""

#: ../../SpinalHDL/Getting Started/Scala Guide/basics.rst:20
msgid "Boolean"
msgstr ""

#: ../../SpinalHDL/Getting Started/Scala Guide/basics.rst:21
msgid "true, false"
msgstr ""

#: ../../SpinalHDL/Getting Started/Scala Guide/basics.rst:23
msgid "Int"
msgstr ""

#: ../../SpinalHDL/Getting Started/Scala Guide/basics.rst:24
msgid "3, 0x32"
msgstr ""

#: ../../SpinalHDL/Getting Started/Scala Guide/basics.rst:25
msgid "32 bits integer"
msgstr ""

#: ../../SpinalHDL/Getting Started/Scala Guide/basics.rst:26
msgid "Float"
msgstr ""

#: ../../SpinalHDL/Getting Started/Scala Guide/basics.rst:27
msgid "3.14f"
msgstr ""

#: ../../SpinalHDL/Getting Started/Scala Guide/basics.rst:28
msgid "32 bits floating point"
msgstr ""

#: ../../SpinalHDL/Getting Started/Scala Guide/basics.rst:29
msgid "Double"
msgstr ""

#: ../../SpinalHDL/Getting Started/Scala Guide/basics.rst:30
msgid "3.14"
msgstr ""

#: ../../SpinalHDL/Getting Started/Scala Guide/basics.rst:31
msgid "64 bits floating point"
msgstr ""

#: ../../SpinalHDL/Getting Started/Scala Guide/basics.rst:32
msgid "String"
msgstr ""

#: ../../SpinalHDL/Getting Started/Scala Guide/basics.rst:33
msgid "\"Hello world\""
msgstr ""

#: ../../SpinalHDL/Getting Started/Scala Guide/basics.rst:34
msgid "UTF-16 string"
msgstr ""

#: ../../SpinalHDL/Getting Started/Scala Guide/basics.rst:38
msgid "Variables"
msgstr ""

#: ../../SpinalHDL/Getting Started/Scala Guide/basics.rst:40
msgid "In Scala, you can define a variable by using the ``var`` keyword:"
msgstr ""

#: ../../SpinalHDL/Getting Started/Scala Guide/basics.rst:49
msgid "Scala is able to infer the type automatically. You don't need to specify it if the variable is assigned at declaration:"
msgstr ""

#: ../../SpinalHDL/Getting Started/Scala Guide/basics.rst:55
msgid "However, it's not very common to use ``var`` in Scala. Instead, constant values defined by ``val`` are often used:"
msgstr ""

#: ../../SpinalHDL/Getting Started/Scala Guide/basics.rst:64
msgid "Functions"
msgstr ""

#: ../../SpinalHDL/Getting Started/Scala Guide/basics.rst:66
msgid "For example, if you want to define a function which returns ``true`` if the sum of its two arguments is bigger than zero, you can do as follows:"
msgstr ""

#: ../../SpinalHDL/Getting Started/Scala Guide/basics.rst:74
msgid "Then, to call this function, you can write:"
msgstr ""

#: ../../SpinalHDL/Getting Started/Scala Guide/basics.rst:80
msgid "You can also specify arguments by name, which is useful if you have many arguments:"
msgstr ""

#: ../../SpinalHDL/Getting Started/Scala Guide/basics.rst:90
msgid "Return"
msgstr ""

#: ../../SpinalHDL/Getting Started/Scala Guide/basics.rst:92
msgid "The ``return`` keyword is not necessary. In absence of it, Scala takes the last statement of your function as the returned value."
msgstr ""

#: ../../SpinalHDL/Getting Started/Scala Guide/basics.rst:101
msgid "Return type inferation"
msgstr ""

#: ../../SpinalHDL/Getting Started/Scala Guide/basics.rst:103
msgid "Scala is able to automatically infer the return type. You don't need to specify it:"
msgstr ""

#: ../../SpinalHDL/Getting Started/Scala Guide/basics.rst:112
msgid "Curly braces"
msgstr ""

#: ../../SpinalHDL/Getting Started/Scala Guide/basics.rst:114
msgid "Scala functions don't require curly braces if your function contains only one statement:"
msgstr ""

#: ../../SpinalHDL/Getting Started/Scala Guide/basics.rst:121
msgid "Function that returns nothing"
msgstr ""

#: ../../SpinalHDL/Getting Started/Scala Guide/basics.rst:123
msgid "If you want a function to return nothing, the return type should be set to ``Unit``. It's equivalent to the C/C++ ``void`` type."
msgstr ""

#: ../../SpinalHDL/Getting Started/Scala Guide/basics.rst:133
msgid "Argument default values"
msgstr ""

#: ../../SpinalHDL/Getting Started/Scala Guide/basics.rst:135
msgid "You can specify a default value for each argument of a function:"
msgstr ""

#: ../../SpinalHDL/Getting Started/Scala Guide/basics.rst:144
msgid "Apply"
msgstr ""

#: ../../SpinalHDL/Getting Started/Scala Guide/basics.rst:146
msgid "Functions named ``apply`` are special because you can call them without having to type their name:"
msgstr ""

#: ../../SpinalHDL/Getting Started/Scala Guide/basics.rst:157
msgid "This concept is also applicable for Scala ``object`` (static)"
msgstr ""

#: ../../SpinalHDL/Getting Started/Scala Guide/basics.rst:168
msgid "Object"
msgstr ""

#: ../../SpinalHDL/Getting Started/Scala Guide/basics.rst:170
msgid "In Scala, there is no ``static`` keyword. In place of that, there is ``object``. Everything defined inside an ``object`` definition is static."
msgstr ""

#: ../../SpinalHDL/Getting Started/Scala Guide/basics.rst:172
msgid "The following example defines a static function named ``pow2`` which takes a floating point value as parameter and returns a floating point value as well."
msgstr ""

#: ../../SpinalHDL/Getting Started/Scala Guide/basics.rst:180
msgid "Then you can call it by writing:"
msgstr ""

#: ../../SpinalHDL/Getting Started/Scala Guide/basics.rst:187
msgid "Entry point (main)"
msgstr ""

#: ../../SpinalHDL/Getting Started/Scala Guide/basics.rst:189
msgid "The entry point of a Scala program (the main function) should be defined inside an object as a function named ``main``."
msgstr ""

#: ../../SpinalHDL/Getting Started/Scala Guide/basics.rst:200
msgid "Class"
msgstr ""

#: ../../SpinalHDL/Getting Started/Scala Guide/basics.rst:202
msgid "The class syntax is very similar to Java. Imagine that you want to define a ``Color`` class which takes as construction parameters three Float values (r,g,b) :"
msgstr ""

#: ../../SpinalHDL/Getting Started/Scala Guide/basics.rst:210
msgid "Then, to instantiate the class from the previous example and use its ``getGrayLevel`` function:"
msgstr ""

#: ../../SpinalHDL/Getting Started/Scala Guide/basics.rst:217
msgid "Be careful, if you want to access a construction parameter of the class from the outside, this construction parameter should be defined as a ``val``:"
msgstr ""

#: ../../SpinalHDL/Getting Started/Scala Guide/basics.rst:227
msgid "Inheritance"
msgstr ""

#: ../../SpinalHDL/Getting Started/Scala Guide/basics.rst:229
msgid "As an example, suppose that you want to define two classes, ``Rectangle`` and ``Square``, which extend the class ``Shape``:"
msgstr ""

#: ../../SpinalHDL/Getting Started/Scala Guide/basics.rst:246
msgid "Case class"
msgstr ""

#: ../../SpinalHDL/Getting Started/Scala Guide/basics.rst:248
msgid "Case class is an alternative way of declaring classes."
msgstr ""

#: ../../SpinalHDL/Getting Started/Scala Guide/basics.rst:256
msgid "Then there are some differences between ``case class`` and ``class`` :"
msgstr ""

#: ../../SpinalHDL/Getting Started/Scala Guide/basics.rst:258
msgid "case classes don't need the ``new`` keyword to be instantiated."
msgstr ""

#: ../../SpinalHDL/Getting Started/Scala Guide/basics.rst:259
msgid "construction parameters are accessible from outside; you don't need to define them as ``val``."
msgstr ""

#: ../../SpinalHDL/Getting Started/Scala Guide/basics.rst:261
msgid "In SpinalHDL, this explains the reasoning behind the coding conventions: it's in general recommended to use ``case class`` instead of ``class`` in order to have less typing and more coherency."
msgstr ""

#: ../../SpinalHDL/Getting Started/Scala Guide/basics.rst:264
msgid "Templates / Type parameterization"
msgstr ""

#: ../../SpinalHDL/Getting Started/Scala Guide/basics.rst:266
msgid "Imagine you want to design a class which is a queue of a given datatype, in that case you need to provide a type parameter to the class:"
msgstr ""

#: ../../SpinalHDL/Getting Started/Scala Guide/basics.rst:275
msgid "If you want to restrict the ``T`` type to be a sub class of a given type (for example ``Shape``), you can use the ``<: Shape`` syntax :"
msgstr ""

#: ../../SpinalHDL/Getting Started/Scala Guide/basics.rst:289
msgid "The same is possible for functions:"
msgstr ""
