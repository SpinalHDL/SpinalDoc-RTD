# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018 - 2024, SpinalHDL
# This file is distributed under the same license as the SpinalHDL package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: SpinalHDL \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-01-02 16:09+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:7
msgid "SoC toplevel (Pinsec)"
msgstr ""

#: ../../SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:10
msgid "Introduction"
msgstr ""

#: ../../SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:12
msgid "``Pinsec`` is a little SoC designed for FPGA. It is available in the SpinalHDL library and some documentation could be find :ref:`there <pinsec_introduction>`"
msgstr ""

#: ../../SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:14
msgid "Its toplevel implementation is an interesting example, because it is a mix some design patterns that make it very easy to modify. Adding a new master or a new peripheral to the bus fabric could be done with little effort."
msgstr ""

#: ../../SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:16
msgid "The toplevel implementation could be consulted at the links here : `https://github.com/SpinalHDL/SpinalHDL/blob/master/lib/src/main/scala/spinal/lib/soc/pinsec/Pinsec.scala <https://github.com/SpinalHDL/SpinalHDL/blob/master/lib/src/main/scala/spinal/lib/soc/pinsec/Pinsec.scala>`_"
msgstr ""

#: ../../SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:19
msgid "This is the Pinsec toplevel hardware diagram :"
msgstr ""

#: ../../SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:25
msgid "Defining all IO"
msgstr ""

#: ../../SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:47
msgid "Clock and resets"
msgstr ""

#: ../../SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:49
msgid "Pinsec has three clocks inputs :"
msgstr ""

#: ../../SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:52
#: ../../SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:70
#: ../../SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:73
#: ../../SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:76
msgid "axiClock"
msgstr ""

#: ../../SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:53
#: ../../SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:79
msgid "vgaClock"
msgstr ""

#: ../../SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:54
#: ../../SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:82
msgid "jtag.tck"
msgstr ""

#: ../../SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:56
msgid "And one reset input :"
msgstr ""

#: ../../SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:59
msgid "asyncReset"
msgstr ""

#: ../../SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:61
msgid "Which will finally give 5 ClockDomain (clock/reset couple) :"
msgstr ""

#: ../../SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:66
msgid "Name"
msgstr ""

#: ../../SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:67
msgid "Clock"
msgstr ""

#: ../../SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:68
msgid "Description"
msgstr ""

#: ../../SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:69
msgid "resetCtrlClockDomain"
msgstr ""

#: ../../SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:71
msgid "Used by the reset controller, Flops of this clock domain are initialized by the FPGA bitstream"
msgstr ""

#: ../../SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:72
msgid "axiClockDomain"
msgstr ""

#: ../../SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:74
msgid "Used by all component connected to the AXI and the APB interconnect"
msgstr ""

#: ../../SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:75
msgid "coreClockDomain"
msgstr ""

#: ../../SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:77
msgid "The only difference with the axiClockDomain, is the fact that the reset could also be asserted by the debug module"
msgstr ""

#: ../../SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:78
msgid "vgaClockDomain"
msgstr ""

#: ../../SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:80
msgid "Used by the VGA controller backend as a pixel clock"
msgstr ""

#: ../../SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:81
msgid "jtagClockDomain"
msgstr ""

#: ../../SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:83
msgid "Used to clock the frontend of the JTAG controller"
msgstr ""

#: ../../SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:87
msgid "Reset controller"
msgstr ""

#: ../../SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:89
msgid "First we need to define the reset controller clock domain, which has no reset wire, but use the FPGA bitstream loading to setup flipflops."
msgstr ""

#: ../../SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:100
msgid "Then we can define a simple reset controller under this clock domain."
msgstr ""

#: ../../SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:131
msgid "Clock domain setup for each system"
msgstr ""

#: ../../SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:133
msgid "Now that the reset controller is implemented, we can define clock domain for all sub-systems of Pinsec :"
msgstr ""

#: ../../SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:157
msgid "Also all the core system of Pinsec will be defined into a ``axi`` clocked area :"
msgstr ""

#: ../../SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:166
msgid "Main components"
msgstr ""

#: ../../SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:168
msgid "Pinsec is constituted mainly by 4 main components :"
msgstr ""

#: ../../SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:171
msgid "One RISCV CPU"
msgstr ""

#: ../../SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:172
msgid "One SDRAM controller"
msgstr ""

#: ../../SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:173
msgid "One on chip memory"
msgstr ""

#: ../../SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:174
msgid "One JTAG controller"
msgstr ""

#: ../../SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:177
msgid "RISCV CPU"
msgstr ""

#: ../../SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:179
msgid "The RISCV CPU used in Pinsec as many parametrization possibilities :"
msgstr ""

#: ../../SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:226
msgid "On chip RAM"
msgstr ""

#: ../../SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:228
msgid "The instantiation of the AXI4 on chip RAM is very simple."
msgstr ""

#: ../../SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:230
msgid "In fact it's not an AXI4 but an Axi4Shared, which mean that a ARW channel replace the AR and AW ones. This solution uses less area while being fully interoperable with full AXI4."
msgstr ""

#: ../../SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:242
msgid "SDRAM controller"
msgstr ""

#: ../../SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:244
msgid "First you need to define the layout and timings of your SDRAM device. On the DE1-SOC, the SDRAM device is an IS42x320D one."
msgstr ""

#: ../../SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:271
msgid "Then you can used those definition to parametrize the SDRAM controller instantiation."
msgstr ""

#: ../../SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:284
msgid "JTAG controller"
msgstr ""

#: ../../SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:286
msgid "The JTAG controller could be used to access memories and debug the CPU from an PC."
msgstr ""

#: ../../SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:298
msgid "Peripherals"
msgstr ""

#: ../../SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:300
msgid "Pinsec has some integrated peripherals :"
msgstr ""

#: ../../SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:303
#: ../../SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:309
msgid "GPIO"
msgstr ""

#: ../../SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:304
#: ../../SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:322
msgid "Timer"
msgstr ""

#: ../../SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:305
msgid "UART"
msgstr ""

#: ../../SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:306
msgid "VGA"
msgstr ""

#: ../../SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:324
msgid "The Pinsec timer module consists of :"
msgstr ""

#: ../../SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:327
msgid "One prescaler"
msgstr ""

#: ../../SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:328
msgid "One 32 bits timer"
msgstr ""

#: ../../SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:329
msgid "Three 16 bits timers"
msgstr ""

#: ../../SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:331
msgid "All of them are packed into the PinsecTimerCtrl component."
msgstr ""

#: ../../SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:338
msgid "UART controller"
msgstr ""

#: ../../SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:340
msgid "First we need to define a configuration for our UART controller :"
msgstr ""

#: ../../SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:356
msgid "Then we can use it to instantiate the UART controller"
msgstr ""

#: ../../SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:363
msgid "VGA controller"
msgstr ""

#: ../../SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:365
msgid "First we need to define a configuration for our VGA controller :"
msgstr ""

#: ../../SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:379
msgid "Then we can use it to instantiate the VGA controller"
msgstr ""

#: ../../SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:386
msgid "Bus interconnects"
msgstr ""

#: ../../SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:388
msgid "There is three interconnections components :"
msgstr ""

#: ../../SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:391
#: ../../SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:409
msgid "AXI4 crossbar"
msgstr ""

#: ../../SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:392
#: ../../SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:396
msgid "AXI4 to APB3 bridge"
msgstr ""

#: ../../SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:393
#: ../../SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:471
msgid "APB3 decoder"
msgstr ""

#: ../../SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:398
msgid "This bridge will be used to connect low bandwidth peripherals to the AXI crossbar."
msgstr ""

#: ../../SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:411
msgid "The AXI4 crossbar that interconnect AXI4 masters and slaves together is generated by using an factory. The concept of this factory is to create it, then call many function on it to configure it, and finaly call the ``build`` function to ask the factory to generate the corresponding hardware :"
msgstr ""

#: ../../SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:421
msgid "First you need to populate slaves interfaces :"
msgstr ""

#: ../../SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:433
msgid "Then you need to populate a matrix of interconnections between slaves and masters (this sets up visibility) :"
msgstr ""

#: ../../SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:446
msgid "Then to reduce combinatorial path length and have a good design FMax, you can ask the factory to insert pipelining stages between itself a given master or slave :"
msgstr ""

#: ../../SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:0
msgid "``halfPipe`` / >> / << / >/->  in the following code are provided by the Stream bus library."
msgstr ""

#: ../../SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:0
msgid "Some documentation could be find :ref:`there <stream>`. In short, it's just some pipelining and interconnection stuff."
msgstr ""

#: ../../SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:473
msgid "The interconnection between the APB3 bridge and all peripherals is done via an APB3Decoder :"
msgstr ""

#: ../../SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:490
msgid "Misc"
msgstr ""

#: ../../SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:492
msgid "To connect all toplevel IO to components, the following code is required :"
msgstr ""

#: ../../SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:503
msgid "And finally some connections between components are required like interrupts and core debug module resets"
msgstr ""
