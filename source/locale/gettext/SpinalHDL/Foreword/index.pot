# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018 - 2024, SpinalHDL
# This file is distributed under the same license as the SpinalHDL package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: SpinalHDL \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-01-02 16:09+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../SpinalHDL/Foreword/index.rst:4
msgid "Foreword"
msgstr ""

#: ../../SpinalHDL/Foreword/index.rst:6
msgid "Preliminary notes:"
msgstr ""

#: ../../SpinalHDL/Foreword/index.rst:8
msgid "All the following statements will be about describing digital hardware. Verification is another tasty topic."
msgstr ""

#: ../../SpinalHDL/Foreword/index.rst:10
msgid "For conciseness, let's assume that SystemVerilog is a recent revision of Verilog."
msgstr ""

#: ../../SpinalHDL/Foreword/index.rst:12
msgid "When reading this, we should not underestimate how much our attachment for our favourite HDL will bias our judgement."
msgstr ""

#: ../../SpinalHDL/Foreword/index.rst:17
msgid "Why moving away from traditional HDL"
msgstr ""

#: ../../SpinalHDL/Foreword/index.rst:20
msgid "VHDL/Verilog aren't Hardware Description Languages"
msgstr ""

#: ../../SpinalHDL/Foreword/index.rst:22
msgid "Those languages are event driven languages created initially for simulation/documentation purposes. Only in a second time they were used as inputs languages for synthesis tools. Which explain the roots of a lot of the following points."
msgstr ""

#: ../../SpinalHDL/Foreword/index.rst:29
msgid "Event driven paradigm doesn't make any sense for RTL"
msgstr ""

#: ../../SpinalHDL/Foreword/index.rst:31
msgid "When you think about it, describing digital hardware (RTL) by using process/always blocks doesn't make any practical senses. Why do we have to worry about a sensitivity list? Why do we have to split our design between processes/always blocks of different natures (combinatorial logic / register without reset / register with async reset)?"
msgstr ""

#: ../../SpinalHDL/Foreword/index.rst:37
msgid "For instance, to implement this:"
msgstr ""

#: ../../SpinalHDL/Foreword/index.rst:42
msgid "Using VHDL processes you write this:"
msgstr ""

#: ../../SpinalHDL/Foreword/index.rst:78
msgid "Using SpinalHDL you write this:"
msgstr ""

#: ../../SpinalHDL/Foreword/index.rst:93
msgid "As for everything, you can get used to this event driven semantic, until you taste something better."
msgstr ""

#: ../../SpinalHDL/Foreword/index.rst:98
msgid "Recent revisions of VHDL and Verilog aren't usable"
msgstr ""

#: ../../SpinalHDL/Foreword/index.rst:100
msgid "The EDA industry is really slow to implement VHDL 2008 and SystemVerilog synthesis capabilities in their tools. Additionally, when it's done, it appear that only a constraining subset of the language is implemented (not talking about simulation features). It result that using any interesting feature of those language revision isn't safe as:"
msgstr ""

#: ../../SpinalHDL/Foreword/index.rst:106
msgid "It will probably make your code incompatible with many EDA tools."
msgstr ""

#: ../../SpinalHDL/Foreword/index.rst:107
msgid "Other companies will likely not accept your IP as their flow isn't ready for it."
msgstr ""

#: ../../SpinalHDL/Foreword/index.rst:110
msgid "Anyway, those revisions don't change the heart of those HDL issues: they are based on a event driven paradigm which doesn't make sense to describe digital hardware."
msgstr ""

#: ../../SpinalHDL/Foreword/index.rst:116
msgid "VHDL records, Verilog struct are broken (SystemVerilog is good on this, if you can use it)"
msgstr ""

#: ../../SpinalHDL/Foreword/index.rst:118
msgid "You can't use them to define an interface, because you can't define their internal signal directions. Even worst, you can't give them construction parameters! So, define your RGB record/struct once, and hope you never have to use it with bigger/smaller color channels..."
msgstr ""

#: ../../SpinalHDL/Foreword/index.rst:123
msgid "Also a fancy thing with VHDL is the fact that if you want to add an array of something into a component entity, you have to define the type of this array into a package... Which can't be parameterized..."
msgstr ""

#: ../../SpinalHDL/Foreword/index.rst:127
msgid "For instance, below is a SpinalHDL APB3 bus definition:"
msgstr ""

#: ../../SpinalHDL/Foreword/index.rst:159
msgid "Then about the VHDL 2008 partial solution and the SystemVerilog interface/modport, lucky you are if your EDA tools / company flow / company policy allow you to use them."
msgstr ""

#: ../../SpinalHDL/Foreword/index.rst:165
msgid "VHDL and Verilog are so verbose"
msgstr ""

#: ../../SpinalHDL/Foreword/index.rst:167
msgid "Really, with VHDL and Verilog, when it starts to be about component instantiation interconnection, the copy-paste god has to be invoked."
msgstr ""

#: ../../SpinalHDL/Foreword/index.rst:170
msgid "To understand it more deeply, below is a SpinalHDL example performing some peripherals instantiation and adding the APB3 decoder required to access them."
msgstr ""

#: ../../SpinalHDL/Foreword/index.rst:203
msgid "Done. That's all. You don't have to bind each signal one by one when you instantiate a module/component because you can access their interfaces in a object-oriented manner."
msgstr ""

#: ../../SpinalHDL/Foreword/index.rst:207
msgid "Also about VHDL/Verilog struct/records, we can say that they are really dirty tricks, without true parameterization and reusability capabilities, trying to hide the fact that those languages were poorly designed."
msgstr ""

#: ../../SpinalHDL/Foreword/index.rst:213
msgid "Meta Hardware Description capabilities"
msgstr ""

#: ../../SpinalHDL/Foreword/index.rst:215
msgid "Basically VHDL and Verilog provide some elaboration tools which aren't directly mapped into hardware as loops / generate statements / macro / function / procedure / task. But that's all."
msgstr ""

#: ../../SpinalHDL/Foreword/index.rst:219
msgid "And even then, they are really limited. For instance, one can't define process/always/component/module blocks into a task/procedure. It is really a bottleneck for many fancy things."
msgstr ""

#: ../../SpinalHDL/Foreword/index.rst:223
msgid "With SpinalHDL you can call a user-defined task/procedure on a bus like that: ``myHandshakeBus.queue(depth=64)``. Below is some code including the definition."
msgstr ""

#: ../../SpinalHDL/Foreword/index.rst:249
msgid "Let's see further, imagine you want to define a state machine. With VHDL/Verilog you have to write a lot of raw code with some switch statements to do it. You can't define the notion of \"StateMachine\", which would give you a nice syntax to define each state. Else you can use a third-party tool to draw your state machine and then generate your VHDL/Verilog equivalent code..."
msgstr ""

#: ../../SpinalHDL/Foreword/index.rst:255
msgid "Meta-hardware description capabilities of SpinalHDL enable you to define your own tools which then allow you to define things in abstracts ways, as for state machines."
msgstr ""

#: ../../SpinalHDL/Foreword/index.rst:259
msgid "Below is an simple example of the usage of a state machine abstraction defined on the top of SpinalHDL:"
msgstr ""

#: ../../SpinalHDL/Foreword/index.rst:290
msgid "Imagine you want to generate the instruction decoding of your CPU. It could require some fancy elaboration time algorithms to generate the less logic possible. But in VHDL/Verilog, your only option to do these kind of things is to write a script which generates the ``.vhd`` and ``.v`` that you want."
msgstr ""

#: ../../SpinalHDL/Foreword/index.rst:295
msgid "There is really much to say about meta-hardware description, but the only true way to understand it and get its real taste is to experiment it. The goal with it is to stop playing with wires and gates, to start taking some distance with that low level stuff, to think reusable."
msgstr ""
