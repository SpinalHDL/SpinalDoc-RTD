# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018 - 2024, SpinalHDL
# This file is distributed under the same license as the SpinalHDL package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: SpinalHDL \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-01-02 16:09+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../SpinalHDL/Simulation/clock.rst:2
msgid "Clock domains"
msgstr ""

#: ../../SpinalHDL/Simulation/clock.rst:5
msgid "Stimulus API"
msgstr ""

#: ../../SpinalHDL/Simulation/clock.rst:7
msgid "Below is a list of ``ClockDomain`` stimulation functions:"
msgstr ""

#: ../../SpinalHDL/Simulation/clock.rst:13
msgid "ClockDomain stimulus functions"
msgstr ""

#: ../../SpinalHDL/Simulation/clock.rst:14
#: ../../SpinalHDL/Simulation/clock.rst:48
#: ../../SpinalHDL/Simulation/clock.rst:84
msgid "Description"
msgstr ""

#: ../../SpinalHDL/Simulation/clock.rst:15
msgid "``forkStimulus(period)``"
msgstr ""

#: ../../SpinalHDL/Simulation/clock.rst:16
msgid "Fork a simulation process to generate the ClockDomain stimulus (clock, reset, softReset, clockEnable signals)"
msgstr ""

#: ../../SpinalHDL/Simulation/clock.rst:17
msgid "``forkSimSpeedPrinter(printPeriod)``"
msgstr ""

#: ../../SpinalHDL/Simulation/clock.rst:18
msgid "Fork a simulation process which will periodically print the simulation speed in kilo-cycles per real time second. ``printPeriod`` is in realtime seconds"
msgstr ""

#: ../../SpinalHDL/Simulation/clock.rst:19
msgid "``clockToggle()``"
msgstr ""

#: ../../SpinalHDL/Simulation/clock.rst:20
msgid "Toggle the clock signal"
msgstr ""

#: ../../SpinalHDL/Simulation/clock.rst:21
msgid "``fallingEdge()``"
msgstr ""

#: ../../SpinalHDL/Simulation/clock.rst:22
msgid "Clear the clock signal"
msgstr ""

#: ../../SpinalHDL/Simulation/clock.rst:23
msgid "``risingEdge()``"
msgstr ""

#: ../../SpinalHDL/Simulation/clock.rst:24
msgid "Set the clock signal"
msgstr ""

#: ../../SpinalHDL/Simulation/clock.rst:25
msgid "``assertReset()``"
msgstr ""

#: ../../SpinalHDL/Simulation/clock.rst:26
msgid "Set the reset signal to its active level"
msgstr ""

#: ../../SpinalHDL/Simulation/clock.rst:27
msgid "``deassertReset()``"
msgstr ""

#: ../../SpinalHDL/Simulation/clock.rst:28
msgid "Set the reset signal to its inactive level"
msgstr ""

#: ../../SpinalHDL/Simulation/clock.rst:29
msgid "``assertClockEnable()``"
msgstr ""

#: ../../SpinalHDL/Simulation/clock.rst:30
#: ../../SpinalHDL/Simulation/clock.rst:32
msgid "Set the clockEnable signal to its active level"
msgstr ""

#: ../../SpinalHDL/Simulation/clock.rst:31
msgid "``deassertClockEnable()``"
msgstr ""

#: ../../SpinalHDL/Simulation/clock.rst:33
msgid "``assertSoftReset()``"
msgstr ""

#: ../../SpinalHDL/Simulation/clock.rst:34
#: ../../SpinalHDL/Simulation/clock.rst:36
msgid "Set the softReset signal to its active level"
msgstr ""

#: ../../SpinalHDL/Simulation/clock.rst:35
msgid "``deassertSoftReset()``"
msgstr ""

#: ../../SpinalHDL/Simulation/clock.rst:39
msgid "Wait API"
msgstr ""

#: ../../SpinalHDL/Simulation/clock.rst:41
#: ../../SpinalHDL/Simulation/clock.rst:77
msgid "Below is a list of ``ClockDomain`` utilities that you can use to wait for a given event from the domain:"
msgstr ""

#: ../../SpinalHDL/Simulation/clock.rst:47
msgid "ClockDomain wait functions"
msgstr ""

#: ../../SpinalHDL/Simulation/clock.rst:49
msgid "``waitSampling([cyclesCount])``"
msgstr ""

#: ../../SpinalHDL/Simulation/clock.rst:50
msgid "Wait until the ``ClockDomain`` makes a sampling, (active clock edge && deassertReset && assertClockEnable)"
msgstr ""

#: ../../SpinalHDL/Simulation/clock.rst:51
msgid "``waitRisingEdge([cyclesCount])``"
msgstr ""

#: ../../SpinalHDL/Simulation/clock.rst:52
msgid "Wait cyclesCount rising edges on the clock; cycleCount defaults to 1 cycle if not otherwise specified. Note, cyclesCount = 0 is legal, and the function is not sensitive to reset/softReset/clockEnable"
msgstr ""

#: ../../SpinalHDL/Simulation/clock.rst:53
msgid "``waitFallingEdge([cyclesCount])``"
msgstr ""

#: ../../SpinalHDL/Simulation/clock.rst:54
msgid "Same as ``waitRisingEdge`` but for the falling edge"
msgstr ""

#: ../../SpinalHDL/Simulation/clock.rst:55
msgid "``waitActiveEdge([cyclesCount])``"
msgstr ""

#: ../../SpinalHDL/Simulation/clock.rst:56
msgid "Same as ``waitRisingEdge`` but for the edge level specified by the ``ClockDomainConfig``"
msgstr ""

#: ../../SpinalHDL/Simulation/clock.rst:57
msgid "``waitRisingEdgeWhere(condition)``"
msgstr ""

#: ../../SpinalHDL/Simulation/clock.rst:58
msgid "Same as ``waitRisingEdge``, but to exit, the boolean ``condition`` must be true when the rising edge occurs"
msgstr ""

#: ../../SpinalHDL/Simulation/clock.rst:59
msgid "``waitFallingEdgeWhere(condition)``"
msgstr ""

#: ../../SpinalHDL/Simulation/clock.rst:60
msgid "Same as ``waitRisingEdgeWhere``, but for the falling edge"
msgstr ""

#: ../../SpinalHDL/Simulation/clock.rst:61
msgid "``waitActiveEdgeWhere(condition)``"
msgstr ""

#: ../../SpinalHDL/Simulation/clock.rst:62
msgid "Same as ``waitRisingEdgeWhere``, but for the edge level specified by the ``ClockDomainConfig``"
msgstr ""

#: ../../SpinalHDL/Simulation/clock.rst:63
msgid "``waitSamplingWhere(condition) : Boolean``"
msgstr ""

#: ../../SpinalHDL/Simulation/clock.rst:64
msgid "Wait until a clockdomain sampled and the given condition is true"
msgstr ""

#: ../../SpinalHDL/Simulation/clock.rst:65
msgid "``waitSamplingWhere(timeout)(condition) : Boolean``"
msgstr ""

#: ../../SpinalHDL/Simulation/clock.rst:66
msgid "Same as waitSamplingWhere defined above, but will never block more than timeout cycles. Return true if the exit condition came from the timeout"
msgstr ""

#: ../../SpinalHDL/Simulation/clock.rst:70
msgid "All the functionality of the wait API can only be called directly from inside a thread, and not from a callback executed via the Callback API."
msgstr ""

#: ../../SpinalHDL/Simulation/clock.rst:75
msgid "Callback API"
msgstr ""

#: ../../SpinalHDL/Simulation/clock.rst:83
msgid "ClockDomain callback functions"
msgstr ""

#: ../../SpinalHDL/Simulation/clock.rst:85
msgid "``onNextSampling { callback }``"
msgstr ""

#: ../../SpinalHDL/Simulation/clock.rst:86
msgid "Execute the callback code only once on the next ``ClockDomain`` sample (active edge + reset off + clock enable on)"
msgstr ""

#: ../../SpinalHDL/Simulation/clock.rst:87
msgid "``onSamplings { callback }``"
msgstr ""

#: ../../SpinalHDL/Simulation/clock.rst:88
msgid "Execute the callback code each time the ``ClockDomain`` sample (active edge + reset off + clock enable on)"
msgstr ""

#: ../../SpinalHDL/Simulation/clock.rst:89
msgid "``onActiveEdges { callback }``"
msgstr ""

#: ../../SpinalHDL/Simulation/clock.rst:90
msgid "Execute the callback code each time the ``ClockDomain`` clock generates its configured edge"
msgstr ""

#: ../../SpinalHDL/Simulation/clock.rst:91
msgid "``onEdges { callback }``"
msgstr ""

#: ../../SpinalHDL/Simulation/clock.rst:92
msgid "Execute the callback code each time the ``ClockDomain`` clock generates a rising or falling edge"
msgstr ""

#: ../../SpinalHDL/Simulation/clock.rst:93
msgid "``onRisingEdges { callback }``"
msgstr ""

#: ../../SpinalHDL/Simulation/clock.rst:94
msgid "Execute the callback code each time the ``ClockDomain`` clock generates a rising edge"
msgstr ""

#: ../../SpinalHDL/Simulation/clock.rst:95
msgid "``onFallingEdges { callback }``"
msgstr ""

#: ../../SpinalHDL/Simulation/clock.rst:96
msgid "Execute the callback code each time the ``ClockDomain`` clock generates a falling edge"
msgstr ""

#: ../../SpinalHDL/Simulation/clock.rst:97
msgid "``onSamplingWhile { callback : Boolean }``"
msgstr ""

#: ../../SpinalHDL/Simulation/clock.rst:98
msgid "Same as onSampling, but you can stop it (forever) by letting the callback returning false"
msgstr ""

#: ../../SpinalHDL/Simulation/clock.rst:103
msgid "Default ClockDomain"
msgstr ""

#: ../../SpinalHDL/Simulation/clock.rst:105
msgid "You can access the default ``ClockDomain`` of your toplevel as shown below:"
msgstr ""

#: ../../SpinalHDL/Simulation/clock.rst:121
msgid "Note that you can also directly fork a standard reset/clock process:"
msgstr ""

#: ../../SpinalHDL/Simulation/clock.rst:127
msgid "An example of how to wait for a rising edge on the clock:"
msgstr ""

#: ../../SpinalHDL/Simulation/clock.rst:135
msgid "New ClockDomain"
msgstr ""

#: ../../SpinalHDL/Simulation/clock.rst:137
msgid "If your toplevel defines some clock and reset inputs which aren't directly integrated into their ``ClockDomain``, you can define their corresponding ``ClockDomain`` directly in the testbench:"
msgstr ""
