# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018 - 2024, SpinalHDL
# This file is distributed under the same license as the SpinalHDL package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: SpinalHDL \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-01-02 16:09+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../SpinalHDL/Simulation/signal.rst:2
msgid "Accessing signals of the simulation"
msgstr ""

#: ../../SpinalHDL/Simulation/signal.rst:5
msgid "Read and write signals"
msgstr ""

#: ../../SpinalHDL/Simulation/signal.rst:7
msgid "Each interface signal of the toplevel can be read and written from Scala:"
msgstr ""

#: ../../SpinalHDL/Simulation/signal.rst:13
#: ../../SpinalHDL/Simulation/signal.rst:124
msgid "Syntax"
msgstr ""

#: ../../SpinalHDL/Simulation/signal.rst:14
#: ../../SpinalHDL/Simulation/signal.rst:125
msgid "Description"
msgstr ""

#: ../../SpinalHDL/Simulation/signal.rst:15
msgid "``Bool.toBoolean``"
msgstr ""

#: ../../SpinalHDL/Simulation/signal.rst:16
msgid "Read a hardware ``Bool`` as a Scala ``Boolean`` value"
msgstr ""

#: ../../SpinalHDL/Simulation/signal.rst:17
msgid "``Bits``/``UInt``/``SInt.toInt``"
msgstr ""

#: ../../SpinalHDL/Simulation/signal.rst:18
msgid "Read a hardware ``BitVector`` as a Scala ``Int`` value"
msgstr ""

#: ../../SpinalHDL/Simulation/signal.rst:19
msgid "``Bits``/``UInt``/``SInt.toLong``"
msgstr ""

#: ../../SpinalHDL/Simulation/signal.rst:20
msgid "Read a hardware ``BitVector`` as a Scala ``Long`` value"
msgstr ""

#: ../../SpinalHDL/Simulation/signal.rst:21
msgid "``Bits``/``UInt``/``SInt.toBigInt``"
msgstr ""

#: ../../SpinalHDL/Simulation/signal.rst:22
msgid "Read a hardware ``BitVector`` as a Scala ``BigInt`` value"
msgstr ""

#: ../../SpinalHDL/Simulation/signal.rst:23
msgid "``SpinalEnumCraft.toEnum``"
msgstr ""

#: ../../SpinalHDL/Simulation/signal.rst:24
msgid "Read a hardware ``SpinalEnumCraft`` as a Scala ``SpinalEnumElement`` value"
msgstr ""

#: ../../SpinalHDL/Simulation/signal.rst:25
msgid "``Bool #= Boolean``"
msgstr ""

#: ../../SpinalHDL/Simulation/signal.rst:26
msgid "Assign a hardware ``Bool`` from an Scala ``Boolean``"
msgstr ""

#: ../../SpinalHDL/Simulation/signal.rst:27
msgid "``Bits``/``UInt``/``SInt #= Int``"
msgstr ""

#: ../../SpinalHDL/Simulation/signal.rst:28
msgid "Assign a hardware ``BitVector`` from a Scala ``Int``"
msgstr ""

#: ../../SpinalHDL/Simulation/signal.rst:29
msgid "``Bits``/``UInt``/``SInt #= Long``"
msgstr ""

#: ../../SpinalHDL/Simulation/signal.rst:30
msgid "Assign a hardware ``BitVector`` from a Scala ``Long``"
msgstr ""

#: ../../SpinalHDL/Simulation/signal.rst:31
msgid "``Bits``/``UInt``/``SInt #= BigInt``"
msgstr ""

#: ../../SpinalHDL/Simulation/signal.rst:32
msgid "Assign a hardware ``BitVector`` from a Scala ``BigInt``"
msgstr ""

#: ../../SpinalHDL/Simulation/signal.rst:33
msgid "``SpinalEnumCraft #= SpinalEnumElement``"
msgstr ""

#: ../../SpinalHDL/Simulation/signal.rst:34
msgid "Assign a hardware ``SpinalEnumCraft`` from a Scala ``SpinalEnumElement``"
msgstr ""

#: ../../SpinalHDL/Simulation/signal.rst:35
msgid "``Data.randomize()``"
msgstr ""

#: ../../SpinalHDL/Simulation/signal.rst:36
msgid "Assign a random value to a SpinalHDL value."
msgstr ""

#: ../../SpinalHDL/Simulation/signal.rst:48
msgid "Accessing signals inside the component's hierarchy"
msgstr ""

#: ../../SpinalHDL/Simulation/signal.rst:50
msgid "To access signals which are inside the component's hierarchy, you have first to set the given signal as ``simPublic``."
msgstr ""

#: ../../SpinalHDL/Simulation/signal.rst:52
msgid "You can add this ``simPublic`` tag directly in the hardware description:"
msgstr ""

#: ../../SpinalHDL/Simulation/signal.rst:76
msgid "Or you can add it later, after having instantiated your toplevel for the simulation:"
msgstr ""

#: ../../SpinalHDL/Simulation/signal.rst:108
msgid "Load and Store of Memory in Simulation"
msgstr ""

#: ../../SpinalHDL/Simulation/signal.rst:110
msgid "It is possible to modify the contents of ``Mem`` hardware interface components in simulation.  The `data` argument should be a word-width value with the `address` being the word-address within."
msgstr ""

#: ../../SpinalHDL/Simulation/signal.rst:114
msgid "There is no API to convert address and/or individual data bits into units other than the natural word size."
msgstr ""

#: ../../SpinalHDL/Simulation/signal.rst:117
msgid "There is no API to mark any memory location with simulation `X` (undefined) state."
msgstr ""

#: ../../SpinalHDL/Simulation/signal.rst:126
msgid "``Mem.getBigInt(address: Long): BigInt``"
msgstr ""

#: ../../SpinalHDL/Simulation/signal.rst:127
msgid "Read a word from simulator at the word-address."
msgstr ""

#: ../../SpinalHDL/Simulation/signal.rst:128
msgid "``Mem.setBigInt(address: Long, data: BigInt)``"
msgstr ""

#: ../../SpinalHDL/Simulation/signal.rst:129
msgid "Write a word to simulator at the word-address."
msgstr ""

#: ../../SpinalHDL/Simulation/signal.rst:131
msgid "Using this simple example using a memory:"
msgstr ""

#: ../../SpinalHDL/Simulation/signal.rst:138
msgid "Setting up the simulation we make the memory accessible:"
msgstr ""

#: ../../SpinalHDL/Simulation/signal.rst:145
msgid "We can read data during simulation, but have to take care that the data is already available (might be a cycle late due to simulation event ordering):"
msgstr ""

#: ../../SpinalHDL/Simulation/signal.rst:153
msgid "And can write to memory like so:"
msgstr ""

#: ../../SpinalHDL/Simulation/signal.rst:160
msgid "Care has to be taken that due to event ordering in simulation e.g. the read depicted above has to be delayed to when the value is actually available in the memory."
msgstr ""
