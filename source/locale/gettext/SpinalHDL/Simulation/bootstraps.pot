# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018 - 2024, SpinalHDL
# This file is distributed under the same license as the SpinalHDL package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: SpinalHDL \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-01-02 16:09+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../SpinalHDL/Simulation/bootstraps.rst:3
msgid "Boot a simulation"
msgstr ""

#: ../../SpinalHDL/Simulation/bootstraps.rst:6
msgid "Introduction"
msgstr ""

#: ../../SpinalHDL/Simulation/bootstraps.rst:8
msgid "Below is an example hardware definition + testbench:"
msgstr ""

#: ../../SpinalHDL/Simulation/bootstraps.rst:46
msgid "Configuration"
msgstr ""

#: ../../SpinalHDL/Simulation/bootstraps.rst:48
msgid "``SimConfig`` will return a default simulation configuration instance on which you can call multiple functions to configure your simulation:"
msgstr ""

#: ../../SpinalHDL/Simulation/bootstraps.rst:54
msgid "Syntax"
msgstr ""

#: ../../SpinalHDL/Simulation/bootstraps.rst:55
msgid "Description"
msgstr ""

#: ../../SpinalHDL/Simulation/bootstraps.rst:56
msgid "``withWave``"
msgstr ""

#: ../../SpinalHDL/Simulation/bootstraps.rst:57
msgid "Enable simulation wave capture (default format)"
msgstr ""

#: ../../SpinalHDL/Simulation/bootstraps.rst:58
msgid "``withVcdWave``"
msgstr ""

#: ../../SpinalHDL/Simulation/bootstraps.rst:59
msgid "Enable simulation wave capture (VCD text format)"
msgstr ""

#: ../../SpinalHDL/Simulation/bootstraps.rst:60
msgid "``withFstWave``"
msgstr ""

#: ../../SpinalHDL/Simulation/bootstraps.rst:61
msgid "Enable simulation wave capture (FST binary format)"
msgstr ""

#: ../../SpinalHDL/Simulation/bootstraps.rst:62
msgid "``withConfig(SpinalConfig)``"
msgstr ""

#: ../../SpinalHDL/Simulation/bootstraps.rst:63
msgid "Specify the ``SpinalConfig`` that should be use to generate the hardware"
msgstr ""

#: ../../SpinalHDL/Simulation/bootstraps.rst:64
msgid "``allOptimisation``"
msgstr ""

#: ../../SpinalHDL/Simulation/bootstraps.rst:65
msgid "Enable all the RTL compilation optimizations to reduce simulation time (will increase compilation time)"
msgstr ""

#: ../../SpinalHDL/Simulation/bootstraps.rst:66
msgid "``workspacePath(path)``"
msgstr ""

#: ../../SpinalHDL/Simulation/bootstraps.rst:67
msgid "Change the folder where the sim files are generated"
msgstr ""

#: ../../SpinalHDL/Simulation/bootstraps.rst:68
msgid "``withVerilator``"
msgstr ""

#: ../../SpinalHDL/Simulation/bootstraps.rst:69
msgid "Use Verilator as simulation backend (default)"
msgstr ""

#: ../../SpinalHDL/Simulation/bootstraps.rst:70
msgid "``withGhdl``"
msgstr ""

#: ../../SpinalHDL/Simulation/bootstraps.rst:71
msgid "Use GHDL as simulation backend"
msgstr ""

#: ../../SpinalHDL/Simulation/bootstraps.rst:72
msgid "``withIVerilog``"
msgstr ""

#: ../../SpinalHDL/Simulation/bootstraps.rst:73
msgid "Use Icarus Verilog as simulation backend"
msgstr ""

#: ../../SpinalHDL/Simulation/bootstraps.rst:74
msgid "``withVCS``"
msgstr ""

#: ../../SpinalHDL/Simulation/bootstraps.rst:75
msgid "Use Synopsys VCS as simulation backend"
msgstr ""

#: ../../SpinalHDL/Simulation/bootstraps.rst:77
msgid "Then you can call the ``compile(rtl)`` function to compile the hardware and warm up the simulator. This function will return a ``SimCompiled`` instance."
msgstr ""

#: ../../SpinalHDL/Simulation/bootstraps.rst:80
msgid "On this ``SimCompiled`` instance you can run your simulation with the following functions:"
msgstr ""

#: ../../SpinalHDL/Simulation/bootstraps.rst:86
msgid "``doSim[(simName[, seed])]{dut => /* main stimulus code */}``"
msgstr ""

#: ../../SpinalHDL/Simulation/bootstraps.rst:83
msgid "Run the simulation until the main thread runs to completion and exits/returns. It will detect and report an error if the simulation gets fully stuck. As long as e.g. a clock is running the simulation can continue forever, it is therefore recommended to use ``SimTimeout(cycles)`` to limit the possible runtime."
msgstr ""

#: ../../SpinalHDL/Simulation/bootstraps.rst:91
msgid "``doSimUntilVoid[(simName[, seed])]{dut => ...}``"
msgstr ""

#: ../../SpinalHDL/Simulation/bootstraps.rst:89
msgid "Run the simulation until it is ended by calling either ``simSuccess()`` or ``simFailure()``. The main stimulus thread can continue or exit early. As long as there are events to process, the simulation will continue. The simulation will report an error if it gets fully stuck."
msgstr ""

#: ../../SpinalHDL/Simulation/bootstraps.rst:93
msgid "The following testbench template will use the following toplevel :"
msgstr ""

#: ../../SpinalHDL/Simulation/bootstraps.rst:102
msgid "Here is a template with many simulation configurations:"
msgstr ""

#: ../../SpinalHDL/Simulation/bootstraps.rst:119
msgid "Here is a template where the simulation ends by completing the simulation main thread execution:"
msgstr ""

#: ../../SpinalHDL/Simulation/bootstraps.rst:130
msgid "Here is a template where the simulation ends by explicitly calling `simSuccess()`:"
msgstr ""

#: ../../SpinalHDL/Simulation/bootstraps.rst:144
msgid "Note is it equivalent to:"
msgstr ""

#: ../../SpinalHDL/Simulation/bootstraps.rst:161
msgid "Note that by default, the simulation files will be placed into the ``simWorkspace/xxx`` folders. You can override the simWorkspace location by setting the ``SPINALSIM_WORKSPACE`` environment variable."
msgstr ""

#: ../../SpinalHDL/Simulation/bootstraps.rst:164
msgid "Running multiple tests on the same hardware"
msgstr ""

#: ../../SpinalHDL/Simulation/bootstraps.rst:179
msgid "Throw Success or Failure of the simulation from a thread"
msgstr ""

#: ../../SpinalHDL/Simulation/bootstraps.rst:181
msgid "At any moment during a simulation you can call ``simSuccess`` or ``simFailure`` to end it."
msgstr ""

#: ../../SpinalHDL/Simulation/bootstraps.rst:183
msgid "It is possible to make a simulation fail when it is too long, for instance because the test-bench is waiting for a condition which never occurs. To do so, call ``SimTimeout(maxDuration)`` where ``maxDuration`` is the time (in simulation units of time) after the which the simulation should be considered to have failed."
msgstr ""

#: ../../SpinalHDL/Simulation/bootstraps.rst:185
msgid "For instance, to make the simulation fail after 1000 times the duration of a clock cycle:"
msgstr ""

#: ../../SpinalHDL/Simulation/bootstraps.rst:194
msgid "Capturing wave for a given window before failure"
msgstr ""

#: ../../SpinalHDL/Simulation/bootstraps.rst:196
msgid "In the case you have a very long simulation, and you don't want to capture the wave on all of it (too bug, too slow), you have mostly 2 ways to do it."
msgstr ""

#: ../../SpinalHDL/Simulation/bootstraps.rst:198
msgid "Either you know already at which ``simTime`` the simulation failed, in which case you can do the following in your testbench :"
msgstr ""

#: ../../SpinalHDL/Simulation/bootstraps.rst:205
msgid "Or you can run a dual lock-step simulation, with one running a bit delayed from the the other one, and which will start recording the wave once the leading simulation had a failure."
msgstr ""

#: ../../SpinalHDL/Simulation/bootstraps.rst:207
msgid "To do this, you can use the DualSimTracer utility, with parameters for the compiled hardware, the window of time you want to capture before failure, and a seed."
msgstr ""

#: ../../SpinalHDL/Simulation/bootstraps.rst:209
msgid "Here is an example :"
msgstr ""

#: ../../SpinalHDL/Simulation/bootstraps.rst:214
msgid "This will generate the following file structure :"
msgstr ""

#: ../../SpinalHDL/Simulation/bootstraps.rst:216
msgid "simWorkspace/Toplevel/explorer/stdout.log : stdout of the simulation which is ahead"
msgstr ""

#: ../../SpinalHDL/Simulation/bootstraps.rst:217
msgid "simWorkspace/Toplevel/tracer/stdout.log : stdout of the simulation doing the wave tracing"
msgstr ""

#: ../../SpinalHDL/Simulation/bootstraps.rst:218
msgid "simWorkspace/Toplevel/tracer.fst : Waveform of the failure"
msgstr ""

#: ../../SpinalHDL/Simulation/bootstraps.rst:220
msgid "The scala terminal will show the explorer simulation stdout."
msgstr ""
