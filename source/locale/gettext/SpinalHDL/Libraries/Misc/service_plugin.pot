# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018 - 2024, SpinalHDL
# This file is distributed under the same license as the SpinalHDL package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: SpinalHDL \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-01-22 03:53+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../SpinalHDL/Libraries/Misc/service_plugin.rst:5
msgid "Plugin"
msgstr ""

#: ../../SpinalHDL/Libraries/Misc/service_plugin.rst:8
msgid "Introduction"
msgstr ""

#: ../../SpinalHDL/Libraries/Misc/service_plugin.rst:10
msgid "For some design, instead of implementing your Component's hardware directly in it, you may instead want to compose its hardware by using some sorts of Plugins. This can provide a few key features :"
msgstr ""

#: ../../SpinalHDL/Libraries/Misc/service_plugin.rst:13
msgid "You can extend the features of your component by adding new plugins in its parameters. For instance adding Floating point support in a CPU."
msgstr ""

#: ../../SpinalHDL/Libraries/Misc/service_plugin.rst:14
msgid "You can swap various implementations of the same functionality just by using another set of plugins. For instance one implementation of a CPU multiplier may fit well on some FPGA, while others may fit well on ASIC."
msgstr ""

#: ../../SpinalHDL/Libraries/Misc/service_plugin.rst:15
msgid "It avoid the very very very large hand written toplevel syndrom where everything has to be connected manualy. Instead plugins can discover their neighborhood by looking/using the software interface of other plugins."
msgstr ""

#: ../../SpinalHDL/Libraries/Misc/service_plugin.rst:17
msgid "VexRiscv and NaxRiscv projects are an example of this. Their are CPUs which have a mostly empty toplevel, and their hardware parts are injected using plugins. For instance :"
msgstr ""

#: ../../SpinalHDL/Libraries/Misc/service_plugin.rst:20
msgid "PcPlugin"
msgstr ""

#: ../../SpinalHDL/Libraries/Misc/service_plugin.rst:21
msgid "FetchPlugin"
msgstr ""

#: ../../SpinalHDL/Libraries/Misc/service_plugin.rst:22
msgid "DecoderPlugin"
msgstr ""

#: ../../SpinalHDL/Libraries/Misc/service_plugin.rst:23
msgid "RegFilePlugin"
msgstr ""

#: ../../SpinalHDL/Libraries/Misc/service_plugin.rst:24
msgid "IntAluPlugin"
msgstr ""

#: ../../SpinalHDL/Libraries/Misc/service_plugin.rst:25
msgid "..."
msgstr ""

#: ../../SpinalHDL/Libraries/Misc/service_plugin.rst:27
msgid "And those plugins will then negociate/propagate/interconnect to each others via their pool of services."
msgstr ""

#: ../../SpinalHDL/Libraries/Misc/service_plugin.rst:29
msgid "While VexRiscv use a strict synchronous 2 phase system (setup/build callback), NaxRiscv uses a more flexible approach which uses the spinal.core.fiber API to fork elaboration threads which can interlock each others in order to ensure a workable elaboration ordering."
msgstr ""

#: ../../SpinalHDL/Libraries/Misc/service_plugin.rst:31
msgid "The Plugin API provide a NaxRiscv like system to define composable components using plugins."
msgstr ""

#: ../../SpinalHDL/Libraries/Misc/service_plugin.rst:34
msgid "Execution order"
msgstr ""

#: ../../SpinalHDL/Libraries/Misc/service_plugin.rst:36
msgid "The main idea is that you have multiple 2 executions phases :"
msgstr ""

#: ../../SpinalHDL/Libraries/Misc/service_plugin.rst:38
msgid "Setup phase, in which plugins can lock/retain each others. The idea is not to start negociation / elaboration yet."
msgstr ""

#: ../../SpinalHDL/Libraries/Misc/service_plugin.rst:39
msgid "Build phase, in which plugins can negociation / elaboration hardware."
msgstr ""

#: ../../SpinalHDL/Libraries/Misc/service_plugin.rst:41
msgid "The build phase will not start before all FiberPlugin are done with their setup phase."
msgstr ""

#: ../../SpinalHDL/Libraries/Misc/service_plugin.rst:61
msgid "Simple example"
msgstr ""

#: ../../SpinalHDL/Libraries/Misc/service_plugin.rst:63
msgid "Here is a simple dummy example with a SubComponent which will be composed using 2 plugins :"
msgstr ""

#: ../../SpinalHDL/Libraries/Misc/service_plugin.rst:102
msgid "Such TopLevel would generate the following Verilog code :"
msgstr ""

#: ../../SpinalHDL/Libraries/Misc/service_plugin.rst:131
msgid "Note each \"during build\" fork an elaboration thread, the DriverPlugin.logic thread execution will be blocked on the \"sp\" evaluation until the StatePlugin.logic execution is done."
msgstr ""

#: ../../SpinalHDL/Libraries/Misc/service_plugin.rst:135
msgid "Interlocking / Ordering"
msgstr ""

#: ../../SpinalHDL/Libraries/Misc/service_plugin.rst:137
msgid "Plugins can interlock each others using Retainer instances. Each plugin instance has a built in lock which can be controlled using retain/release functions."
msgstr ""

#: ../../SpinalHDL/Libraries/Misc/service_plugin.rst:140
msgid "Here is an example based on the above `Simple example` but that time, the DriverPlugin will increment the StatePlugin.logic.signal by an amount set by other plugins (SetupPlugin in our case). And to ensure that the DriverPlugin doesn't generate the hardware too early, the SetupPlugin uses the DriverPlugin.retain/release functions."
msgstr ""

#: ../../SpinalHDL/Libraries/Misc/service_plugin.rst:207
msgid "Here is the generated verilog"
msgstr ""

#: ../../SpinalHDL/Libraries/Misc/service_plugin.rst:236
msgid "Clearly, those examples are overkilled for what they do, the idea in general is more about :"
msgstr ""

#: ../../SpinalHDL/Libraries/Misc/service_plugin.rst:238
msgid "Negociate / create interfaces between plugins (ex jump / flush ports)"
msgstr ""

#: ../../SpinalHDL/Libraries/Misc/service_plugin.rst:239
msgid "Schedule the elaboration (ex decode / dispatch specification)"
msgstr ""

#: ../../SpinalHDL/Libraries/Misc/service_plugin.rst:240
msgid "Provide a distributed framework which can scale up (minimal hardcoding)"
msgstr ""
