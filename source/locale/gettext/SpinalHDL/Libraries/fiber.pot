# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018 - 2024, SpinalHDL
# This file is distributed under the same license as the SpinalHDL package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: SpinalHDL \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-01-02 16:09+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../SpinalHDL/Libraries/fiber.rst:7
msgid "Fiber framework"
msgstr ""

#: ../../SpinalHDL/Libraries/fiber.rst:10
msgid "This framework is not expected to be used for general RTL generation and targets large system design management and code generation. It is currently used as toplevel integration tool in SaxonSoC."
msgstr ""

#: ../../SpinalHDL/Libraries/fiber.rst:13
msgid "Currently in developpement."
msgstr ""

#: ../../SpinalHDL/Libraries/fiber.rst:15
msgid "The Fiber to run the hardware elaboration in a out of order manner, a bit similarly to Makefile, where you can define rules and dependencies which will then be solved when you run a make command. It is very similar to the Scala Future feature."
msgstr ""

#: ../../SpinalHDL/Libraries/fiber.rst:17
msgid "Using this framework can complicate simple things but provide some strong features for complex cases :"
msgstr ""

#: ../../SpinalHDL/Libraries/fiber.rst:19
msgid "You can define things before even knowing all their requirements, ex : instantiating a interruption controller, before knowing how many interrupt signal lines you need"
msgstr ""

#: ../../SpinalHDL/Libraries/fiber.rst:21
msgid "Abstract/lazy/partial SoC architecture definition allowing the creation of SoC template for further specialisations"
msgstr ""

#: ../../SpinalHDL/Libraries/fiber.rst:22
msgid "Automatic requirement negotiation between multiple agents in a decentralized way, ex : between masters and slaves of a memory bus"
msgstr ""

#: ../../SpinalHDL/Libraries/fiber.rst:24
msgid "The framework is mainly composed of :"
msgstr ""

#: ../../SpinalHDL/Libraries/fiber.rst:26
msgid "``Handle[T]``, which can be used later to store a value of type ``T``."
msgstr ""

#: ../../SpinalHDL/Libraries/fiber.rst:27
msgid "``handle.load`` which allow to set the value of a handle (will reschedule all tasks waiting on it)"
msgstr ""

#: ../../SpinalHDL/Libraries/fiber.rst:28
msgid "``handle.get``, which return the value of the given handle. Will block the task execution if that handle isn't loaded yet"
msgstr ""

#: ../../SpinalHDL/Libraries/fiber.rst:29
msgid "``Handle{ /*code*/ }``, which fork a new task which will execute the given code. The result of that code will be loaded into the Handle"
msgstr ""

#: ../../SpinalHDL/Libraries/fiber.rst:30
msgid "``soon(handle)``, which allows the current task to announce that it will load ``handle`` with a value (used for scheduling)"
msgstr ""

#: ../../SpinalHDL/Libraries/fiber.rst:34
msgid "Simple dummy example"
msgstr ""

#: ../../SpinalHDL/Libraries/fiber.rst:36
msgid "There is a simple example :"
msgstr ""

#: ../../SpinalHDL/Libraries/fiber.rst:59
msgid "Its runtime will be :"
msgstr ""

#: ../../SpinalHDL/Libraries/fiber.rst:61
msgid "create a and b"
msgstr ""

#: ../../SpinalHDL/Libraries/fiber.rst:62
msgid "fork the calculator task, but is blocked when executing a.get"
msgstr ""

#: ../../SpinalHDL/Libraries/fiber.rst:63
msgid "fork the printer task, but is blocked when executing calculator.get"
msgstr ""

#: ../../SpinalHDL/Libraries/fiber.rst:64
msgid "load a and b, which reschedule the calculator task (as it was waiting on a)"
msgstr ""

#: ../../SpinalHDL/Libraries/fiber.rst:65
msgid "calculator do its a + b sum, and load its Handle with that result, which reschedule the printer task"
msgstr ""

#: ../../SpinalHDL/Libraries/fiber.rst:66
msgid "printer task print its stuff"
msgstr ""

#: ../../SpinalHDL/Libraries/fiber.rst:67
msgid "everything done"
msgstr ""

#: ../../SpinalHDL/Libraries/fiber.rst:70
msgid "So, the main point of that example is to show that we kind of overcome the sequential execution of things, as a and b are loaded after the definition of the calculator."
msgstr ""

#: ../../SpinalHDL/Libraries/fiber.rst:74
msgid "Handle[T]"
msgstr ""

#: ../../SpinalHDL/Libraries/fiber.rst:76
msgid "Handle[T] are a bit like scala's Future[T], they allow to talk about something before it is even existing, and wait on it."
msgstr ""

#: ../../SpinalHDL/Libraries/fiber.rst:87
msgid "soon(handle)"
msgstr ""

#: ../../SpinalHDL/Libraries/fiber.rst:89
msgid "In order to maintain a proper graph of dependencies between tasks and Handle, a task can specify in advance that it will load a given handle. This is very usefull in case of a generation starvation/deadlock for SpinalHDL to report accuratly where is the issue."
msgstr ""
