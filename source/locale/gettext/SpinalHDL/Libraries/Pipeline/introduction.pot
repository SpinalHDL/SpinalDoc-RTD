# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018 - 2024, SpinalHDL
# This file is distributed under the same license as the SpinalHDL package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: SpinalHDL \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-01-26 16:21+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:3
msgid "Introduction"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:5
msgid "spinal.lib.misc.pipeline provides a pipelining API. The main advantages over manual pipelining are :"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:7
msgid "You don't have to predefine all the signal elements needed for the entire staged system upfront. You can create and consume stagable signals in a more ad hoc fashion as your design requires - without needing to refactor all the intervening stages to know about the signal"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:8
msgid "Signals of the pipeline can utilize the powerful parametrization capabilities of SpinalHDL and be subject to optimization/removal if a specific design build does not require a particular parametrized feature, without any need to modify the staging system design or project code base in a significant way."
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:9
msgid "Manual retiming is much easier, as you don't have to handle the registers / arbitration manualy"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:10
msgid "Manage the arbitration by itself"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:12
msgid "The API is composed of 4 main things :"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:14
msgid "Node : which represents a layer in the pipeline"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:15
msgid "Link : which allows to connect nodes to each other"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:16
msgid "Builder : which will generate the hardware required for a whole pipeline"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:17
msgid "Payload : which are used to retrieve hardware signals on nodes along the pipeline"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:19
msgid "It is important to understand that Payload isn't a hardware data/signal instance, but a key to retrieve a data/signal on nodes along the pipeline, and that the pipeline builder will then automatically interconnect/pipeline every occurrence of a given Payload between nodes."
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:21
msgid "Here is an example to illustrate :"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:27
msgid "Here is a video about this API :"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:29
msgid "https://www.youtube.com/watch?v=74h_-FMWWIM"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:32
msgid "Simple example"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:34
msgid "Here is a simple example which only uses the basics of the API :"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:78
msgid "This will produce the following hardware :"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:83
msgid "Here is a simulation wave :"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:105
msgid "Here is the same example but using more of the API :"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:148
msgid "Payload"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:150
msgid "Payload objects are used to refer to data which can go through the pipeline. Technicaly speaking, Payload is a HardType which has a name and is used as a \"key\" to retrieve the signals in a certain pipeline stage."
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:163
msgid "Note that I got used to name the Payload instances using uppercase. This is to make it very explicit that the thing isn't a hardware signal, but are more like a \"key/type\" to access things."
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:166
msgid "Node"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:168
msgid "Node mostly hosts the valid/ready arbitration signals, and the hardware signals required for all the Payload values going through it."
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:170
msgid "You can access its arbitration via :"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:177
#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:238
#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:268
#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:390
#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:427
msgid "API"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:178
msgid "Access"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:179
#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:218
#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:239
#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:269
#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:391
#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:428
msgid "Description"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:180
msgid "node.valid"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:181
#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:184
#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:187
msgid "RW"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:182
msgid "Is the signal which specifies if a transaction is present on the node. It is driven by the upstream. Once asserted, it must only be de-asserted the cycle after which either both valid and ready or node.cancel are high. valid must not depend on ready."
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:183
msgid "node.ready"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:185
msgid "Is the signal which specifies if the node's transaction can proceed downstream. It is driven by the downstream to create backpresure. The signal has no meaning when there is no transaction (node.valid being deasserted)"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:186
msgid "node.cancel"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:188
msgid "Is the signal which specifies if the node's transaction in being canceled from the pipeline. It is driven by the downstream. The signal has no meaning when there is no transaction (node.valid being deasserted)"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:189
msgid "node.isValid"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:190
#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:193
#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:196
#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:199
#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:202
#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:207
msgid "RO"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:191
msgid "node.valid's read only accessor"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:192
msgid "node.isReady"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:194
msgid "node.ready's read only accessor"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:195
msgid "node.isCancel"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:197
msgid "node.cancel's read only accessor"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:198
msgid "node.isFiring"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:200
msgid "True when the node transaction is successfuly moving futher (valid && ready && !cancel). Useful to commit state changes."
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:201
msgid "node.isMoving"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:203
msgid "True when the node transaction will not be present anymore on the node (starting from the next cycle), either because downstream is ready to take the transaction, or because the transaction is canceled from the pipeline. (valid && (ready || cancel)). Useful to \"reset\" states."
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:206
msgid "node.isCanceling"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:208
msgid "True when the node transaction is being canceled. Meaning that it will not appear anywhere in the pipeline in future cycles."
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:210
msgid "Note that the node.valid/node.ready signals follows the same conventions than the :doc:`../stream`'s ones ."
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:212
msgid "The Node controls (valid/ready/cancel) and status (isValid, isReady, isCancel, isFiring, ...) signals are created on demande. So for instance you can create pipeline with no backpresure by never refering to the ready signal. That's why it is important to use status signals when you want to read the status of something and only use control signals when you to drive something."
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:215
msgid "Here is a list of arbitration cases you can have on a node. valid/ready/cancel define the state we are in, while isFiring/isMoving result of those :"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:218
msgid "valid"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:218
msgid "ready"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:218
msgid "cancel"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:218
msgid "isFiring"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:218
msgid "isMoving"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:220
#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:222
#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:224
#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:226
msgid "0"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:220
#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:226
msgid "X"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:220
msgid "No transaction"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:222
#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:224
#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:226
msgid "1"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:222
msgid "Going through"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:224
msgid "Blocked"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:226
msgid "Canceled"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:230
msgid "Note that if you want to model things like for instance a CPU stage which can block and flush stuff, take a look a the CtrlLink, as it provides the API to do such things."
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:232
msgid "You can access signals referenced by a Payload via:"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:240
msgid "node(Payload)"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:241
msgid "Return the corresponding hardware signal"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:242
msgid "node(Payload, Any)"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:243
msgid "Same as above, but include a second argument which is used as a \"secondary key\". This eases the construction of multi-lane hardware. For instance, when you have a multi issue CPU pipeline, you can use the lane Int id as secondary key"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:244
msgid "node.insert(Data)"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:245
msgid "Return a new Payload instance which is connected to the given Data hardware signal"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:261
msgid "While you can manualy drive/read the arbitration/data of the first/last stage of your pipeline, there is a few utilities to connect its boundaries."
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:270
msgid "node.arbitrateFrom(Stream[T]])"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:271
msgid "Drive a node arbitration from a stream."
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:272
msgid "node.arbitrateFrom(Flow[T]])"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:273
msgid "Drive a node arbitration from the Flow."
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:274
msgid "node.arbitrateTo(Stream[T]])"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:275
msgid "Drive a stream arbitration from the node."
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:276
msgid "node.arbitrateTo(Flow[T]])"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:277
msgid "Drive a Flow arbitration from the node."
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:278
msgid "node.driveFrom(Stream[T]])((Node, T) => Unit)"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:279
msgid "Drive a node from a stream. The provided lambda function can be use to connect the data"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:280
msgid "node.driveFrom(Flow[T]])((Node, T) => Unit)"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:281
#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:285
msgid "Same as above but for Flow"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:282
msgid "node.driveTo(Stream[T]])((T, Node) => Unit)"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:283
msgid "Drive a stream from the node. The provided lambda function can be use to connect the data"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:284
msgid "node.driveTo(Flow[T]])((T, Node) => Unit)"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:305
msgid "In order to reduce verbosity, there is a set of implicit conversions between Payload toward their data representation which can be used when you are in the context of a Node :"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:314
msgid "You can also use those implicit conversions by importing them :"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:327
msgid "There is also an API which alows you to create new Area which provide the whole API of a given node instance (including implicit convertion) without import :"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:338
msgid "Such feature is very useful when you have parametrizable pipeline locations for your hardware (see retiming example)."
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:342
msgid "Links"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:344
msgid "There is few different Links already implemented (but you could also create your own custom one). The idea of Links is to connect two nodes together in various ways. They generally have a `up` Node and a `down` Node."
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:349
msgid "DirectLink"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:351
msgid "Very simple, it connect two nodes with wires only. Here is an example :"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:361
msgid "StageLink"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:363
msgid "This connect two nodes using registers on the data / valid signals and some arbitration on the ready."
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:371
msgid "S2mLink"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:373
msgid "This connect two nodes using registers on the ready signal, which can be useful to improve backpresure combinatorial timings."
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:380
msgid "CtrlLink"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:382
msgid "This is kind of a special Link, as connect two nodes with optional flow control / bypass logic. Its API should be flexible enough to implement a CPU stage with it."
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:384
msgid "Here is its flow control API (The Bool arguments enable the features) :"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:392
msgid "haltWhen(Bool)"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:393
msgid "Allows to block the current transaction (clear up.ready down.valid)"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:394
msgid "throwWhen(Bool)"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:395
msgid "Allows to cancel the current transaction from the pipeline (clear down.valid and make the transaction driver forget its current state)"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:396
msgid "forgetOneWhen(Bool)"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:397
msgid "Allows to request the upstream to forget its current transaction  (but doesn't clear the down.valid)"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:398
msgid "ignoreReadyWhen(Bool)"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:399
msgid "Allows to ignore the downstream ready (set up.ready)"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:400
msgid "duplicateWhen(Bool)"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:401
msgid "Allows to duplicate the current transaction (clear up.ready)"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:402
msgid "terminateWhen(Bool)"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:403
msgid "Allows to hide the current transaction from downstream (clear down.valid)"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:405
msgid "Also note that if you want to do flow control in a conditional scope (ex in a when statement), you can call the following functions :"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:407
msgid "haltIt(), duplicateIt(), terminateIt(), forgetOneNow(), ignoreReadyNow(), throwIt()"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:419
msgid "You can retrieve which nodes are connected to the Link using node.up / node.down."
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:421
msgid "The CtrlLink also provide an API to access Payload :"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:429
msgid "link(Payload)"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:430
msgid "Same as Link.down(Payload)"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:431
msgid "link(Payload, Any)"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:432
msgid "Same as Link.down(Payload, Any)"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:433
msgid "link.insert(Data)"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:434
msgid "Same as Link.down.insert(Data)"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:435
msgid "link.bypass(Payload)"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:436
msgid "Allows to conditionaly override a Payload value between link.up -> link.down. This can be used to fix data hazard in CPU pipelines for instance."
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:455
msgid "Note that if you create a CtrlLink without node arguments, it will create its own nodes internally."
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:466
msgid "Other Links"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:468
msgid "There is also a JoinLink / ForkLink implemented."
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:471
msgid "Your custom Link"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:473
msgid "You can implement your custom links by implementing the Link base class."
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:486
msgid "But that API may change a bit, as it is still fresh."
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:489
msgid "Builder"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:491
msgid "To generate the hardware of your pipeline, you need to give a list of all the Links used in your pipeline."
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:506
msgid "There is also a set of \"all in one\" builders that you can instanciate to help yourself."
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:508
msgid "For instance there is the NodesBuilder class which can be used to create sequentially staged pipelines :"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:521
msgid "Composability"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:523
msgid "One good thing about the API is that it easily allows to compose a pipeline with multiple parallel things. What i mean by \"compose\" is that sometime the pipeline you need to design has parallel processing to do."
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:525
msgid "Imagine you need to do floating point multiplication on 4 pairs of numbers (to later sum them). If those 4 pairs a provided at the same time by a single stream of data, then you don't want 4 different pipelines to multiply them, instead you want to process them all in parallel in the same pipeline."
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:527
msgid "The example below show a pattern which composes a pipeline with multiple lanes to process them in parallel."
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:571
msgid "This will produce the following data path (assuming lanesCount = 2), abitration not being shown :"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:578
msgid "Retiming / Variable lenth"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:580
msgid "Sometime you want to design a pipeline, but you don't really know where the critical paths will be and what the right balance between stages is. And often you can't rely on the synthesis tool doing a good job with automatic retiming."
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:582
msgid "So, you kind of need a easy way to move the logic of your pipeline around."
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:584
msgid "Here is how it can be done with this pipelining API :"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:646
msgid "If then you generate this component like this :"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:659
msgid "You will get a 4 stages separated by 3 layer of flip flop doing your processing :"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:664
msgid "Note the generated hardware verilog is kinda clean (by my standards at least :P) :"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:779
msgid "Also, you can easily tweak how many stages and where you want the processing to be done, for instance you may want to move the inversion hardware in the same stage as the adder. This can be done the following way :"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:793
msgid "Then you may want to remove the output register stage :"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:809
msgid "Simple CPU example"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:811
msgid "Here is a simple/stupid 8 bits CPU example with :"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:813
msgid "3 stages (fetch, decode, execute)"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:814
msgid "embedded fetch memory"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:815
msgid "add / jump / led /delay instructions"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:886
msgid "Here is a simple testbench which implement a loop which will make the led counting up."
msgstr ""
