# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018 - 2024, SpinalHDL
# This file is distributed under the same license as the SpinalHDL package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: SpinalHDL \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-01-02 16:09+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../SpinalHDL/Libraries/regIf.rst:3
msgid "RegIf"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:5
msgid "Register Interface Builder"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:7
msgid "Automatic address, fields allocation and conflict detection"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:8
msgid "28 Register Access types (Covering the 25 types defined by the UVM standard)"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:9
#: ../../SpinalHDL/Libraries/regIf.rst:112
msgid "Automatic documentation generation"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:12
msgid "Automatic allocation"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:14
msgid "Automatic address allocation"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:39
msgid "Automatic fileds allocation"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:54
msgid "conflict detection"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:70
msgid "28 Access Types"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:72
msgid "Most of these come from UVM specification"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:75
#: ../../SpinalHDL/Libraries/regIf.rst:397
#: ../../SpinalHDL/Libraries/regIf.rst:418
msgid "AccessType"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:75
#: ../../SpinalHDL/Libraries/regIf.rst:397
#: ../../SpinalHDL/Libraries/regIf.rst:418
#: ../../SpinalHDL/Libraries/regIf.rst:436
msgid "Description"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:75
msgid "From"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:77
#: ../../SpinalHDL/Libraries/regIf.rst:402
#: ../../SpinalHDL/Libraries/regIf.rst:421
msgid "RO"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:77
msgid "w: no effect, r: no effect"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:77
#: ../../SpinalHDL/Libraries/regIf.rst:78
#: ../../SpinalHDL/Libraries/regIf.rst:79
#: ../../SpinalHDL/Libraries/regIf.rst:80
#: ../../SpinalHDL/Libraries/regIf.rst:81
#: ../../SpinalHDL/Libraries/regIf.rst:82
#: ../../SpinalHDL/Libraries/regIf.rst:83
#: ../../SpinalHDL/Libraries/regIf.rst:84
#: ../../SpinalHDL/Libraries/regIf.rst:85
#: ../../SpinalHDL/Libraries/regIf.rst:86
#: ../../SpinalHDL/Libraries/regIf.rst:87
#: ../../SpinalHDL/Libraries/regIf.rst:88
#: ../../SpinalHDL/Libraries/regIf.rst:89
#: ../../SpinalHDL/Libraries/regIf.rst:90
#: ../../SpinalHDL/Libraries/regIf.rst:91
#: ../../SpinalHDL/Libraries/regIf.rst:92
#: ../../SpinalHDL/Libraries/regIf.rst:93
#: ../../SpinalHDL/Libraries/regIf.rst:94
#: ../../SpinalHDL/Libraries/regIf.rst:95
#: ../../SpinalHDL/Libraries/regIf.rst:96
#: ../../SpinalHDL/Libraries/regIf.rst:97
#: ../../SpinalHDL/Libraries/regIf.rst:98
#: ../../SpinalHDL/Libraries/regIf.rst:99
#: ../../SpinalHDL/Libraries/regIf.rst:100
#: ../../SpinalHDL/Libraries/regIf.rst:101
msgid "UVM"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:78
#: ../../SpinalHDL/Libraries/regIf.rst:400
#: ../../SpinalHDL/Libraries/regIf.rst:401
#: ../../SpinalHDL/Libraries/regIf.rst:420
msgid "RW"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:78
msgid "w: as-is, r: no effect"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:79
msgid "RC"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:79
msgid "w: no effect, r: clears all bits"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:80
msgid "RS"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:80
msgid "w: no effect, r: sets all bits"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:81
msgid "WRC"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:81
msgid "w: as-is, r: clears all bits"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:82
msgid "WRS"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:82
msgid "w: as-is, r: sets all bits"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:83
msgid "WC"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:83
msgid "w: clears all bits, r: no effect"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:84
msgid "WS"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:84
msgid "w: sets all bits, r: no effect"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:85
msgid "WSRC"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:85
msgid "w: sets all bits, r: clears all bits"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:86
msgid "WCRS"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:86
msgid "w: clears all bits, r: sets all bits"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:87
#: ../../SpinalHDL/Libraries/regIf.rst:399
msgid "W1C"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:87
msgid "w: 1/0 clears/no effect on matching bit, r: no effect"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:88
msgid "W1S"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:88
msgid "w: 1/0 sets/no effect on matching bit, r: no effect"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:89
msgid "W1T"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:89
msgid "w: 1/0 toggles/no effect on matching bit, r: no effect"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:90
msgid "W0C"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:90
msgid "w: 1/0 no effect on/clears matching bit, r: no effect"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:91
msgid "W0S"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:91
msgid "w: 1/0 no effect on/sets matching bit, r: no effect"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:92
msgid "W0T"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:92
msgid "w: 1/0 no effect on/toggles matching bit, r: no effect"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:93
msgid "W1SRC"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:93
msgid "w: 1/0 sets/no effect on matching bit, r: clears all bits"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:94
msgid "W1CRS"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:94
msgid "w: 1/0 clears/no effect on matching bit, r: sets all bits"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:95
msgid "W0SRC"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:95
msgid "w: 1/0 no effect on/sets matching bit, r: clears all bits"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:96
msgid "W0CRS"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:96
msgid "w: 1/0 no effect on/clears matching bit, r: sets all bits"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:97
msgid "WO"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:97
msgid "w: as-is, r: error"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:98
msgid "WOC"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:98
msgid "w: clears all bits, r: error"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:99
msgid "WOS"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:99
msgid "w: sets all bits, r: error"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:100
msgid "W1"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:100
msgid "w: first one after hard reset is as-is, other w have no effects, r: no effect"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:101
msgid "WO1"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:101
msgid "w: first one after hard reset is as-is, other w have no effects, r: error"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:102
msgid "NA"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:102
msgid "w: reserved, r: reserved"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:102
#: ../../SpinalHDL/Libraries/regIf.rst:103
#: ../../SpinalHDL/Libraries/regIf.rst:104
#: ../../SpinalHDL/Libraries/regIf.rst:105
#: ../../SpinalHDL/Libraries/regIf.rst:106
#: ../../SpinalHDL/Libraries/regIf.rst:107
#: ../../SpinalHDL/Libraries/regIf.rst:108
msgid "New"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:103
msgid "W1P"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:103
msgid "w: 1/0 pulse/no effect on matching bit, r: no effect"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:104
msgid "W0P"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:104
msgid "w: 0/1 pulse/no effect on matching bit, r: no effect"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:105
msgid "HSRW"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:105
msgid "w: Hardware Set, SoftWare RW"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:106
msgid "RWHS"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:106
msgid "w: SoftWare RW, Hardware Set"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:107
msgid "ROV"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:107
msgid "w: ReadOnly Value, used for hardware version"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:108
msgid "CSTM"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:108
msgid "w: user custom Type, used for document"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:114
msgid "Document Type"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:117
msgid "Document"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:117
msgid "Usage"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:117
msgid "Status"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:119
msgid "HTML"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:119
msgid "``busif.accept(HtmlGenerator(\"regif\", title = \"XXX register file\"))``"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:119
#: ../../SpinalHDL/Libraries/regIf.rst:120
#: ../../SpinalHDL/Libraries/regIf.rst:121
#: ../../SpinalHDL/Libraries/regIf.rst:122
#: ../../SpinalHDL/Libraries/regIf.rst:123
msgid "Y"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:120
msgid "CHeader"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:120
msgid "``busif.accept(CHeaderGenerator(\"header\", \"AP\"))``"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:121
msgid "JSON"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:121
msgid "``busif.accept(JsonGenerator(\"regif\"))``"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:122
msgid "RALF(UVM)"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:122
msgid "``busif.accept(RalfGenerator(\"header\"))``"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:123
msgid "SystemRDL"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:123
msgid "``busif.accept(SystemRdlGenerator(\"regif\", \"addrmap_name\", Some(\"name\"), Some(\"desc\")))``"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:124
msgid "Latex(pdf)"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:124
#: ../../SpinalHDL/Libraries/regIf.rst:125
msgid "N"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:125
msgid "docx"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:128
msgid "HTML auto-doc is now complete, Example source Code:"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:133
msgid "generated HTML document:"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:139
msgid "Special Access Usage"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:141
msgid "**CASE1:** ``RO`` usage"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:143
msgid "``RO`` is different from other types. It does not create registers and requires an external signal to drive it, Attention, please don't forget to drive it."
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:175
msgid "**CASE2:** ``ROV`` usage"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:177
msgid "ASIC design often requires some solidified version information. Unlike RO, it is not expected to generate wire signals"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:179
msgid "old way:"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:186
msgid "new way:"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:194
msgid "**CASE3:** ``HSRW/RWHS`` hardware set type In some cases, such registers are not only configured by software, but also set by hardware signals"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:231
msgid "**CASE4:** ``CSTM`` Although SpinalHDL includes 25 register types and 6 extension types, there are still various demands for private register types in practical application. Therefore, we reserve CSTM types for scalability. CSTM is only used to generate software interfaces, and does not generate actual circuits"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:246
msgid "**CASE5:** ``parasiteField``"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:248
msgid "This is used for software to share the same register on multiple address instead of generating multiple register entities"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:250
msgid "example1: clock gate software enable"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:262
msgid "example2: interrupt raw reg with foce interface for software"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:273
msgid "Byte Mask"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:275
msgid "withStrb"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:279
msgid "Typical Example"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:281
msgid "Batch create REG-Address and fields register"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:321
msgid "Interrupt Factory"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:323
msgid "Manual writing interruption"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:366
msgid "this is a very tedious and repetitive work, a better way is to use the \"factory\" paradigm to auto-generate the documentation for each signal."
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:368
msgid "now the InterruptFactory can do that."
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:370
msgid "Easy Way create interruption:"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:394
msgid "IP level interrupt Factory"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:397
#: ../../SpinalHDL/Libraries/regIf.rst:418
msgid "Register"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:399
msgid "RAW"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:399
msgid "int raw register, set by int event, clear when bus write 1"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:400
msgid "FORCE"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:400
msgid "int force register, for SW debug use"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:401
#: ../../SpinalHDL/Libraries/regIf.rst:420
msgid "MASK"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:401
#: ../../SpinalHDL/Libraries/regIf.rst:420
msgid "int mask register, 1: off; 0: open; defualt 1 int off"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:402
#: ../../SpinalHDL/Libraries/regIf.rst:421
msgid "STATUS"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:402
msgid "int status, Read Only, ``status = raw && ! mask``"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:408
#: ../../SpinalHDL/Libraries/regIf.rst:426
msgid "SpinalUsage:"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:415
msgid "SYS level interrupt merge"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:421
msgid "int status, RO, ``status = int_level && ! mask``"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:433
msgid "Spinal Factory"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:436
msgid "BusInterface method"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:438
#: ../../SpinalHDL/Libraries/regIf.rst:440
msgid "``InterruptFactory(regNamePre: String, triggers: Bool*)``"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:438
msgid "create RAW/FORCE/MASK/STATUS for pulse event"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:439
msgid "``InterruptFactoryNoForce(regNamePre: String, triggers: Bool*)``"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:439
msgid "create RAW/MASK/STATUS for pulse event"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:440
msgid "create MASK/STATUS for level_int merge"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:441
#: ../../SpinalHDL/Libraries/regIf.rst:443
msgid "``InterruptFactoryAt(addrOffset: Int, regNamePre: String, triggers: Bool*)``"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:441
msgid "create RAW/FORCE/MASK/STATUS for pulse event at addrOffset"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:442
msgid "``InterruptFactoryNoForceAt(addrOffset: Int, regNamePre: String, triggers: Bool*)``"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:442
msgid "create RAW/MASK/STATUS for pulse event at addrOffset"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:443
msgid "create MASK/STATUS for level_int merge at addrOffset"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:447
msgid "Example"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:479
msgid "DefaultReadValue"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:481
msgid "When the software reads a reserved address, the current policy is to return normally, readerror=0. In order to facilitate software debugging, the read back value can be configured, which is 0 by default"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:499
msgid "Developers Area"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:501
msgid "You can add your document Type by extending the `BusIfVistor` Trait"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:503
msgid "``case class Latex(fileName : String) extends BusIfVisitor{ ... }``"
msgstr ""

#: ../../SpinalHDL/Libraries/regIf.rst:505
msgid "BusIfVistor give access BusIf.RegInsts to do what you want"
msgstr ""
