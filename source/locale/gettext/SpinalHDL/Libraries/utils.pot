# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018 - 2024, SpinalHDL
# This file is distributed under the same license as the SpinalHDL package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: SpinalHDL \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-01-02 16:09+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../SpinalHDL/Libraries/utils.rst:5
msgid "Utils"
msgstr ""

#: ../../SpinalHDL/Libraries/utils.rst:7
msgid "Some utils are also present in :ref:`spinal.core <utils>`"
msgstr ""

#: ../../SpinalHDL/Libraries/utils.rst:10
msgid "State less utilities"
msgstr ""

#: ../../SpinalHDL/Libraries/utils.rst:16
#: ../../SpinalHDL/Libraries/utils.rst:83
#: ../../SpinalHDL/Libraries/utils.rst:216
msgid "Syntax"
msgstr ""

#: ../../SpinalHDL/Libraries/utils.rst:17
#: ../../SpinalHDL/Libraries/utils.rst:84
#: ../../SpinalHDL/Libraries/utils.rst:217
msgid "Return"
msgstr ""

#: ../../SpinalHDL/Libraries/utils.rst:18
#: ../../SpinalHDL/Libraries/utils.rst:85
#: ../../SpinalHDL/Libraries/utils.rst:189
#: ../../SpinalHDL/Libraries/utils.rst:218
msgid "Description"
msgstr ""

#: ../../SpinalHDL/Libraries/utils.rst:19
msgid "toGray(x : UInt)"
msgstr ""

#: ../../SpinalHDL/Libraries/utils.rst:20
#: ../../SpinalHDL/Libraries/utils.rst:44
#: ../../SpinalHDL/Libraries/utils.rst:47
#: ../../SpinalHDL/Libraries/utils.rst:53
msgid "Bits"
msgstr ""

#: ../../SpinalHDL/Libraries/utils.rst:21
msgid "Return the gray value converted from ``x`` (UInt)"
msgstr ""

#: ../../SpinalHDL/Libraries/utils.rst:22
msgid "fromGray(x : Bits)"
msgstr ""

#: ../../SpinalHDL/Libraries/utils.rst:23
#: ../../SpinalHDL/Libraries/utils.rst:30
#: ../../SpinalHDL/Libraries/utils.rst:34
msgid "UInt"
msgstr ""

#: ../../SpinalHDL/Libraries/utils.rst:24
msgid "Return the UInt value converted value from ``x`` (gray)"
msgstr ""

#: ../../SpinalHDL/Libraries/utils.rst:25
msgid "Reverse(x : T)"
msgstr ""

#: ../../SpinalHDL/Libraries/utils.rst:26
#: ../../SpinalHDL/Libraries/utils.rst:41
#: ../../SpinalHDL/Libraries/utils.rst:61
#: ../../SpinalHDL/Libraries/utils.rst:67
#: ../../SpinalHDL/Libraries/utils.rst:72
#: ../../SpinalHDL/Libraries/utils.rst:87
#: ../../SpinalHDL/Libraries/utils.rst:95
msgid "T"
msgstr ""

#: ../../SpinalHDL/Libraries/utils.rst:27
msgid "Flip all bits (lsb + n -> msb - n)"
msgstr ""

#: ../../SpinalHDL/Libraries/utils.rst:0
msgid "OHToUInt(x : Seq[Bool])"
msgstr ""

#: ../../SpinalHDL/Libraries/utils.rst:0
msgid "OHToUInt(x : BitVector)"
msgstr ""

#: ../../SpinalHDL/Libraries/utils.rst:31
msgid "Return the index of the single bit set (one hot) in ``x``"
msgstr ""

#: ../../SpinalHDL/Libraries/utils.rst:0
msgid "CountOne(x : Seq[Bool])"
msgstr ""

#: ../../SpinalHDL/Libraries/utils.rst:0
msgid "CountOne(x : BitVector)"
msgstr ""

#: ../../SpinalHDL/Libraries/utils.rst:35
msgid "Return the number of bit set in ``x``"
msgstr ""

#: ../../SpinalHDL/Libraries/utils.rst:0
msgid "MajorityVote(x : Seq[Bool])"
msgstr ""

#: ../../SpinalHDL/Libraries/utils.rst:0
msgid "MajorityVote(x : BitVector)"
msgstr ""

#: ../../SpinalHDL/Libraries/utils.rst:38
#: ../../SpinalHDL/Libraries/utils.rst:191
msgid "Bool"
msgstr ""

#: ../../SpinalHDL/Libraries/utils.rst:39
msgid "Return True if the number of bit set is > x.size / 2"
msgstr ""

#: ../../SpinalHDL/Libraries/utils.rst:40
msgid "EndiannessSwap(that: T[, base:BitCount])"
msgstr ""

#: ../../SpinalHDL/Libraries/utils.rst:42
msgid "Big-Endian <-> Little-Endian"
msgstr ""

#: ../../SpinalHDL/Libraries/utils.rst:43
msgid "OHMasking.first(x : Bits)"
msgstr ""

#: ../../SpinalHDL/Libraries/utils.rst:45
msgid "Apply a mask on x to only keep the first bit set"
msgstr ""

#: ../../SpinalHDL/Libraries/utils.rst:46
msgid "OHMasking.last(x : Bits)"
msgstr ""

#: ../../SpinalHDL/Libraries/utils.rst:48
msgid "Apply a mask on x to only keep the last bit set"
msgstr ""

#: ../../SpinalHDL/Libraries/utils.rst:0
msgid "OHMasking.roundRobin("
msgstr ""

#: ../../SpinalHDL/Libraries/utils.rst:0
msgid "requests : Bits,"
msgstr ""

#: ../../SpinalHDL/Libraries/utils.rst:0
msgid "ohPriority : Bits"
msgstr ""

#: ../../SpinalHDL/Libraries/utils.rst:0
msgid ")"
msgstr ""

#: ../../SpinalHDL/Libraries/utils.rst:0
msgid "Apply a mask on x to only keep the bit set from ``requests``."
msgstr ""

#: ../../SpinalHDL/Libraries/utils.rst:0
msgid "it start looking in ``requests`` from the ``ohPriority`` position."
msgstr ""

#: ../../SpinalHDL/Libraries/utils.rst:0
msgid "For example if ``requests`` is \"1001\" and ``ohPriority`` is \"0010\", the ``roundRobin`` function will start looking in `requests` from its second bit and will return \"1000\"."
msgstr ""

#: ../../SpinalHDL/Libraries/utils.rst:0
msgid "MuxOH ("
msgstr ""

#: ../../SpinalHDL/Libraries/utils.rst:0
msgid "oneHot : IndexedSeq[Bool],"
msgstr ""

#: ../../SpinalHDL/Libraries/utils.rst:0
msgid "inputs : Iterable[T]"
msgstr ""

#: ../../SpinalHDL/Libraries/utils.rst:62
msgid "Returns the muxed ``T`` from the ``inputs`` based on the ``oneHot`` vector."
msgstr ""

#: ../../SpinalHDL/Libraries/utils.rst:0
msgid "PriorityMux ("
msgstr ""

#: ../../SpinalHDL/Libraries/utils.rst:0
msgid "sel: Seq[Bool],"
msgstr ""

#: ../../SpinalHDL/Libraries/utils.rst:0
msgid "in:  Seq[T]"
msgstr ""

#: ../../SpinalHDL/Libraries/utils.rst:68
#: ../../SpinalHDL/Libraries/utils.rst:73
msgid "Return the first ``in`` element whose ``sel`` is ``True``."
msgstr ""

#: ../../SpinalHDL/Libraries/utils.rst:0
msgid "in:  Seq[(Bool, T)]"
msgstr ""

#: ../../SpinalHDL/Libraries/utils.rst:77
msgid "State full utilities"
msgstr ""

#: ../../SpinalHDL/Libraries/utils.rst:86
msgid "Delay(that: T, cycleCount: Int)"
msgstr ""

#: ../../SpinalHDL/Libraries/utils.rst:88
msgid "Return ``that`` delayed by ``cycleCount`` cycles"
msgstr ""

#: ../../SpinalHDL/Libraries/utils.rst:89
msgid "History(that: T, length: Int[,when : Bool])"
msgstr ""

#: ../../SpinalHDL/Libraries/utils.rst:90
msgid "List[T]"
msgstr ""

#: ../../SpinalHDL/Libraries/utils.rst:0
msgid "Return a Vec of ``length`` elements"
msgstr ""

#: ../../SpinalHDL/Libraries/utils.rst:0
msgid "The first element is ``that``\\ , the last one is ``that`` delayed by ``length``\\ -1\\"
msgstr ""

#: ../../SpinalHDL/Libraries/utils.rst:0
msgid "The internal shift register sample when ``when`` is asserted"
msgstr ""

#: ../../SpinalHDL/Libraries/utils.rst:94
msgid "BufferCC(input : T)"
msgstr ""

#: ../../SpinalHDL/Libraries/utils.rst:96
msgid "Return the input signal synchronized with the current clock domain by using 2 flip flop"
msgstr ""

#: ../../SpinalHDL/Libraries/utils.rst:100
msgid "Counter"
msgstr ""

#: ../../SpinalHDL/Libraries/utils.rst:102
msgid "The Counter tool can be used to easily instantiate a hardware counter."
msgstr ""

#: ../../SpinalHDL/Libraries/utils.rst:108
msgid "Instantiation syntax"
msgstr ""

#: ../../SpinalHDL/Libraries/utils.rst:109
#: ../../SpinalHDL/Libraries/utils.rst:152
msgid "Notes"
msgstr ""

#: ../../SpinalHDL/Libraries/utils.rst:110
msgid "``Counter(start: BigInt, end: BigInt[, inc : Bool])``"
msgstr ""

#: ../../SpinalHDL/Libraries/utils.rst:112
msgid "``Counter(range : Range[, inc : Bool])``"
msgstr ""

#: ../../SpinalHDL/Libraries/utils.rst:113
msgid "Compatible with the  ``x to y`` ``x until y`` syntaxes"
msgstr ""

#: ../../SpinalHDL/Libraries/utils.rst:114
msgid "``Counter(stateCount: BigInt[, inc : Bool])``"
msgstr ""

#: ../../SpinalHDL/Libraries/utils.rst:115
msgid "Starts at zero and ends at ``stateCount - 1``"
msgstr ""

#: ../../SpinalHDL/Libraries/utils.rst:116
msgid "``Counter(bitCount: BitCount[, inc : Bool])``"
msgstr ""

#: ../../SpinalHDL/Libraries/utils.rst:117
msgid "Starts at zero and ends at ``(1 << bitCount) - 1``"
msgstr ""

#: ../../SpinalHDL/Libraries/utils.rst:119
msgid "A counter can be controlled by methods, and wires can be read:"
msgstr ""

#: ../../SpinalHDL/Libraries/utils.rst:135
msgid "When a ``Counter`` overflows (reached end value), it restarts the next cycle to its start value."
msgstr ""

#: ../../SpinalHDL/Libraries/utils.rst:138
msgid "Currently, only up counter are supported."
msgstr ""

#: ../../SpinalHDL/Libraries/utils.rst:140
msgid "``CounterFreeRun`` builds an always running counter: ``CounterFreeRun(stateCount: BigInt)``."
msgstr ""

#: ../../SpinalHDL/Libraries/utils.rst:143
msgid "Timeout"
msgstr ""

#: ../../SpinalHDL/Libraries/utils.rst:145
msgid "The Timeout tool can be used to easily instantiate an hardware timeout."
msgstr ""

#: ../../SpinalHDL/Libraries/utils.rst:151
msgid "Instanciation syntax"
msgstr ""

#: ../../SpinalHDL/Libraries/utils.rst:153
msgid "Timeout(cycles : BigInt)"
msgstr ""

#: ../../SpinalHDL/Libraries/utils.rst:154
msgid "Tick after ``cycles`` clocks"
msgstr ""

#: ../../SpinalHDL/Libraries/utils.rst:155
msgid "Timeout(time : TimeNumber)"
msgstr ""

#: ../../SpinalHDL/Libraries/utils.rst:156
msgid "Tick after a ``time`` duration"
msgstr ""

#: ../../SpinalHDL/Libraries/utils.rst:157
msgid "Timeout(frequency : HertzNumber)"
msgstr ""

#: ../../SpinalHDL/Libraries/utils.rst:158
msgid "Tick at an ``frequency`` rate"
msgstr ""

#: ../../SpinalHDL/Libraries/utils.rst:161
msgid "There is an example of different syntaxes which could be used with the Counter tool"
msgstr ""

#: ../../SpinalHDL/Libraries/utils.rst:171
msgid "If you instantiate an ``Timeout`` with an time or frequency setup, the implicit ``ClockDomain`` should have an frequency setting."
msgstr ""

#: ../../SpinalHDL/Libraries/utils.rst:174
msgid "ResetCtrl"
msgstr ""

#: ../../SpinalHDL/Libraries/utils.rst:176
msgid "The ResetCtrl provide some utilities to manage resets."
msgstr ""

#: ../../SpinalHDL/Libraries/utils.rst:179
msgid "asyncAssertSyncDeassert"
msgstr ""

#: ../../SpinalHDL/Libraries/utils.rst:181
msgid "You can filter an asynchronous reset by using an asynchronously asserted synchronously deaserted logic. To do it you can use the ``ResetCtrl.asyncAssertSyncDeassert`` function which will return you the filtered value."
msgstr ""

#: ../../SpinalHDL/Libraries/utils.rst:187
msgid "Argument name"
msgstr ""

#: ../../SpinalHDL/Libraries/utils.rst:188
msgid "Type"
msgstr ""

#: ../../SpinalHDL/Libraries/utils.rst:190
msgid "input"
msgstr ""

#: ../../SpinalHDL/Libraries/utils.rst:192
msgid "Signal that should be filtered"
msgstr ""

#: ../../SpinalHDL/Libraries/utils.rst:193
msgid "clockDomain"
msgstr ""

#: ../../SpinalHDL/Libraries/utils.rst:194
msgid "ClockDomain"
msgstr ""

#: ../../SpinalHDL/Libraries/utils.rst:195
msgid "ClockDomain which will use the filtered value"
msgstr ""

#: ../../SpinalHDL/Libraries/utils.rst:196
msgid "inputPolarity"
msgstr ""

#: ../../SpinalHDL/Libraries/utils.rst:197
#: ../../SpinalHDL/Libraries/utils.rst:200
msgid "Polarity"
msgstr ""

#: ../../SpinalHDL/Libraries/utils.rst:198
msgid "HIGH/LOW (default=HIGH)"
msgstr ""

#: ../../SpinalHDL/Libraries/utils.rst:199
msgid "outputPolarity"
msgstr ""

#: ../../SpinalHDL/Libraries/utils.rst:201
msgid "HIGH/LOW (default=clockDomain.config.resetActiveLevel)"
msgstr ""

#: ../../SpinalHDL/Libraries/utils.rst:202
msgid "bufferDepth"
msgstr ""

#: ../../SpinalHDL/Libraries/utils.rst:203
#: ../../SpinalHDL/Libraries/utils.rst:220
msgid "Int"
msgstr ""

#: ../../SpinalHDL/Libraries/utils.rst:204
msgid "Number of register stages used to avoid metastability (default=2)"
msgstr ""

#: ../../SpinalHDL/Libraries/utils.rst:207
msgid "There is also an ``ResetCtrl.asyncAssertSyncDeassertDrive`` version of tool which directly assign the ``clockDomain`` reset with the filtered value."
msgstr ""

#: ../../SpinalHDL/Libraries/utils.rst:210
msgid "Special utilities"
msgstr ""

#: ../../SpinalHDL/Libraries/utils.rst:219
msgid "LatencyAnalysis(paths : Node*)"
msgstr ""

#: ../../SpinalHDL/Libraries/utils.rst:0
msgid "Return the shortest path, in terms of cycles, that travel through all nodes,"
msgstr ""

#: ../../SpinalHDL/Libraries/utils.rst:0
msgid "from the first one to the last one"
msgstr ""
