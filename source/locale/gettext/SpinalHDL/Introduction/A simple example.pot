# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018 - 2024, SpinalHDL
# This file is distributed under the same license as the SpinalHDL package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: SpinalHDL \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-01-02 16:09+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../SpinalHDL/Introduction/A simple example.rst:4
msgid "A simple example"
msgstr ""

#: ../../SpinalHDL/Introduction/A simple example.rst:6
msgid "Below is a simple hardware description from the `getting started <https://github.com/SpinalHDL/SpinalTemplateSbt>`_ repository."
msgstr ""

#: ../../SpinalHDL/Introduction/A simple example.rst:29
msgid "It is split into chunks and explained in this section."
msgstr ""

#: ../../SpinalHDL/Introduction/A simple example.rst:33
msgid "Component"
msgstr ""

#: ../../SpinalHDL/Introduction/A simple example.rst:35
msgid "First, there is the structure of a SpinalHDL ``Component``."
msgstr ""

#: ../../SpinalHDL/Introduction/A simple example.rst:37
msgid "A component is a piece of logic which can be instantiated (pasted) as many times as needed, and where the only accessible signals are its inputs and outputs."
msgstr ""

#: ../../SpinalHDL/Introduction/A simple example.rst:50
msgid "``MyTopLevel`` is the name of the component."
msgstr ""

#: ../../SpinalHDL/Introduction/A simple example.rst:52
msgid "In SpinalHDL, components use ``UpperCamelCase``."
msgstr ""

#: ../../SpinalHDL/Introduction/A simple example.rst:56
msgid "See also :ref:`Component` for more information."
msgstr ""

#: ../../SpinalHDL/Introduction/A simple example.rst:60
msgid "Ports"
msgstr ""

#: ../../SpinalHDL/Introduction/A simple example.rst:62
msgid "Then, the ports are defined."
msgstr ""

#: ../../SpinalHDL/Introduction/A simple example.rst:71
msgid "Directions:"
msgstr ""

#: ../../SpinalHDL/Introduction/A simple example.rst:73
msgid "``cond0`` and ``cond1`` are inputs ports"
msgstr ""

#: ../../SpinalHDL/Introduction/A simple example.rst:74
msgid "``flag`` and ``state`` are outputs ports"
msgstr ""

#: ../../SpinalHDL/Introduction/A simple example.rst:76
msgid "Types:"
msgstr ""

#: ../../SpinalHDL/Introduction/A simple example.rst:78
msgid "``cond0``, ``cond1`` and ``flag`` are 1 bit each (as 3 individual wires)"
msgstr ""

#: ../../SpinalHDL/Introduction/A simple example.rst:79
msgid "``state`` is an 8-bit unsigned integer (a bus of 8 wires representing an unsigned integer)"
msgstr ""

#: ../../SpinalHDL/Introduction/A simple example.rst:84
msgid "This syntax is only available since SpinalHDL 1.8, see :ref:`io` for legacy syntax and more information."
msgstr ""

#: ../../SpinalHDL/Introduction/A simple example.rst:89
msgid "Internal logic"
msgstr ""

#: ../../SpinalHDL/Introduction/A simple example.rst:91
msgid "Finally, there is the component logic:"
msgstr ""

#: ../../SpinalHDL/Introduction/A simple example.rst:104
msgid "``counter`` is a register containing an 8-bits unsigned integer, with the initial value 0. Assignments to change the state of a register are available for read-back only after the next clock sampling."
msgstr ""

#: ../../SpinalHDL/Introduction/A simple example.rst:110
msgid "Because of the presence of a register, two implicit signals are added to the component for the clock and the reset. See :ref:`Reg` and :ref:`clock_domain` for more information."
msgstr ""

#: ../../SpinalHDL/Introduction/A simple example.rst:114
msgid "Then a conditional rule is described: when the input ``cond0`` (which is in the ``io`` bundle) is set, the ``counter`` is incremented by one, else ``counter`` keeps its value set in the last rule. But, there is no previous rule, you would say. With a simple signal it would be a latch, and trigger an error. But here ``counter`` is a register, so it has a default case: it just keeps the same value."
msgstr ""

#: ../../SpinalHDL/Introduction/A simple example.rst:121
msgid "This creates a multiplexer: the input of the ``counter`` register can be its output or its output plus one depending on ``io.cond0``."
msgstr ""

#: ../../SpinalHDL/Introduction/A simple example.rst:124
msgid "Then unconditional rules (assignments) are described:"
msgstr ""

#: ../../SpinalHDL/Introduction/A simple example.rst:126
msgid "The output ``state`` is connected to the output of the register ``counter``."
msgstr ""

#: ../../SpinalHDL/Introduction/A simple example.rst:127
msgid "The output ``flag`` is the output of an ``or`` gate between a signal which is true when the output of \"``counter`` equals 0\", and the input ``cond1``."
msgstr ""

#: ../../SpinalHDL/Introduction/A simple example.rst:132
msgid "See also :ref:`semantics` for more information."
msgstr ""
