# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018 - 2024, SpinalHDL
# This file is distributed under the same license as the SpinalHDL package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: SpinalHDL \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-01-02 16:09+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../SpinalHDL/Introduction/SpinalHDL.rst:4
msgid "About SpinalHDL"
msgstr ""

#: ../../SpinalHDL/Introduction/SpinalHDL.rst:7
msgid "What is SpinalHDL?"
msgstr ""

#: ../../SpinalHDL/Introduction/SpinalHDL.rst:9
msgid "SpinalHDL is an open source high-level hardware description language with associated tools. Its development started in December 2014."
msgstr ""

#: ../../SpinalHDL/Introduction/SpinalHDL.rst:12
msgid "SpinalHDL makes it possible to efficiently describe hardware, giving names to digital hardware notions; the most obvious examples are ``Reg`` and ``Latch``. In event-driven languages such as VHDL and Verilog, to use these two common elements, the user has to describe how to simulate them with a process, so that the synthesis tool can infer what cell it is. With SpinalHDL, you just have to declare a ``Reg`` or a ``Latch``."
msgstr ""

#: ../../SpinalHDL/Introduction/SpinalHDL.rst:19
msgid "SpinalHDL is a *domain-specific language* based on Scala a general-purpose language. It brings several benefits:"
msgstr ""

#: ../../SpinalHDL/Introduction/SpinalHDL.rst:22
msgid "There are free integrated development environments supporting it, providing many features that simple text editors don't have:"
msgstr ""

#: ../../SpinalHDL/Introduction/SpinalHDL.rst:25
msgid "syntax and type errors are highlighted right in the code"
msgstr ""

#: ../../SpinalHDL/Introduction/SpinalHDL.rst:26
msgid "correct renaming, even across files"
msgstr ""

#: ../../SpinalHDL/Introduction/SpinalHDL.rst:27
msgid "smart auto completion / suggestions"
msgstr ""

#: ../../SpinalHDL/Introduction/SpinalHDL.rst:28
msgid "navigation tools (go to definition, show all references, etc.)"
msgstr ""

#: ../../SpinalHDL/Introduction/SpinalHDL.rst:30
msgid "It allows to implement simple to complex hardware generators (meta-hardware description) with no need to deal with several languages."
msgstr ""

#: ../../SpinalHDL/Introduction/SpinalHDL.rst:35
msgid "`Scala <https://scala-lang.org/>`_ is a statically-typed, functional and object-oriented language using the Java virtual machine (JVM)."
msgstr ""

#: ../../SpinalHDL/Introduction/SpinalHDL.rst:40
msgid "What SpinalHDL is not"
msgstr ""

#: ../../SpinalHDL/Introduction/SpinalHDL.rst:42
msgid "SpinalHDL is not an HLS tool: its goal is not to automagically transform an abstract algorithm into a digital circuit. Its goal is to create a new abstraction level by naming things, to help the designer reuse their code and not write the same thing over and over again."
msgstr ""

#: ../../SpinalHDL/Introduction/SpinalHDL.rst:47
msgid "SpinalHDL is not an analog modeling language. VHDL and Verilog make it possible for analog designers to provide a model of their IP to digital designers. SpinalHDL does not address this case, and is for digital designers to describe their own digital designs."
msgstr ""

#: ../../SpinalHDL/Introduction/SpinalHDL.rst:54
msgid "The Spinal development flow"
msgstr ""

#: ../../SpinalHDL/Introduction/SpinalHDL.rst:56
msgid "Once code is written in *SpinalHDL*, the tool can:"
msgstr ""

#: ../../SpinalHDL/Introduction/SpinalHDL.rst:58
msgid "Generate VHDL, Verilog or SystemVerilog, to instantiate it in one of these languages or give it to any simulator or synthesis tool. There is no logic overhead, hierarchy and names are preserved, and it runs design checks during generation."
msgstr ""

#: ../../SpinalHDL/Introduction/SpinalHDL.rst:62
msgid "Boot a simulation using Verilator or another supported simulator."
msgstr ""

#: ../../SpinalHDL/Introduction/SpinalHDL.rst:68
msgid "As SpinalHDL is interoperable with VHDL and (System)Verilog, you can both instantiate SpinalHDL IPs in these language (using generated code) and instantiate IPs in these languages in SpinalHDL (using ``BlackBox``)."
msgstr ""

#: ../../SpinalHDL/Introduction/SpinalHDL.rst:74
msgid "SpinalHDL is *fully interoperable* with standard VHDL/Verilog-based EDA tools (simulators and synthesizers) as the output generated by the toolchain can be VHDL or Verilog."
msgstr ""

#: ../../SpinalHDL/Introduction/SpinalHDL.rst:80
msgid "Advantages of using SpinalHDL over VHDL / Verilog"
msgstr ""

#: ../../SpinalHDL/Introduction/SpinalHDL.rst:82
msgid "As SpinalHDL is based on a high-level language, it provides several advantages to improve your hardware coding:"
msgstr ""

#: ../../SpinalHDL/Introduction/SpinalHDL.rst:84
msgid "**No more endless wiring** - Create and connect complex buses like AXI in one single line."
msgstr ""

#: ../../SpinalHDL/Introduction/SpinalHDL.rst:85
msgid "**Evolving capabilities** - Create your own bus definitions and abstraction layers."
msgstr ""

#: ../../SpinalHDL/Introduction/SpinalHDL.rst:86
msgid "**Reduce code size** - By a high factor, especially for wiring. This enables you to have a better overview of your code base, increase your productivity and create fewer headaches."
msgstr ""

#: ../../SpinalHDL/Introduction/SpinalHDL.rst:87
msgid "**Free and user friendly IDE** - Thanks to Scala tools for auto-completion, error highlighting, navigation shortcuts, and many others."
msgstr ""

#: ../../SpinalHDL/Introduction/SpinalHDL.rst:88
msgid "**Powerful and easy type conversions** - Bidirectional translation between any data type and bits. Useful when loading a complex data structure from a CPU interface."
msgstr ""

#: ../../SpinalHDL/Introduction/SpinalHDL.rst:89
msgid "**Design checks** - Early stage lints to check that there are eg no combinatorial loops / latches."
msgstr ""

#: ../../SpinalHDL/Introduction/SpinalHDL.rst:90
msgid "**Clock domain safety** - Early stage lints to inform you that there are no unintentional clock domain crossings."
msgstr ""

#: ../../SpinalHDL/Introduction/SpinalHDL.rst:91
msgid "**Generic design** - There are no restrictions to the genericity of your hardware description by using Scala constructs."
msgstr ""
