# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018 - 2024, SpinalHDL
# This file is distributed under the same license as the SpinalHDL package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: SpinalHDL \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-01-02 16:09+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../SpinalHDL/Data types/bool.rst:4
#: ../../SpinalHDL/Data types/bool.rst:70
#: ../../SpinalHDL/Data types/bool.rst:73
#: ../../SpinalHDL/Data types/bool.rst:76
#: ../../SpinalHDL/Data types/bool.rst:80
#: ../../SpinalHDL/Data types/bool.rst:112
#: ../../SpinalHDL/Data types/bool.rst:116
#: ../../SpinalHDL/Data types/bool.rst:120
#: ../../SpinalHDL/Data types/bool.rst:123
#: ../../SpinalHDL/Data types/bool.rst:126
#: ../../SpinalHDL/Data types/bool.rst:135
#: ../../SpinalHDL/Data types/bool.rst:138
#: ../../SpinalHDL/Data types/bool.rst:141
#: ../../SpinalHDL/Data types/bool.rst:144
#: ../../SpinalHDL/Data types/bool.rst:192
#: ../../SpinalHDL/Data types/bool.rst:195
#: ../../SpinalHDL/Data types/bool.rst:198
#: ../../SpinalHDL/Data types/bool.rst:201
#: ../../SpinalHDL/Data types/bool.rst:204
#: ../../SpinalHDL/Data types/bool.rst:207
#: ../../SpinalHDL/Data types/bool.rst:216
#: ../../SpinalHDL/Data types/bool.rst:248
#: ../../SpinalHDL/Data types/bool.rst:251
msgid "Bool"
msgstr ""

#: ../../SpinalHDL/Data types/bool.rst:7
#: ../../SpinalHDL/Data types/bool.rst:66
#: ../../SpinalHDL/Data types/bool.rst:108
#: ../../SpinalHDL/Data types/bool.rst:188
#: ../../SpinalHDL/Data types/bool.rst:244
#: ../../SpinalHDL/Data types/bool.rst:271
#: ../../SpinalHDL/Data types/bool.rst:305
msgid "Description"
msgstr ""

#: ../../SpinalHDL/Data types/bool.rst:9
msgid "The ``Bool`` type corresponds to a boolean value (True or False) or a single bit/wire used in a hardware design.  While named similarly it should not be confused with Scala `Boolean` type which does not describe hardware but truth values in the Scala generator code."
msgstr ""

#: ../../SpinalHDL/Data types/bool.rst:14
msgid "An important concept and rule-of-thumb to understand is that the Scala `Boolean` type is used in places where elaboration-time HDL code-generation decision making is occuring in Scala code.  Like any regular program it affects execution of the Scala program that is SpinalHDL at the time the program is being run to perform HDL code generation."
msgstr ""

#: ../../SpinalHDL/Data types/bool.rst:20
msgid "Therefore the value of a Scala `Boolean` can not be observed from hardware, because it only exists ahead-of-time in the SpinalHDL program at the time of HDL code-gen."
msgstr ""

#: ../../SpinalHDL/Data types/bool.rst:24
msgid "In scenarios where you might need this for your design, for example to pass a value (that maybe acting as a parameterized constant input) from Scala into your hardware design, you can type convert it to Bool with the constructor `Bool(value: Boolean)`."
msgstr ""

#: ../../SpinalHDL/Data types/bool.rst:28
msgid "Similarly the value of a SpinalHDL `Bool` can not be seen at code-generation, all that can be seen and manipulated is the HDL construct concerning a `wire` and how it is routed (through modules/Components), driven (sourced) and connected (sunk)."
msgstr ""

#: ../../SpinalHDL/Data types/bool.rst:32
msgid "The signal direction of assignment operators `:=` is managed by SpinalHDL. The use of the Bool instance on the left-hand-side or the right-hand-side of the assignment operator `:=` dictates if it is a source (provides state) or sink (captures state) for a given assignment."
msgstr ""

#: ../../SpinalHDL/Data types/bool.rst:37
msgid "Multiple uses of the assignment operator are allowed, such that it is normal for a signal wire to act as a source (provides a value to drive HDL state) to be able to connect and drive multiple inputs of other HDL constructs.  When a Bool instance used as a source the order the assignment statements appear or are executed in Scala does not matter, unlike when it is used as a sink (captures state)."
msgstr ""

#: ../../SpinalHDL/Data types/bool.rst:44
msgid "When multiple assignment operators drive the Bool (the Bool is on the left-hand-side of the assignment expression), the last assignment statement wins rule; take effect.  The last would be the last to execute in Scala code.  This matter can affect the layout and ordering of your SpinalHDL Scala code to ensure the correct precedence order is archived in the hardware design for assigning a new state to the Bool in hardware."
msgstr ""

#: ../../SpinalHDL/Data types/bool.rst:51
msgid "It may help to understand the concept with relating the Scala/SpinalHDL `Bool` instance as a reference to a HDL `net` in the net-list.  Which the assignment `:=` operator is attaching HDL constructs into the same net."
msgstr ""

#: ../../SpinalHDL/Data types/bool.rst:57
msgid "Declaration"
msgstr ""

#: ../../SpinalHDL/Data types/bool.rst:59
msgid "The syntax to declare a boolean value is as follows: (everything between [] is optional)"
msgstr ""

#: ../../SpinalHDL/Data types/bool.rst:65
msgid "Syntax"
msgstr ""

#: ../../SpinalHDL/Data types/bool.rst:67
#: ../../SpinalHDL/Data types/bool.rst:272
#: ../../SpinalHDL/Data types/bool.rst:306
msgid "Return"
msgstr ""

#: ../../SpinalHDL/Data types/bool.rst:68
msgid "Bool()"
msgstr ""

#: ../../SpinalHDL/Data types/bool.rst:69
msgid "Create a Bool"
msgstr ""

#: ../../SpinalHDL/Data types/bool.rst:71
msgid "True"
msgstr ""

#: ../../SpinalHDL/Data types/bool.rst:72
msgid "Create a Bool assigned with ``true``"
msgstr ""

#: ../../SpinalHDL/Data types/bool.rst:74
msgid "False"
msgstr ""

#: ../../SpinalHDL/Data types/bool.rst:75
msgid "Create a Bool assigned with ``false``"
msgstr ""

#: ../../SpinalHDL/Data types/bool.rst:77
msgid "Bool(value: Boolean)"
msgstr ""

#: ../../SpinalHDL/Data types/bool.rst:78
msgid "Create a Bool assigned with a value from a Scala Boolean type (true, false). This explicitly converts to ``True`` or ``False``."
msgstr ""

#: ../../SpinalHDL/Data types/bool.rst:93
msgid "Operators"
msgstr ""

#: ../../SpinalHDL/Data types/bool.rst:95
msgid "The following operators are available for the ``Bool`` type:"
msgstr ""

#: ../../SpinalHDL/Data types/bool.rst:102
msgid "Logic"
msgstr ""

#: ../../SpinalHDL/Data types/bool.rst:107
#: ../../SpinalHDL/Data types/bool.rst:187
#: ../../SpinalHDL/Data types/bool.rst:243
#: ../../SpinalHDL/Data types/bool.rst:270
#: ../../SpinalHDL/Data types/bool.rst:304
msgid "Operator"
msgstr ""

#: ../../SpinalHDL/Data types/bool.rst:109
#: ../../SpinalHDL/Data types/bool.rst:189
#: ../../SpinalHDL/Data types/bool.rst:245
msgid "Return type"
msgstr ""

#: ../../SpinalHDL/Data types/bool.rst:110
msgid "!x"
msgstr ""

#: ../../SpinalHDL/Data types/bool.rst:111
#: ../../SpinalHDL/Data types/bool.rst:125
msgid "Logical NOT"
msgstr ""

#: ../../SpinalHDL/Data types/bool.rst:0
msgid "x && y"
msgstr ""

#: ../../SpinalHDL/Data types/bool.rst:0
msgid "x & y"
msgstr ""

#: ../../SpinalHDL/Data types/bool.rst:115
msgid "Logical AND"
msgstr ""

#: ../../SpinalHDL/Data types/bool.rst:0
msgid "x || y"
msgstr ""

#: ../../SpinalHDL/Data types/bool.rst:0
msgid "x | y"
msgstr ""

#: ../../SpinalHDL/Data types/bool.rst:119
msgid "Logical OR"
msgstr ""

#: ../../SpinalHDL/Data types/bool.rst:121
msgid "x ^ y"
msgstr ""

#: ../../SpinalHDL/Data types/bool.rst:122
msgid "Logical XOR"
msgstr ""

#: ../../SpinalHDL/Data types/bool.rst:124
msgid "~x"
msgstr ""

#: ../../SpinalHDL/Data types/bool.rst:127
msgid "x.set[()]"
msgstr ""

#: ../../SpinalHDL/Data types/bool.rst:128
msgid "Set x to True"
msgstr ""

#: ../../SpinalHDL/Data types/bool.rst:129
#: ../../SpinalHDL/Data types/bool.rst:132
msgid "Unit (none)"
msgstr ""

#: ../../SpinalHDL/Data types/bool.rst:130
msgid "x.clear[()]"
msgstr ""

#: ../../SpinalHDL/Data types/bool.rst:131
msgid "Set x to False"
msgstr ""

#: ../../SpinalHDL/Data types/bool.rst:133
msgid "x.setWhen(cond)"
msgstr ""

#: ../../SpinalHDL/Data types/bool.rst:134
msgid "Set x when cond is True"
msgstr ""

#: ../../SpinalHDL/Data types/bool.rst:136
msgid "x.clearWhen(cond)"
msgstr ""

#: ../../SpinalHDL/Data types/bool.rst:137
msgid "Clear x when cond is True"
msgstr ""

#: ../../SpinalHDL/Data types/bool.rst:139
msgid "x.riseWhen(cond)"
msgstr ""

#: ../../SpinalHDL/Data types/bool.rst:140
msgid "Set x when x is False and cond is True"
msgstr ""

#: ../../SpinalHDL/Data types/bool.rst:142
msgid "x.fallWhen(cond)"
msgstr ""

#: ../../SpinalHDL/Data types/bool.rst:143
msgid "Clear x when x is True and cond is True"
msgstr ""

#: ../../SpinalHDL/Data types/bool.rst:173
msgid "Edge detection"
msgstr ""

#: ../../SpinalHDL/Data types/bool.rst:175
msgid "All edge detection functions will instantiate an additional register via :ref:`RegNext <regnext>` to get a delayed value of the ``Bool`` in question."
msgstr ""

#: ../../SpinalHDL/Data types/bool.rst:178
msgid "This feature does not reconfigure a D-type Flip-Flop to use an alternative CLK source, it uses two D-type Flip-Flop in series chain (with both CLK pins inheriting the default ClockDomain).  It has combinational logic to perform edge detection based on the output Q states."
msgstr ""

#: ../../SpinalHDL/Data types/bool.rst:190
msgid "x.edge[()]"
msgstr ""

#: ../../SpinalHDL/Data types/bool.rst:191
msgid "Return True when x changes state"
msgstr ""

#: ../../SpinalHDL/Data types/bool.rst:193
msgid "x.edge(initAt: Bool)"
msgstr ""

#: ../../SpinalHDL/Data types/bool.rst:194
msgid "Same as x.edge but with a reset value"
msgstr ""

#: ../../SpinalHDL/Data types/bool.rst:196
msgid "x.rise[()]"
msgstr ""

#: ../../SpinalHDL/Data types/bool.rst:197
msgid "Return True when x was low at the last cycle and is now high"
msgstr ""

#: ../../SpinalHDL/Data types/bool.rst:199
msgid "x.rise(initAt: Bool)"
msgstr ""

#: ../../SpinalHDL/Data types/bool.rst:200
msgid "Same as x.rise but with a reset value"
msgstr ""

#: ../../SpinalHDL/Data types/bool.rst:202
msgid "x.fall[()]"
msgstr ""

#: ../../SpinalHDL/Data types/bool.rst:203
msgid "Return True when x was high at the last cycle and is now low"
msgstr ""

#: ../../SpinalHDL/Data types/bool.rst:205
msgid "x.fall(initAt: Bool)"
msgstr ""

#: ../../SpinalHDL/Data types/bool.rst:206
msgid "Same as x.fall but with a reset value"
msgstr ""

#: ../../SpinalHDL/Data types/bool.rst:208
msgid "x.edges[()]"
msgstr ""

#: ../../SpinalHDL/Data types/bool.rst:209
msgid "Return a bundle (rise, fall, toggle)"
msgstr ""

#: ../../SpinalHDL/Data types/bool.rst:210
#: ../../SpinalHDL/Data types/bool.rst:213
msgid "BoolEdges"
msgstr ""

#: ../../SpinalHDL/Data types/bool.rst:211
msgid "x.edges(initAt: Bool)"
msgstr ""

#: ../../SpinalHDL/Data types/bool.rst:212
msgid "Same as x.edges but with a reset value"
msgstr ""

#: ../../SpinalHDL/Data types/bool.rst:214
msgid "x.toggle[()]"
msgstr ""

#: ../../SpinalHDL/Data types/bool.rst:215
msgid "Return True at every edge"
msgstr ""

#: ../../SpinalHDL/Data types/bool.rst:238
msgid "Comparison"
msgstr ""

#: ../../SpinalHDL/Data types/bool.rst:246
msgid "x === y"
msgstr ""

#: ../../SpinalHDL/Data types/bool.rst:247
msgid "Equality"
msgstr ""

#: ../../SpinalHDL/Data types/bool.rst:249
msgid "x =/= y"
msgstr ""

#: ../../SpinalHDL/Data types/bool.rst:250
msgid "Inequality"
msgstr ""

#: ../../SpinalHDL/Data types/bool.rst:265
msgid "Type cast"
msgstr ""

#: ../../SpinalHDL/Data types/bool.rst:273
msgid "x.asBits"
msgstr ""

#: ../../SpinalHDL/Data types/bool.rst:274
msgid "Binary cast to Bits"
msgstr ""

#: ../../SpinalHDL/Data types/bool.rst:275
msgid "Bits(1 bit)"
msgstr ""

#: ../../SpinalHDL/Data types/bool.rst:276
msgid "x.asUInt"
msgstr ""

#: ../../SpinalHDL/Data types/bool.rst:277
msgid "Binary cast to UInt"
msgstr ""

#: ../../SpinalHDL/Data types/bool.rst:278
msgid "UInt(1 bit)"
msgstr ""

#: ../../SpinalHDL/Data types/bool.rst:279
msgid "x.asSInt"
msgstr ""

#: ../../SpinalHDL/Data types/bool.rst:280
msgid "Binary cast to SInt"
msgstr ""

#: ../../SpinalHDL/Data types/bool.rst:281
msgid "SInt(1 bit)"
msgstr ""

#: ../../SpinalHDL/Data types/bool.rst:282
msgid "x.asUInt(bitCount)"
msgstr ""

#: ../../SpinalHDL/Data types/bool.rst:283
msgid "Binary cast to UInt and resize, putting Bool value in LSB and padding with zeros."
msgstr ""

#: ../../SpinalHDL/Data types/bool.rst:285
msgid "UInt(bitCount bits)"
msgstr ""

#: ../../SpinalHDL/Data types/bool.rst:286
msgid "x.asBits(bitCount)"
msgstr ""

#: ../../SpinalHDL/Data types/bool.rst:287
msgid "Binary cast to Bits and resize, putting Bool value in LSB and padding with zeros."
msgstr ""

#: ../../SpinalHDL/Data types/bool.rst:289
msgid "Bits(bitCount bits)"
msgstr ""

#: ../../SpinalHDL/Data types/bool.rst:299
msgid "Misc"
msgstr ""

#: ../../SpinalHDL/Data types/bool.rst:307
msgid "x ## y"
msgstr ""

#: ../../SpinalHDL/Data types/bool.rst:308
msgid "Concatenate, x->high, y->low"
msgstr ""

#: ../../SpinalHDL/Data types/bool.rst:309
msgid "Bits(w(x) + w(y) bits)"
msgstr ""

#: ../../SpinalHDL/Data types/bool.rst:310
msgid "x #* n"
msgstr ""

#: ../../SpinalHDL/Data types/bool.rst:311
msgid "Repeat x n-times"
msgstr ""

#: ../../SpinalHDL/Data types/bool.rst:312
msgid "Bits(n bits)"
msgstr ""

#: ../../SpinalHDL/Data types/bool.rst:324
msgid "MaskedBoolean"
msgstr ""

#: ../../SpinalHDL/Data types/bool.rst:326
msgid "A masked boolean allows don’t care values. They are usually not used on their own but through :ref:`MaskedLiteral <maskedliteral>`."
msgstr ""
