# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018 - 2024, SpinalHDL
# This file is distributed under the same license as the SpinalHDL package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: SpinalHDL \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-01-02 16:09+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../SpinalHDL/Data types/bits.rst:4
msgid "Bits"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:6
msgid "The ``Bits`` type is a vector of bits without conveying any arithmetic meaning."
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:9
msgid "Declaration"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:11
msgid "The syntax to declare a bit vector is as follows (everything between [] is optional):"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:17
msgid "Syntax"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:18
#: ../../SpinalHDL/Data types/bits.rst:82
#: ../../SpinalHDL/Data types/bits.rst:182
#: ../../SpinalHDL/Data types/bits.rst:207
#: ../../SpinalHDL/Data types/bits.rst:260
#: ../../SpinalHDL/Data types/bits.rst:358
msgid "Description"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:19
msgid "Bits [()]"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:20
msgid "Create Bits, bit count is inferred from the widest assignment statement after construction"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:22
#: ../../SpinalHDL/Data types/bits.rst:393
msgid "Bits(x bits)"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:23
msgid "Create Bits with x bits"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:0
msgid "B(value: Int[, x bits])"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:0
msgid "B(value: BigInt[, x bits])"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:26
msgid "Create Bits with x bits assigned with 'value'"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:27
msgid "B\"[[size']base]value\""
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:28
msgid "Create Bits assigned with 'value' (base: 'h', 'd', 'o', 'b')"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:29
msgid "B([x bits,] elements: Element*)"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:30
msgid "Create Bits assigned with the value specified by :ref:`elements <element>`"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:53
msgid "When inferring the width of a ``Bits`` the sizes of assigned values still have to match the final size of the signal:"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:70
msgid "Operators"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:72
msgid "The following operators are available for the ``Bits`` type:"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:75
msgid "Logic"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:81
#: ../../SpinalHDL/Data types/bits.rst:181
#: ../../SpinalHDL/Data types/bits.rst:206
#: ../../SpinalHDL/Data types/bits.rst:259
#: ../../SpinalHDL/Data types/bits.rst:357
msgid "Operator"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:83
#: ../../SpinalHDL/Data types/bits.rst:183
msgid "Return type"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:84
msgid "~x"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:85
msgid "Bitwise NOT"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:86
#: ../../SpinalHDL/Data types/bits.rst:114
#: ../../SpinalHDL/Data types/bits.rst:128
#: ../../SpinalHDL/Data types/bits.rst:132
#: ../../SpinalHDL/Data types/bits.rst:136
#: ../../SpinalHDL/Data types/bits.rst:140
#: ../../SpinalHDL/Data types/bits.rst:211
#: ../../SpinalHDL/Data types/bits.rst:226
#: ../../SpinalHDL/Data types/bits.rst:374
#: ../../SpinalHDL/Data types/bits.rst:389
msgid "Bits(w(x) bits)"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:87
msgid "x & y"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:88
msgid "Bitwise AND"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:89
#: ../../SpinalHDL/Data types/bits.rst:92
#: ../../SpinalHDL/Data types/bits.rst:95
msgid "Bits(w(xy) bits)"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:90
msgid "x | y"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:91
msgid "Bitwise OR"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:93
msgid "x ^ y"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:94
msgid "Bitwise XOR"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:96
msgid "x.xorR"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:97
msgid "XOR all bits of x"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:98
#: ../../SpinalHDL/Data types/bits.rst:101
#: ../../SpinalHDL/Data types/bits.rst:104
#: ../../SpinalHDL/Data types/bits.rst:186
#: ../../SpinalHDL/Data types/bits.rst:189
#: ../../SpinalHDL/Data types/bits.rst:264
#: ../../SpinalHDL/Data types/bits.rst:267
#: ../../SpinalHDL/Data types/bits.rst:285
#: ../../SpinalHDL/Data types/bits.rst:288
msgid "Bool"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:99
msgid "x.orR"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:100
msgid "OR all bits of x"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:102
msgid "x.andR"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:103
msgid "AND all bits of x"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:0
msgid "y = 1 // Int"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:0
msgid "x \\>\\> y"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:0
msgid "Logical shift right, y: Int"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:0
msgid "Result may reduce width"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:109
msgid "Bits(w(x) - y bits)"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:0
msgid "y = U(1) // UInt"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:0
msgid "Logical shift right, y: UInt"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:0
msgid "Result is same width"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:0
msgid "x \\<\\< y"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:0
msgid "Logical shift left, y: Int"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:0
msgid "Result may increase width"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:119
msgid "Bits(w(x) + y bits)"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:0
msgid "Logical shift left, y: UInt"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:124
msgid "Bits(w(x) + max(y) bits)"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:125
msgid "x \\|\\>\\> y"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:0
msgid "Logical shift right, y: Int/UInt"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:129
msgid "x \\|\\<\\< y"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:0
msgid "Logical shift left, y: Int/UInt"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:133
msgid "x.rotateLeft(y)"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:0
msgid "Logical left rotation, y: UInt/Int"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:137
msgid "x.rotateRight(y)"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:0
msgid "Logical right rotation, y: UInt/Int"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:141
msgid "x.clearAll[()]"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:142
msgid "Clear all bits"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:143
#: ../../SpinalHDL/Data types/bits.rst:146
#: ../../SpinalHDL/Data types/bits.rst:149
#: ../../SpinalHDL/Data types/bits.rst:152
msgid "*modifies x*"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:144
msgid "x.setAll[()]"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:145
msgid "Set all bits"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:147
msgid "x.setAllTo(value: Boolean)"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:148
msgid "Set all bits to the given Boolean value"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:150
msgid "x.setAllTo(value: Bool)"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:151
msgid "Set all bits to the given Bool value"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:176
msgid "Comparison"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:184
msgid "x === y"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:185
msgid "Equality"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:187
msgid "x =/= y"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:188
msgid "Inequality"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:201
msgid "Type cast"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:208
#: ../../SpinalHDL/Data types/bits.rst:261
#: ../../SpinalHDL/Data types/bits.rst:359
msgid "Return"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:209
msgid "x.asBits"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:210
msgid "Binary cast to Bits"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:212
msgid "x.asUInt"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:213
msgid "Binary cast to UInt"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:214
msgid "UInt(w(x) bits)"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:215
msgid "x.asSInt"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:216
msgid "Binary cast to SInt"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:217
msgid "SInt(w(x) bits)"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:218
msgid "x.asBools"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:219
msgid "Cast to an array of Bools"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:220
msgid "Vec(Bool(), w(x))"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:221
msgid "x.asBool"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:222
msgid "Extract LSB of :code:`x`"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:223
msgid "Bool(x.lsb)"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:224
msgid "B(x: T)"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:225
msgid "Cast Data to Bits"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:229
msgid "To cast a ``Bool``, ``UInt`` or an ``SInt`` into a ``Bits``, you can use ``B(something)`` or ``B(something[, x bits])``:"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:247
msgid "Bit extraction"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:249
msgid "All of the bit extraction operations can be used to read a bit / group of bits. Like in other HDLs the extraction operators can also be used to assign a part of a ``Bits``."
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:252
msgid "All of the bit extraction operations can be used to read a bit / group of bits. Like in other HDLs They can also be used to select a range of bits to be written."
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:262
msgid "x(y: Int)"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:263
msgid "Static bit access of y-th bit"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:265
msgid "x(x: UInt)"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:266
msgid "Variable bit access of y-th bit"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:268
msgid "x(offset: Int, width bits)"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:269
msgid "Fixed part select of fixed width, offset is LSB index"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:270
#: ../../SpinalHDL/Data types/bits.rst:273
msgid "Bits(width bits)"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:271
msgid "x(offset: UInt, width bits)"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:272
msgid "Variable part-select of fixed width, offset is LSB index"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:274
msgid "x(range: Range)"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:275
msgid "Access a :ref:`range <range>` of bits. Ex : myBits(4 downto 2)"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:276
msgid "Bits(range.size bits)"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:277
msgid "x.subdivideIn(y slices, [strict: Boolean])"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:278
msgid "Subdivide x into y slices, y: Int"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:279
msgid "Vec(Bits(...), y)"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:280
msgid "x.subdivideIn(y bits, [strict: Boolean])"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:281
msgid "Subdivide x in multiple slices of y bits, y: Int"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:282
msgid "Vec(Bits(y bit), ...)"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:283
msgid "x.msb"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:284
msgid "Access most significant bit of x (highest index)"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:286
msgid "x.lsb"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:287
msgid "Access lowest significant bit of x (index 0)"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:291
msgid "Some basic examples:"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:320
msgid "Subdivide details"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:322
msgid "Both overloads of ``subdivideIn`` have an optional parameter ``strict`` (i.e. ``subdivideIn(slices: SlicesCount, strict: Boolean = true)``). If ``strict`` is ``true`` an error will be raised if the input could not be divided into equal parts. If set to ``false`` the last element may be smaller than the other (equal sized) elements."
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:348
msgid "Misc"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:350
msgid "In contrast to the bit extraction operations listed above it's not possible to use the return values to assign to the original signal."
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:360
msgid "x.getWidth"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:361
msgid "Return bitcount"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:362
#: ../../SpinalHDL/Data types/bits.rst:371
msgid "Int"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:363
msgid "x.bitsRange"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:364
msgid "Return the range (0 to x.high)"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:365
#: ../../SpinalHDL/Data types/bits.rst:368
msgid "Range"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:366
msgid "x.valueRange"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:367
msgid "Return the range of minimum to maximum x values, interpreted as an unsigned integer (0 to 2 \\*\\* width - 1)."
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:369
msgid "x.high"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:370
msgid "Return the index of the MSB (highest allowed zero-based index for x)"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:372
msgid "x.reversed"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:373
msgid "Return a copy of x with reverse bit order, MSB<>LSB are mirrored."
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:375
msgid "x ## y"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:376
msgid "Concatenate, x->high, y->low"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:377
msgid "Bits(w(x) + w(y) bits)"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:378
msgid "x #* n"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:379
msgid "Repeat x n-times"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:380
msgid "Bits(w(x) * n bits)"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:381
msgid "x.resize(y)"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:382
msgid "Return a resized representation of x, if enlarged, it is extended with zero padding at MSB as necessary, y: Int"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:384
msgid "Bits(y bits)"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:385
msgid "x.resized"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:386
msgid "Return a version of x which is allowed to be automatically resized were needed.  The resize operation is deferred until the point of assignment later. The resize may widen or truncate, retaining the LSB."
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:390
msgid "x.resizeLeft(x)"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:391
msgid "Resize by keeping MSB at the same place, x:Int The resize may widen or truncate, retaining the MSB."
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:394
msgid "x.getZero"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:395
msgid "Return a new instance of Bits that is assigned a constant value of zeros the same width as x."
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:396
msgid "Bits(0, w(x) bits)"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:397
msgid "x.getAllTrue"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:398
msgid "Return a new instance of Bits that is assigned a constant value of ones the same width as x."
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:399
msgid "Bits(w(x) bits).setAll()"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:402
msgid "`validRange` can only be used for types where the minimum and maximum values fit into a signed 32-bit integer. (This is a limitation given by the Scala ``scala.collection.immutable.Range`` type which uses `Int`)"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:424
msgid "MaskedLiteral"
msgstr ""

#: ../../SpinalHDL/Data types/bits.rst:426
msgid "MaskedLiteral values are bit vectors with don't care values denoted with ``-``. They can be used for direct comparison or for ``switch`` statements and ``mux`` es."
msgstr ""
